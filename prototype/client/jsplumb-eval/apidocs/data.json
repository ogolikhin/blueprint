{
    "project": {
        "name": "jsPlumb",
        "description": "jsPlumb Toolkit",
        "version": "1.0.11",
        "url": "https://jsplumbtoolkit.com"
    },
    "files": {
        "src/anim.js": {
            "name": "src/anim.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/browser-util.js": {
            "name": "src/browser-util.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components.js": {
            "name": "src/components.js",
            "modules": {},
            "classes": {
                "jsPlumbToolkit.Renderers.AbstractRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/dialogs.js": {
            "name": "src/dialogs.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/drawing.js": {
            "name": "src/drawing.js",
            "modules": {},
            "classes": {
                "jsPlumbToolkit.DrawingTools": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/graph.js": {
            "name": "src/graph.js",
            "modules": {},
            "classes": {
                "Node": 1,
                "Port": 1,
                "Edge": 1,
                "Graph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/jsPlumbToolkit-angular.js": {
            "name": "src/jsPlumbToolkit-angular.js",
            "modules": {},
            "classes": {
                "jsPlumbToolkit directive.": 1,
                "jsPlumb Palette directive": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/jsPlumbToolkit.js": {
            "name": "src/jsPlumbToolkit.js",
            "modules": {},
            "classes": {
                "jsPlumbToolkitInstance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lasso.js": {
            "name": "src/lasso.js",
            "modules": {},
            "classes": {
                "jsPlumbToolkit.Widgets.Lasso": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/layout.js": {
            "name": "src/layout.js",
            "modules": {},
            "classes": {
                "Layouts.AbstractLayout": 1,
                "Layouts.EmptyLayout": 1,
                "Layouts.Mistletoe": 1,
                "Layouts.AbsoluteBackedLayout": 1,
                "Layouts.Absolute": 1,
                "Layouts.AbstractHierarchicalLayout": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/layouts-circular.js": {
            "name": "src/layouts-circular.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/layouts-hierarchical.js": {
            "name": "src/layouts-hierarchical.js",
            "modules": {},
            "classes": {
                "Layouts.Hierarchical": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/layouts-spring.js": {
            "name": "src/layouts-spring.js",
            "modules": {},
            "classes": {
                "jsPlumbToolkit.Layouts.Spring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/miniview.js": {
            "name": "src/miniview.js",
            "modules": {},
            "classes": {
                "jsPlumbToolkit.Renderers.Miniview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/model.js": {
            "name": "src/model.js",
            "modules": {},
            "classes": {
                "jsPlumbToolkit.Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/pan-zoom-widget.js": {
            "name": "src/pan-zoom-widget.js",
            "modules": {},
            "classes": {
                "ZoomWidget": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/path.js": {
            "name": "src/path.js",
            "modules": {},
            "classes": {
                "Path": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/pinch-listener.js": {
            "name": "src/pinch-listener.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/selection.js": {
            "name": "src/selection.js",
            "modules": {},
            "classes": {
                "Selection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/support.js": {
            "name": "src/support.js",
            "modules": {},
            "classes": {
                "jsPlumbToolkit.Support": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/surface.js": {
            "name": "src/surface.js",
            "modules": {},
            "classes": {
                "Surface": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/templates.js": {
            "name": "src/templates.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/util.js": {
            "name": "src/util.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/wheel-listener.js": {
            "name": "src/wheel-listener.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "jsPlumbToolkit.Renderers.AbstractRenderer": {
            "name": "jsPlumbToolkit.Renderers.AbstractRenderer",
            "shortname": "jsPlumbToolkit.Renderers.AbstractRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/components.js",
            "line": 201,
            "description": "Superclass for renderers",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "view",
                            "description": "Parameters for Node, Port and Edge definitions. Although this is not a required parameter, the vast majority of applications will",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "elementsDraggable",
                            "description": "Whether or not elements should be made draggable.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "elementsDroppable",
                            "description": "If true, elements can be dragged onto other elements and events will be fired.\nWhat you choose to do with that event is up to you.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "id",
                            "description": "Optional id for this renderer. If you provide this you can then subsequently retrieve it via `toolkit.getRenderer(<id>)`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "refreshAutomatically",
                            "description": "Whether or not to automatically refresh the associated layout whenever a Node is added or deleted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enhancedView",
                            "description": "If false, there will be no support for preconfigured parameters or functions in the definitions inside a view. You will want to set this for Angular if you use the 2-way data binding.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "assignPosse",
                            "description": "optional function that, given each node, can return the id of the posse to which the node belongs. a Posse is a group of nodes that should all be dragged together.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "modelLeftAttribute",
                            "description": "Optional; specifies the name of the attribute by which to store the x position of a dragged node of `storePositionsInModel` is true.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        },
                        {
                            "name": "modelTopAttribute",
                            "description": "Optional; specifies the name of the attribute by which to store the y position of a dragged node of `storePositionsInModel` is true.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"top\""
                        }
                    ]
                }
            ]
        },
        "jsPlumbToolkit.DrawingTools": {
            "name": "jsPlumbToolkit.DrawingTools",
            "shortname": "jsPlumbToolkit.DrawingTools",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/drawing.js",
            "line": 12,
            "description": "A set of drawing tools to use in conjunction with a Surface in the jsPlumb Toolkit.",
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters.",
                    "props": [
                        {
                            "name": "renderer",
                            "description": "Surface renderer to associate the tools with.",
                            "type": "Surface"
                        },
                        {
                            "name": "widthAttribute",
                            "description": "Name of the attribute used to store the node's width in its data.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"w\""
                        },
                        {
                            "name": "heightAttribute",
                            "description": "Name of the attribute used to store the node's height in its data.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"h\""
                        },
                        {
                            "name": "leftAttribute",
                            "description": "Name of the attribute used to store the node's left position in its data.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        },
                        {
                            "name": "topAttribute",
                            "description": "Name of the attribute used to store the node's top position in its data.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"top\""
                        }
                    ]
                }
            ],
            "is_constructor": 1
        },
        "Node": {
            "name": "Node",
            "shortname": "Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/graph.js",
            "line": 59,
            "description": "This is a Node in the Graph. Each Node can have one or more Edges to any other Node; this Edge may be\ndirected.  A Node may also have zero or more Ports, which themselves may have one or more Edges to other Nodes\nor to Ports on other Nodes.\n\nEvery Node has an associated *indegree centrality* and *outdegree centrality*. These are measurements of the number\nof links to and from the Node. Whenever an Edge is added or removed the indegree and outdegree centrality\nvalues for the Node are recomputed. For further reading we suggest [Wikipedia](http://en.wikipedia.org/wiki/Centrality#Degree_centrality).\n\nYou can instantiate a Node with any type of backing data you wish.  If you supply a String,\nthat value is assumed to be the Node's ID. If you supply a JSON object, an ID is extracted from that object,\neither with the supplied `idFunction`, or, if that is null, by assuming that the ID exists in the JSON as the\n`id` member.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Optional data backing the node. This object can be of any type you like, but if you supply a String, that value will be assumed to be the Node's ID.",
                    "type": "Object|String",
                    "optional": true
                },
                {
                    "name": "idFunction",
                    "description": "Optional function that can take a Node's data and return its ID. By default this looks for an `id` member in the backing data.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "graph",
                    "description": "Graph the Vertex belongs to.",
                    "type": "Graph"
                }
            ]
        },
        "Port": {
            "name": "Port",
            "shortname": "Port",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/graph.js",
            "line": 409,
            "description": "A Port resides on a Node, and may be the source/target of one or more connections. A convenient way to think\nof Ports is as the columns in a database table: they belong to a table, but it is the columns themselves that\nhave relationships with other columns.",
            "extends": "Node"
        },
        "Edge": {
            "name": "Edge",
            "shortname": "Edge",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/graph.js",
            "line": 456,
            "description": "This is an Edge in the graph.  There can be one or zero of these for every pair of Nodes/Ports in the Graph.  Each Edge has an associated \"cost\", and may be either bidirectional\nor unidirectional.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Edge parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data",
                            "description": "Optional backing data for the edge.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "source",
                            "description": "Edge's source.",
                            "type": "Node|Port"
                        },
                        {
                            "name": "target",
                            "description": "Edge's target.",
                            "type": "Node|Port"
                        },
                        {
                            "name": "cost",
                            "description": "Edge's cost. Defaults to 1.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "directed",
                            "description": "Whether or not the Edge is directed. Default is true.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Graph": {
            "name": "Graph",
            "shortname": "Graph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/graph.js",
            "line": 553,
            "description": "A Graph.  Contains a list of Vertex objects, each of which has 0..N Ports, and a list of Edge objects. Every instance\nof the jsPlumb Toolkit is backed by an instance of this lass.\n\nA good discussion on Graphs can be found on Wikipedia: http://en.wikipedia.org/wiki/Graph_(mathematics).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters. Optional. The Graph class has sensible defaults.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "defaultDirected",
                            "description": "Whether edges are directed by default.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "idFunction",
                            "description": "Function to use to extract an appropriate ID from the JSON for a give node. Defaults to returning the 'id' property of the JSON.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "enableSubgraphs",
                            "description": "If true, Nodes are Graphs themselves, and can have child Nodes. If you enable this then you cannot use slashes (/) in your Node ids, as they will be treated as components of a path to a Node in a nested Graph.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "defaultCost",
                            "description": "Default cost for Edges.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "portSeparator",
                            "description": "The character(s) used to separate ports from nodes in port ids.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\".\""
                        }
                    ]
                }
            ]
        },
        "jsPlumbToolkit directive.": {
            "name": "jsPlumbToolkit directive.",
            "shortname": "jsPlumbToolkit directive.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 370,
            "description": "Provides an angular directive to create an instance of the Toolkit. Params discussed here are\nprovided as attributes to the element, for instance:\n\n<jsplumb-toolkit jtk-id=\"myToolkit\" params=\"SomeController.myToolkitParams\" .../>\n\nNote that of course since they are attributes then their real types are String, but the types discussed\nhere are the required types of objects resolved through Angular's DI.",
            "params": [
                {
                    "name": "jtk-id",
                    "description": "ID of the Toolkit to create. You will want to use this if you need to subsequently\naccess the Toolkit instance from the `jsPlumbService`.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "surface-id",
                    "description": "Optional ID of the Surface widget.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "params",
                    "description": "Optional parameters for the Toolkit constructor.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "renderParams",
                    "description": "Optional parameters for the Surface widget. It is highly likely you will\nwant to supply something here.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Optional data to load at create time.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "init",
                    "description": "Optional function to call back at the end of the Toolkit's `link` function.\nThis function is passed the current scope (which contains the Toolkit and Surface objects), as well as the\nelement into which the Toolkit was rendered, and the attributes that were set on the `jsplumb-toolkit` element.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "jsPlumb Palette directive": {
            "name": "jsPlumb Palette directive",
            "shortname": "jsPlumb Palette directive",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 395,
            "description": "Provides an Angular directive for configuring a set of droppable nodes for a Surface.",
            "params": [
                {
                    "name": "typeExtractor",
                    "description": "Function used to extract the type of a dropped node from the element that was dropped.",
                    "type": "Function"
                },
                {
                    "name": "dataGenerator",
                    "description": "Optional function that can prepare some initial data for a dropped node.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "dragOptions",
                    "description": "Options for the drag. If these are omitted then some sensible (at least, what\njsPlumb considers sensible) defaults are used.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "jsPlumbToolkitInstance": {
            "name": "jsPlumbToolkitInstance",
            "shortname": "jsPlumbToolkitInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/jsPlumbToolkit.js",
            "line": 34,
            "description": "An instance of the jsPlumb Toolkit.  Each instance is backed by a `Graph`, and has zero or more `Renderer`s attached.\n\n#### Creating an instance\nYou create an instance of the jsPlumb Toolkit via the static method `jsPlumbToolkit.newInstance(params)`. The contents of `params` are\nany valid constructor parameters as detailed here.\n#### Rendering data\nAn instance of the jsPlumb Toolkit does not itself handle rendering the data to your UI; to do that, you must call the `render`\nmethod of your Toolkit instance:\n```\nvar myToolkit = jsPlumbToolkit.newInstance();\nvar aRenderer = myToolkit.render({\n  container:\"someElementId\",\n  ...other params, possibly..\n});\n```\n#### Operating on the dataset\nIn general, you will operate on the dataset via the `jsPlumbToolkitInstance` object, because any attached `Renderers` will\nfor the most part sort themselves out based on the data model. Occasionally you will want to perform some view-specific\noperation such as highlighting a Path, or hiding some Nodes, etc.  These sorts of operations are executed on the\n`Renderer` and not on the Toolkit object.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "idFunction",
                            "description": "Optional function to use to extract an id from a Node's data. The default\nis to retrieve the `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "typeFunction",
                            "description": "Optional function to use to extract a type identifier from a Node's data.\nThe default is to retrieve the `type` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeIdFunction",
                            "description": "Optional function to use to extract an id from an Edge's data. The\ndefault is to retrieve the `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "portIdFunction",
                            "description": "Optional function to use to extract an id from a Port's data. The\ndefault is to retrieve the `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "portTypeFunction",
                            "description": "Optional function to use to extract a type identifier from a Port's\ndata. The default is to retrieve the `type` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "model",
                            "description": "Model of Node, Edge and Port definitions.  See documentation.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "beforeConnect",
                            "description": "Optional function that will be called prior to any edge being\nestablished (either programmatically or via the mouse). It is passed the (source, target) of the proposed edge\nand if it returns anything other than boolean true, the edge is aborted.\nIf not supplied, the default behaviour of this function is to honor the `allowLoopback`, `allowNodeLoopback`\nand `maxConnections` parameters on any Node or Port definitions you supplied to this Toolkit via the `model`.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeMoveConnection",
                            "description": "Optional function that will be called prior to any existing edge\nbeing moved (either programmatically or via the mouse). It is passed the source and target of the existing edge,\nas well as the edge itself, and if it returns anything other than boolean true, the edge move is aborted.\nIf not supplied, the default behaviour of this function is to honor the `allowLoopback`, `allowNodeLoopback` and\n`maxConnections` parameters on any Node or Port definitions you supplied to this Toolkit via the `model`.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeStartConnect",
                            "description": "Optional function that will be called prior to an edge being\nestablished. This is different from `beforeConnect` in that this function is called right at the beginning of a\nconnection drag by attached renderers, and the function is given the node/port that is the source, plus the edge\ntype. If you return false the Edge is aborted. Otherwise your return value is used as the Edge data.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeDetach",
                            "description": "Optional function that can be used to override connection detachment from\nthe mouse. The function is given (source, target, edge) and is expected to return true to confirm the detach\nshould occur. Any other return value will abort the detach.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeStartDetach",
                            "description": "Optional function that can be used to override connection detachment\nfrom the mouse. Distinct from `beforeDetach` in that this function is called as soon as the user begins to drag.\nThe function is given (source, target, edge) and is expected to return true to confirm the detach should occur.\nAny other return value will abort the detach.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "nodeFactory",
                            "description": "Function to use to generate data for a new Node. Default is to create an\nobject with an `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeFactory",
                            "description": "Function to use to generate data for a new Edge. Default is to create an\nobject with an `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "portFactory",
                            "description": "Function to use to generate data for a new Port. Default is to create an\nobject with an `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "portExtractor",
                            "description": "Optional function to call whenever a Node is added; it extracts, from\nthe Node's data, any Ports that are associated with the Node.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "autoSave",
                            "description": "Whether or not to automatically save the dataset when changes occur. You\nmust supply the `saveUrl` property if you set this to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "saveUrl",
                            "description": "Url to use when saving automatically.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onAutoSaveSuccess",
                            "description": "Optional function to call on autoSave success.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onAutoSaveError",
                            "description": "Optional function to call on autoSave error.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotUpdateOriginalData",
                            "description": "If true, won't try to update the original data when a\nNode/Edge is removed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "maxSelectedEdges",
                            "description": "Optional limit for the number of edges allowed to be selected at any\none time.",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "maxSelectedNodes",
                            "description": "Optional limit for the number of nodes allowed to be selected at any\none time.",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "selectionCapacityPolicy",
                            "description": "Optional selection capacity policy. See\n`setSelectionCapacityPolicy` docs.",
                            "type": "Integer",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "jsPlumbToolkit.Widgets.Lasso": {
            "name": "jsPlumbToolkit.Widgets.Lasso",
            "shortname": "jsPlumbToolkit.Widgets.Lasso",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/lasso.js",
            "line": 22,
            "description": "The Lasso widget allows users to select an area with the mouse. You will not typically need to interact with\nthis widget, or create one manually, since the `Surface` widget handles all of that for you.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Parameters for the widget.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pageLocation",
                            "description": "Function that can return a page location for an event.",
                            "type": "Function"
                        },
                        {
                            "name": "canvas",
                            "description": "DOM Element on which the Lasso will operate.",
                            "type": "Element"
                        },
                        {
                            "name": "onStart",
                            "description": "Optional function to call at the start of a lasso operation.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onEnd",
                            "description": "Optional function to call at the end of a lasso operation.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onSelect",
                            "description": "Optional function to call on each mousemove during a lasso operation.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "Optional CSS selector identifying elements that should be filtered and not begin a lasso operation.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Layouts.AbstractLayout": {
            "name": "Layouts.AbstractLayout",
            "shortname": "Layouts.AbstractLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/layout.js",
            "line": 76,
            "description": "The parent for all layouts. This class maintains an array of element positions and\nsizes, and provides the key methods for executing layout functionality.  When using the Toolkit\nyou will not ordinarily need to interact directly with a layout, but if you write your own layout\nthen you need to extend this class and implement the abstract methods you need.\n\n##### Custom Layouts\n\nThe general syntax for writing a custom layout is to call `AbstractLayout`'s constructor and assign the\nreturn value to a variable:\n\n```\njsPlumbToolkit.Layouts[\"MyLayout\"] = function(params) {\n  var _super = jsPlumbToolkit.Layouts.AbstractLayout.apply(this, arguments);\n  ...\n };\n```\n\n##### Lifecycle\n\nThe lifecycle of a layout - controlled by this class - is as follows:\n\n- `begin(_jsPlumbToolkit, parameters)` This is an optional method.\n- `step(_jsPlumbToolkit, parameters)` This is called repeatedly until your code has indicated that the layout is complete (see below)\n- `end(_jsPlumbToolkit, parameters)` Also an optional method.\n\n##### Layout Completion\n\nYou are required to inform the superclass when your layout is complete, via this method:\n\n```\n_super.setDone(true);\n```\n\n#### Other Optional Methods\nYour layout can implement several optional methods should you need finer grained control of the lifecycle:\n\n- `_nodeAdded` - Notification that a new Node was added to the dataset.\n- `_nodeRemoved` - Notification that a new Node was added to the dataset.\n- `_nodeMoved` - Notification that a Node was moved.",
            "abstract": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "draggable",
                            "description": "Whether or not elements should be draggable.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "dragOptions",
                            "description": "Drag options to set on individual elements.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Layouts.EmptyLayout": {
            "name": "Layouts.EmptyLayout",
            "shortname": "Layouts.EmptyLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/layout.js",
            "line": 536,
            "description": "A layout that does very little beyond implementing the functions present in the layout API",
            "extends": "Layouts.AbstractLayout"
        },
        "Layouts.Mistletoe": {
            "name": "Layouts.Mistletoe",
            "shortname": "Layouts.Mistletoe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/layout.js",
            "line": 577,
            "description": "Mistletoe layout grows on another layout and does nothing except override lifecycle events and then\nupdate itself once all the hard work has been done. It is used by the Miniview component.",
            "extends": "Layouts.AbstractLayout",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params.layout",
                    "description": "The layout on which to leech.",
                    "type": "Layouts.AbstractLayout"
                }
            ]
        },
        "Layouts.AbsoluteBackedLayout": {
            "name": "Layouts.AbsoluteBackedLayout",
            "shortname": "Layouts.AbsoluteBackedLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/layout.js",
            "line": 639,
            "description": "Mixin for layouts that have an absolute backing.  This includes, of course, the `Absolute` layout,\nwhich is actually just a direct reference to this class.\nThe default behaviour is to look for a `left` and `top` member in each node, but you\ncan supply a `locationFunction` parameter to the constructor to derive your own\nposition from each node.",
            "extends": "Layouts.AbstractLayout",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "locationFunction",
                            "description": "Takes a Node and returns an [x,y] array indicating\nthe location of the given Node. The backing data for a Node is available as the `data` property.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Layouts.Absolute": {
            "name": "Layouts.Absolute",
            "shortname": "Layouts.Absolute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/layout.js",
            "line": 703,
            "description": "This layout places elements with absolute positioning. The default is to look for a `left` and `top`\nmember in each node, but you can supply your own `locationFunction` parameter to the constructor to\nderive your own position from each node.",
            "extends": "Layouts.AbsoluteBackedLayout",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "locationFunction",
                            "description": "Takes node data and returns an [x,y] array indicating the location of the given Node.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Layouts.AbstractHierarchicalLayout": {
            "name": "Layouts.AbstractHierarchicalLayout",
            "shortname": "Layouts.AbstractHierarchicalLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/layout.js",
            "line": 718,
            "description": "Mixin for hierarchical layouts (those that expect a root node). This class takes care of\nputting `rootNode` and `root` values in the parameters that are subsequently passed into the\nvarious lifecycle methods of the layout. The root node is the first node found in the Graph (ie the first node\nyou added to the Graph)",
            "extends": "Layouts.AbstractLayout",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "ignoreLoops",
                            "description": "Whether or not to ignore loops in the layout. When false,\nan exception will be thrown if a loop is found.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "getRootNode",
                            "description": "Optional function that can return the node that should be the root\nof the hierarchy. If this is not provided then the first Node in the Toolkit is used.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "getChildNodes",
                            "description": "Optional function to be used to get child nodes for each node. The\ndefault is simply to look for Nodes that are targets of an Edge from the focus Node.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Layouts.Hierarchical": {
            "name": "Layouts.Hierarchical",
            "shortname": "Layouts.Hierarchical",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/layouts-hierarchical.js",
            "line": 1,
            "description": "Provides a hierarchical tree layout, oriented either horizontally or vertically.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "orientation",
                            "description": "Orientation of the layout. Valid values are `\"vertical\"` and `\"horizontal\"`.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"horizontal\""
                        },
                        {
                            "name": "padding",
                            "description": "Array of padding values for x and y axes. Default is `[60, 60]`.",
                            "type": "Number[]",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "[compress",
                    "description": "= false] If true, the layout will use a regular spacing between each node and its parent. Otherwise\nthe layout pushes each node down by the maximum size of some element in that level of the hierarchy. For complex\nhierarchies in which any given node may have children, that is better. But for simple hierarchies, setting\n`compress` can give good results.",
                    "type": "Boolean"
                }
            ]
        },
        "jsPlumbToolkit.Layouts.Spring": {
            "name": "jsPlumbToolkit.Layouts.Spring",
            "shortname": "jsPlumbToolkit.Layouts.Spring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/layouts-spring.js",
            "line": 1,
            "description": "Provides a force directed graph layout in which connections between nodes are modelled as springs. By default, this Layout\nswitches on the magnetizer, to ensure that no nodes overlap.  You can switch it off via the `magnetize:false` argument\nin the `layout` parameters of a `render` call.",
            "extends": "jsPlumbToolkit.Layouts.AbstractLayout",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "absoluteBacked",
                            "description": "Whether or not the layout will fall back to absolute positions stored in the data.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "stiffness",
                            "description": "A measure of how stiff the springs are modelled to be.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "200"
                        },
                        {
                            "name": "repulsion",
                            "description": "A measure of how much each Node repels every other Node.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "200"
                        },
                        {
                            "name": "damping",
                            "description": "A measure of how quickly the system settles. This parameter should always be set to a value less than 1. A higher value for this parameter will cause the layout to take longer to run.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "limit",
                            "description": "The threshold below which the system is assumed to be stable enough for the layout to exit. This value is related to the values you provide for stiffness and repulsion (and damping, of course, but to a lesser extent).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1000"
                        }
                    ]
                }
            ]
        },
        "jsPlumbToolkit.Renderers.Miniview": {
            "name": "jsPlumbToolkit.Renderers.Miniview",
            "shortname": "jsPlumbToolkit.Renderers.Miniview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/miniview.js",
            "line": 1,
            "description": "The Miniview widget. A single instance of this is paired with an instance of Surface.\n\nThe fundamental difference between this and a Surface is that a Miniview does not draw connections. Plus, it\ncalculates its own zoom based on the ratio of the size of its viewport compared to the size of the viewport of\nthe related Surface. In reality, a Miniview could reside inside an element that is much bigger than that in which\nthe related Surface resides, but it does not seem likely that that would normally be the case.\n\nThe Miniview widget provides a floating window that represents a scaled version of the viewport of the related\nSurface. Dragging this window around causes the related Surface to pan.  Resizing (via grabbing a corner and\ndragging) the window causes the Surface to zoom in/out (within its allowed zoom range).\n\nAll of the visual aspects of the Miniview can be controlled via CSS, and you can provide a custom CSS class\nto allow you to target the styles for an individual Miniview more easily.\n\nYou do not create a Miniview directly - you either specify its parameters in a `render` call on a `jsPlumbToolkitInstance`,\nor you call `createMiniview` on an existing `Surface`.",
            "constructorg": ""
        },
        "jsPlumbToolkit.Model": {
            "name": "jsPlumbToolkit.Model",
            "shortname": "jsPlumbToolkit.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/model.js",
            "line": 10,
            "description": "A Model describes the appearance and behaviour of a set of Nodes, Edges and Ports. You do not\ncreate one of these directly; instead you pass a definition to a `jsPlumbToolkit.render` or\n`jsPlumbToolkit.newInstance()` call. Although the Model has the same syntax in each context, you are\nencouraged to configure model-specific things in the Model you pass to the `newInstance` method (such as,\nwhich Nodes/Ports can be connected to which others, what is the maximum number of connections, etc), and\nview-specific things (such as css classes, paint styles, connector appearance etc) to the model you pass to\nthe `render` method. The `render` method automatically merges in a Node/Port/Edge definition from a Model\ndefined on the associated Toolkit, if there is one.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Model parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "nodes",
                            "description": "Node definitions.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "edges",
                            "description": "Edge definitions.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "ports",
                            "description": "Port definitions.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "_jsPlumb",
                    "description": "An instance of jsPlumb on which to register associated Connection and Endpoint types.\nOnly the Surface widget provides this. The Toolkit instance creates a Model but it is headless.",
                    "type": "JsPlumbInstance",
                    "optional": true
                }
            ]
        },
        "ZoomWidget": {
            "name": "ZoomWidget",
            "shortname": "ZoomWidget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/pan-zoom-widget.js",
            "line": 6,
            "description": "Provides Pan/Zoom functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "canvas",
                            "description": "The element to apply pan/zoom to.",
                            "type": "Selector|Element"
                        },
                        {
                            "name": "viewport",
                            "description": "The element that will act as the viewport for the canvas.",
                            "type": "Selector|Element"
                        },
                        {
                            "name": "bind",
                            "description": "Function that can bind to an event on an element.",
                            "type": "Function"
                        },
                        {
                            "name": "unbind",
                            "description": "Function that can unbind from an event on an element.",
                            "type": "Function"
                        },
                        {
                            "name": "height",
                            "description": "A function that can return the height for some element.",
                            "type": "Function"
                        },
                        {
                            "name": "width",
                            "description": "A function that can return the width for some element.",
                            "type": "Function"
                        },
                        {
                            "name": "offset",
                            "description": "A function that can return {left:.., top:..} for some element",
                            "type": "Function"
                        },
                        {
                            "name": "id",
                            "description": "A function that can return an id for some element.",
                            "type": "Function"
                        },
                        {
                            "name": "domElement",
                            "description": "A function that can translate between objects referenced by the widget and DOM elements. It might be\nthe case that no tranlation is required - you deal only in DOM elements. But also you might use this with jQuery,\nand pass around jQuery selectors. So this function just normalises elements. If not supplied, the default function\nassumes elements are already DOM elements.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "events",
                            "description": "Optional map of event handlers",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "zoom",
                                    "description": "Optional function callback for when zoom changes.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "pan",
                                    "description": "Optional function callback for when pan changes.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "mousedown",
                                    "description": "Optional function callback for mousedown event.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "mouseup",
                                    "description": "Optional function callback for mouseup event.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "mousemove",
                                    "description": "Optional function callback for mousemove event.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "maybeZoom",
                                    "description": "Optional interceptor for zoom. Returning false prevents zoom from occurring.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "transformOrigin",
                                    "description": "Optional function callback for transform origin change. This is given the [x,y] (in percent) of the new origin, and the [left, top] (in absolute values) of the canvas.",
                                    "type": "Function",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "clamp",
                            "description": "Whether to clamp when panning such that there is always content visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "clampZoom",
                            "description": "Whether to clamp when zooming such that there is always content visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "clampToBackground",
                            "description": "Whether or not to clamp to the background image. This flag means the widget will always ensure at least some of the background is visible. See `clampToBackgroundExtents` for a variant of this.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "clampToBackgroundExtents",
                            "description": "Clamps movement so that when zoomed out, the background image always fills the viewport.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onBackgroundReady",
                            "description": "Optional callback to hit when the background image has loaded.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "panDistance",
                            "description": "How far, in pixels, to pan on pan nudge.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "50"
                        },
                        {
                            "name": "zoom",
                            "description": "Initial zoom for the widget.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "enableWheelZoom",
                            "description": "Whether or not wheel zoom is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "wheelFilter",
                            "description": "Optional function to call to check if wheel zooming should be enabled for the current event target.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "enablePan",
                            "description": "Whether or not pan is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enablePanButtons",
                            "description": "Whether or not wheel pan buttons are drawn and enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableAnimation",
                            "description": "Enable animations for panning. Defaults to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enabled",
                            "description": "Whether or not the widget is enabled, ie. responding to mouse input.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "background",
                            "description": "Optional background image parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "url",
                                    "description": "URL for the background. Required for both single images and tiled backgrounds.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "type",
                                    "description": "\"simple\" or \"tiled\" - the type of background.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"simple\""
                                },
                                {
                                    "name": "tileSize",
                                    "description": "For tiled backgrounds, provides the width and height of tiles. Every tile is assumed to have these dimensions, even if the tile has whitespace in it.",
                                    "type": "Number[]",
                                    "optional": true
                                },
                                {
                                    "name": "width",
                                    "description": "Required for tiled backgrounds. Indicates the width of the full image.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Required for tiled backgrounds. Indicates the height of the full image.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "maxZoom",
                                    "description": "Required for tiled backgrounds. Indicates the maximum zoom level. Zoom starts at 0 - fully zoomed out - and increases in integer values from there. Eash successive zoom level is twice the zoom of the previous level, meaning two times as many tiles in each direction.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "filter",
                            "description": "Optional filter that will be called on down event, with the event target and the event. Returning true from this function means the widget should respond to the event.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "padding",
                            "description": "Optional values for padding in the x/y axes to leave around the content. This is only of any use if you have disabled panning via mouse drag,\nsince in that case the user sees only scroll bars and has no way of navigating beyond the content. Some padding makes the UI nicer to use. Default is [0,0].",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "consumeRightClick",
                            "description": "Useful for development: set this to false if you don't want the widget to consume context menu clicks.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "smartMinimumZoom",
                            "description": "Means that the lower zoom bound refers to a multiple of the content bounds, not the viewport.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "[params.zoomRange=[0.05,",
                    "description": "3] ] Zoom range for the widget.",
                    "type": "Number[]"
                }
            ]
        },
        "Path": {
            "name": "Path",
            "shortname": "Path",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/path.js",
            "line": 13,
            "description": "Models the path between two Nodes/Ports, which consists of a series of [Node/Port, Edge] pairs."
        },
        "Selection": {
            "name": "Selection",
            "shortname": "Selection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/selection.js",
            "line": 13
        },
        "jsPlumbToolkit.Support": {
            "name": "jsPlumbToolkit.Support",
            "shortname": "jsPlumbToolkit.Support",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/support.js",
            "line": 8,
            "description": "Support functionality for working with existing jsPlumb instances in the Toolkit. Using the `ingest` method in this\nclass, you can ingest an existing jsPlumb instance into a new instance of the Toolkit; this for many people may\nprove to be a logical upgrade path from their existing jsPlumb code.\n\nWhen you ingest an existing jsPlumb instance, its `Container` is configured to be a `Surface` widget, which makes\nit pannable and zoomable, and the set of Nodes and Edges it is managing are loaded into the Toolkit's data model."
        },
        "Surface": {
            "name": "Surface",
            "shortname": "Surface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/surface.js",
            "line": 15,
            "description": "A widget that provides pan/zoom functionality, as well as the ability to load/store state in the browser.\nYou do not construct an instance of this class manually: you obtain an instance of Surface via a call to the `render`\nmethod on a `jsPlumbToolkitInstance`. But the supported parameters to that `render` method are whatever is supported by\nthe Surface constructor, as documented here.",
            "extends": "AbstractRenderer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "container",
                            "description": "Element to convert into a Surface.",
                            "type": "Element|Selector"
                        },
                        {
                            "name": "elementsDraggable",
                            "description": "Whether or not elements in the Surface should be draggable.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "dragOptions",
                            "description": "Options for draggable nodes.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "events",
                            "description": "Optional event bindings. See documentation.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "miniview",
                            "description": "Optional miniview configuration.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "container",
                                    "description": "Container for the miniview.  An Element, an element id, or a selector.",
                                    "type": "Element|String|Selector",
                                    "optional": true
                                },
                                {
                                    "name": "initiallyVisible",
                                    "description": "Whether or not the miniview should be invisible until some data is loaded.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "mode",
                            "description": "Mode to initialize the Surface in.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"Pan\""
                        },
                        {
                            "name": "panDistance",
                            "description": "How far a pan nudge should move the UI (in pixels).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "50"
                        },
                        {
                            "name": "zoom",
                            "description": "Initial zoom for the widget.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "enablePan",
                            "description": "Whether or not panning (via mouse drag) is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableWheelZoom",
                            "description": "Whether or not zooming with the mouse wheel is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableAnimation",
                            "description": "Enable animations for panning. Defaults to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "wheelFilter",
                            "description": "Optional CSS selector representing elements that should not respond to wheel zoom.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "panFilter",
                            "description": "Optional; either a CSS selector representing elements that should allow a pan event to begin, or a function that will be\n                         called with the event target. Returning true from this function means the widget should respond to the event.",
                            "type": "String|Function",
                            "optional": true
                        },
                        {
                            "name": "wheelSensitivity",
                            "description": "How many pixels each click of the mouse wheel represents when zooming. Note that this value, while expressed in pixels, is mapped in a variety of ways depending on the browser.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "10"
                        },
                        {
                            "name": "enablePanButtons",
                            "description": "Whether or not to show the pan nudge buttons on the borders of the widgets.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "padding",
                            "description": "Optional values for padding in the x/y axes to leave around the content. This is only of any use if you have disabled panning via mouse drag,\nsince in that case the user sees only scroll bars and has no way of navigating beyond the content. Some padding makes the UI nicer to use. Default is [0,0].",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "lassoFilter",
                            "description": "Optional selector for elements on which a mousedown should not cause the lasso to activate.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "lassoSelectionFilter",
                            "description": "Optional function that can be used to filter the set of nodes a lasso drag is selecting. The function is given each candidate Node in turn; returning false indicates the Node should not be selected.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "consumeRightClick",
                            "description": "Useful for development: set this to false if you don't want the widget to consume context menu clicks.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "stateHandle",
                            "description": "If supplied, this will be used as the default handle for state save/restore operations.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "clamp",
                            "description": "Whether to clamp when panning such that there is always content visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "clampZoom",
                            "description": "Whether to clamp when zooming such that there is always content visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "clampToBackground",
                            "description": "If a background is set, whether to clamp movement such that some part of the background is always visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "clampToBackgroundExtents",
                            "description": "If a background is set, whether to clamp movement such that the background fills as much of the viewport as it can.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "background",
                            "description": "Optional background image parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "url",
                                    "description": "URL for the background. Required for both single images and tiled backgrounds.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "type",
                                    "description": "\"simple\" or \"tiled\" - the type of background.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"simple\""
                                },
                                {
                                    "name": "tileSize",
                                    "description": "For tiled backgrounds, provides the width and height of tiles. Every tile is assumed to have these dimensions, even if the tile has whitespace in it.",
                                    "type": "Number[]",
                                    "optional": true
                                },
                                {
                                    "name": "width",
                                    "description": "Required for tiled backgrounds. Indicates the width of the full image.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Required for tiled backgrounds. Indicates the height of the full image.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "maxZoom",
                                    "description": "Required for tiled backgrounds. Indicates the maximum zoom level. Zoom starts at 0 - fully zoomed out - and increases in integer values from there. Eash successive zoom level is twice the zoom of the previous level, meaning two times as many tiles in each direction.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "jsPlumb",
                            "description": "Optional set of jsPlumb Defaults to use for this renderer. The format and allowed properties is that of\nthe Defaults object in jsPlumb. You can also set display properties in the view.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "autoExitSelectMode",
                            "description": "When true (which is the default), the Surface will automatically jump back into Pan mode after some nodes have been selected.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "zoomToFit",
                            "description": "If true, content will be zoomed to fit the viewport when a dataLoadEnd event is received.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "zoomToFitIfNecessary",
                            "description": "If true, content will be zoomed to fit the viewport, if necessary (meaning if it fits inside the viewport already it wont be zoomed, which is different from how `zoomToFit` works) when a dataLoadEnd event is received. If this and `zoomToFit` are both set, this takes precedence.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "storePositionsInModel",
                            "description": "By default, the left/top positions of nodes that have been dragged will be written into the data for each node after drag stops. You can set this to false to disable that behaviour.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "modelLeftAttribute",
                            "description": "Optional; specifies the name of the attribute by which to store the x position of a dragged node of `storePositionsInModel` is true.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        },
                        {
                            "name": "modelTopAttribute",
                            "description": "Optional; specifies the name of the attribute by which to store the y position of a dragged node of `storePositionsInModel` is true.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"top\""
                        },
                        {
                            "name": "assignPosse",
                            "description": "optional function that, given each node, can return the id of the posse to which the node belongs. a Posse is a group of nodes that should all be dragged together.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "[params.zoomRange=[0.05,",
                    "description": "3] ] Zoom range for the widget.",
                    "type": "Number[]"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/anim.js",
            "line": 34,
            "description": "Traces the given overlay along the Connection.",
            "params": [
                {
                    "name": "overlaySpec",
                    "description": "This is in the format accepted by the Community edition of jsPlumb.",
                    "type": "String|Object"
                },
                {
                    "name": "options",
                    "description": "for animation.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "forwards",
                            "description": "Whether to traverse from source-> target, or target->source.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "dwell",
                            "description": "How long, in milliseconds, to dwell on each node as the overlay traverses the path.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "250"
                        },
                        {
                            "name": "speed",
                            "description": "How many pixels per second to travel. *Note*: this is in seconds, not milliseconds.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "rate",
                            "description": "Frame rate, in milliseconds.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "30"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/browser-util.js",
            "line": 1,
            "description": "Utility functions that run only in browsers, and are not included in a headless environment build.",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/browser-util.js",
            "line": 27,
            "description": "Execute an ajax call.",
            "itemtype": "method",
            "name": "jsPlumbToolkitUtil.ajax",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "HTTP operation.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"get\""
                        },
                        {
                            "name": "dataType",
                            "description": "Expected datatype of response.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "url",
                            "description": "URL to connect to.",
                            "type": "String"
                        },
                        {
                            "name": "success",
                            "description": "Function to call on success, with received data. Success is deemed to be any status code in the 2XX range.",
                            "type": "Function"
                        },
                        {
                            "name": "error",
                            "description": "Optional function to call on error. Will be given the response text and the status code as arguments.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "description": "Optional data payload.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "Optional map of HTTP header values.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/browser-util.js",
            "line": 67,
            "description": "Generates a debounce helper for the given function, with the given timeout. The given function will be called only\nwhen a period of length `timeout` has elapsed since the last call to the debounce function. Use this for stuff like\nrelayout of your UI when the window is resized, or firing an ajax call after a series of checkboxes have been\nselected or deselected.",
            "itemtype": "method",
            "name": "jsPlumbToolkitUtil.debounce",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to fire",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "Timeout, in milliseconds. Default is 150.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "150"
                }
            ],
            "return": {
                "description": "a function with debouncing built in.",
                "type": "Function"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/browser-util.js",
            "line": 87,
            "description": "Sets a node's text value.",
            "itemtype": "method",
            "name": "jsPlumbToolkitUtil.xml.setNodeText",
            "params": [
                {
                    "name": "node",
                    "description": "Element to set text on.",
                    "type": "Element"
                },
                {
                    "name": "text",
                    "description": "Text to set.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/browser-util.js",
            "line": 101,
            "description": "Gets text from the given node.",
            "itemtype": "method",
            "name": "jsPlumbToolkitUtil.xml.getNodeText",
            "params": [
                {
                    "name": "node",
                    "description": "XML element.",
                    "type": "Element"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/browser-util.js",
            "line": 109,
            "description": "Gets the first instance of the child with the given tag name, null if none found.",
            "itemtype": "method",
            "name": "jsPlumbToolkitUtil.xml.getChild",
            "params": [
                {
                    "name": "parent",
                    "description": "Element to retrieve child from.",
                    "type": "Element"
                },
                {
                    "name": "name",
                    "description": "Child tag name to retrieve.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/browser-util.js",
            "line": 125,
            "description": "Gets children of the given node (only direct children), returning an array of nodes (an empty array if none found).",
            "itemtype": "method",
            "name": "jsPlumbToolkitUtil.xml.getChildren",
            "params": [
                {
                    "name": "parent",
                    "description": "Element to retrieve children from.",
                    "type": "Element"
                },
                {
                    "name": "name",
                    "description": "Child tag names to retrieve.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/browser-util.js",
            "line": 140,
            "description": "Serializes the given XML node to a string, throwing an Error if something goes bad.",
            "itemtype": "method",
            "name": "jsPlumbToolkitUtil.xml.xmlToString",
            "params": [
                {
                    "name": "xmlNode",
                    "description": "XML element to serialize.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Serialized XML element.",
                "type": "String"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/browser-util.js",
            "line": 162,
            "description": "Creates an XML element.",
            "itemtype": "method",
            "name": "jsPlumbToolkitUtil.xml.createElement",
            "params": [
                {
                    "name": "name",
                    "description": "Tag name of the element to create.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "Optional map of attribute names and values.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "text",
                    "description": "Optional text for the element.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "An XML element.",
                "type": "Element"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 169,
            "description": "Adapter for a normal DOM element",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 306,
            "description": "Sets/unsets hover suspended state. When hover is suspended, no connections or endpoints repaint themselves\non mouse hover.",
            "itemtype": "method",
            "name": "setHoverSuspended",
            "params": [
                {
                    "name": "suspended",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 314,
            "description": "Gets hover suspended state.",
            "itemtype": "method",
            "name": "isHoverSuspended",
            "return": {
                "description": "Hover suspended state.",
                "type": "Boolean"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 321,
            "description": "Sets the current jsPlumb defaults",
            "itemtype": "method",
            "name": "setJsPlumbDefaults",
            "params": [
                {
                    "name": "defaults",
                    "description": "Defaults to set.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 509,
            "description": "Sets whether or not rendering is suspended. This actually does not mean that new nodes are not\nadded, but it does mean that the panzoom widget is informed not to do any work involving element\npostions or sizes.",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 879,
            "description": "Sets the current view for this renderer.",
            "itemtype": "method",
            "name": "setView",
            "params": [
                {
                    "name": "p",
                    "description": "View to set.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 910,
            "description": "Activates the UI state with the given ID on the objects contained in the given target. If target is not supplied, the state is\nactivated against the entire dataset.",
            "itemtype": "method",
            "name": "activateState",
            "params": [
                {
                    "name": "stateId",
                    "description": "ID of the state to activate. States are defined inside a `states` member of your `view` definition.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "Set of objects to activate the state on. If null, the entire dataset (Nodes, Edges and Ports) is used. If you provide an Element here, a Selection is created that consists of the Node representing the element, plus all Edges to and from the given Node.",
                    "type": "Selection|Path|jsPlumbToolkitInstance|Element",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 926,
            "description": "Deactivates the UI state with the given ID on the objects contained in the given target. If target is not supplied, the state is\ndeactivated against the entire dataset.",
            "itemtype": "method",
            "name": "deactivateState",
            "params": [
                {
                    "name": "stateId",
                    "description": "ID of the state to deactivate. States are defined inside a `states` member of your `view` definition.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "Set of objects to deactivate the state on. If null, the entire dataset (Nodes, Edges and Ports) is used.",
                    "type": "Selection|Path|jsPlumbToolkitInstance",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 944,
            "description": "Resets (clears) the UI state of all objects in the current dataset.",
            "itemtype": "method",
            "name": "resetState",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1160,
            "description": "Gets the DOM node that was rendered for the given Node/Port.",
            "itemtype": "method",
            "name": "getRenderedElement",
            "params": [
                {
                    "name": "obj",
                    "description": "Node or Port for which to retrieve the rendered element.",
                    "type": "Node|Port"
                }
            ],
            "return": {
                "description": "DOM element for the given Node/Port, null if not found.",
                "type": "Element"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1170,
            "description": "Gets the DOM node that was rendered for the Node with the given id.",
            "itemtype": "method",
            "name": "getRenderedNode",
            "params": [
                {
                    "name": "nodeId",
                    "description": "Node id for which to retrieve the rendered element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "DOM element for the given Node id, null if not found.",
                "type": "Element"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1180,
            "description": "Gets the DOM node that was rendered for the Port with the given id.",
            "itemtype": "method",
            "name": "getRenderedPort",
            "params": [
                {
                    "name": "portId",
                    "description": "Port id for which to retrieve the rendered element. Note that you must supply the \"full\" id here, that is in dotted\nnotation with the id of the Node on which the port resides.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "DOM element for the given Port id, null if not found.",
                "type": "Element"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1191,
            "description": "Gets the underlying jsPlumb connection that was rendered for the Edge with the given id.",
            "itemtype": "method",
            "name": "getRenderedConnection",
            "params": [
                {
                    "name": "edgeId",
                    "description": "ID of the Edge to retrieve the Connection for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A jsPlumb Connection, null if not found.",
                "type": "Connection"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1226,
            "description": "Applies the given layout one time to the content.",
            "itemtype": "method",
            "name": "adHocLayout",
            "params": [
                {
                    "name": "layoutParams",
                    "description": "Parameters for the layout, including type and constructor parameters.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1239,
            "description": "Sets the current layout.",
            "itemtype": "method",
            "name": "setLayout",
            "params": [
                {
                    "name": "layoutParams",
                    "description": "Parameters for the layout, including type and constructor parameters.",
                    "type": "Object"
                },
                {
                    "name": "doNotRefresh",
                    "description": "Do not refresh the UI after setting the new layout.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1252,
            "description": "Gets the current layout.",
            "itemtype": "method",
            "name": "getLayout",
            "return": {
                "description": "The current layout.",
                "type": "Layout"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1261,
            "description": "Magnetize the display. You must indicate what sort of magnetization you wish to perform: if you provide an event,\nthe event's location will be the magnetization origin. If you provide `origin:{left;xxx, top:xxx}`, that value will be used. If\nyou provide neither, the computed center of all elements will be used. You can also provide an `options:{...}` value, whose\nvalues can contain `filter`, `constrain` and `padding` values for the specific run of the magnetizer.",
            "params": [
                {
                    "name": "params",
                    "description": "Magnetize parameters. If omitted, the origin of magnetization will be the computed center of all the elements.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "event",
                            "description": "If provided, the event location will be used as the origin of magnetization.",
                            "type": "Event",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "An object with `left` and `top` properties. If provided, will be used as the origin of magnetization.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "description": "Extra magnetizer options for this run of the magnetizer.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1275,
            "description": "Incrementally update the layout, without a reset. If rendering is suspended, this method does nothing.",
            "itemtype": "method",
            "name": "refresh",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1290,
            "description": "Sets whether or not the layout is refreshed automatically after a Node or Port is added or removed.",
            "itemtype": "method",
            "name": "setRefreshAutomatically",
            "params": [
                {
                    "name": "refreshAutomatically",
                    "description": "True to refresh automatically, false otherwise.",
                    "type": "Boolean"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1299,
            "description": "Reset the layout and run it again.  This is different to `refresh` in that `refresh` does not reset the layout first.",
            "itemtype": "method",
            "name": "relayout",
            "params": [
                {
                    "name": "newParameters",
                    "description": "Optional new parameters for the layout.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1318,
            "description": "Gets a Path from some source Node/Port to some target Node/Port. This method is a wrapper around the\nToolkit's `getPath` method, adding a `setVisible` function to the result.",
            "params": [
                {
                    "name": "params",
                    "description": "Path spec params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source node or port, or id of source node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "target",
                            "description": "Target node or port, or id of target node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "strict",
                            "description": "Sets whether or not paths are searched strictly by the given source/target. If, for instance, you supply a node as the source, but there are only edges connected to ports on that node, by default these edges will be ignored. Switching `strict` to false will mean these edges are considered.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "nodeFilter",
                            "description": "Optional function that is given each Node's backing data and asked to return true or false - true means include the Node, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeFilter",
                            "description": "Optional function that is given each Edge's backing data and asked to return true or false - true means include the Edge, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Path object. Even if no path exists you will get a return value - but it will just be empty.",
                "type": "Path"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1369,
            "description": "Gets the position of an element that is being managed by the Surface.",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "el",
                    "description": "Element id, element, selector or Node to get position for.",
                    "type": "String|Element|Selector|Node"
                }
            ],
            "return": {
                "description": "[left,top] position array if element found, otherwise null.",
                "type": "Number[]|Null"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1383,
            "description": "Gets the size of an element that is being managed by the Surface.",
            "itemtype": "method",
            "name": "getSize",
            "params": [
                {
                    "name": "el",
                    "description": "Element id, element, selector or Node to get position for.",
                    "type": "String|Element|Selector|Node"
                }
            ],
            "return": {
                "description": "[width, height] Array if element found, otherwise null.",
                "type": "Number[]|Null"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1393,
            "description": "Gets the origin and size of an element that is being managed by the Surface.",
            "itemtype": "method",
            "name": "getCoordinates",
            "params": [
                {
                    "name": "el",
                    "description": "Element id, element, selector or Node to get position for.",
                    "type": "String|Element|Selector|Node"
                }
            ],
            "return": {
                "description": "{x:.., y:..., w:..., h:...} if element found, otherwise null.",
                "type": "Object"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1650,
            "description": "Writes the current left/top for each node into the data model. A common use case is to run an auto layout the first time\nsome dataset is seen, and then to save the locations of all the nodes once a human being has moved things around.",
            "itemtype": "method",
            "name": "storePositionsInModel",
            "params": [
                {
                    "name": "params",
                    "description": "Parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "leftAttribute",
                            "description": "Name of the attribute to use for the left position. Default is 'left'",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "topAttribute",
                            "description": "Name of the attribute to use for the top position. Default is 'top'",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1671,
            "description": "Writes the current left/top for some node into the data model. A common use case is to run an auto layout the first time\nsome dataset is seen, and then to save the locations of all the Nodes once a human being has moved things around. Note that this method\ntakes either a String, representing the Node's ID, and uses the default values for left/top attribute names, or an Object, in which\nyou provide the id and the left/top attribute names.",
            "itemtype": "method",
            "name": "storePositionInModel",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the node for which to store the position. Either supply this, or an object containing id and values for the left/top attribute names.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters. An object containing id and values for the left/top attribute names. Supply this or just supply the node id as a string.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "node id",
                            "type": "Integer"
                        },
                        {
                            "name": "leftAttribute",
                            "description": "Name of the attribute to use for the left position. Default is 'left'.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "topAttribute",
                            "description": "Name of the attribute to use for the top position. Default is 'top'.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The current position as [left, top].",
                "type": "Integer[]"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1711,
            "description": "Sets the position of the given node.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node id, a DOM element representing a Node, or a Node.",
                    "type": "String|Node|Element"
                },
                {
                    "name": "x",
                    "description": "left position for the element.",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "top position for the element.",
                    "type": "Integer"
                },
                {
                    "name": "doNotUpdateElement",
                    "description": "If true, the DOM element will not be moved. This flag is used internally by various Toolkit methods; most external calls to this method will want the element to be moved.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1723,
            "description": "Sets the position of the given node, animating the element to that position.",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node id, a DOM element representing a Node, or a Node.",
                    "type": "String|Node|Element"
                },
                {
                    "name": "x",
                    "description": "left position for the element.",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "top position for the element.",
                    "type": "Integer"
                },
                {
                    "name": "animateOptions",
                    "description": "Options for the animation.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1738,
            "description": "Sets the visibility of some Node/Port or Edge.",
            "itemtype": "method",
            "name": "setVisible",
            "params": [
                {
                    "name": "obj",
                    "description": "An Edge, Port, Node or - in the case of String - a  Node/Port id.",
                    "type": "Selection|Path|Edge|Node|Port|String|Node[]|Port[]|Edge[]|String[]"
                },
                {
                    "name": "state",
                    "description": "Whether the object should be visible or not.",
                    "type": "Boolean"
                },
                {
                    "name": "doNotCascade",
                    "description": "If true, the method does not cascade visibility changes down from a Node to its connected Edges, or from an Edge to its Ports. The default is for this to happen.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1818,
            "description": "Add the given Node to the posse with the given name",
            "params": [
                {
                    "name": "obj",
                    "description": "A DOM element representing a Node, or a Node id, or a Node.",
                    "type": "Element|String|Node"
                },
                {
                    "name": "spec",
                    "description": "Variable args parameters. Each argument can be a either a String, indicating\nthe ID of a Posse to which the element should be added as an active participant, or an Object containing\n`{ id:\"posseId\", active:false/true}`. In the latter case, if `active` is not provided it is assumed to be\ntrue.",
                    "type": "String...|Object..."
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1833,
            "description": "Remove the given Node from the given Posse.",
            "params": [
                {
                    "name": "obj",
                    "description": "A DOM element representing a Node, or a Node id, or a Node.",
                    "type": "Element|String|Node"
                },
                {
                    "name": "posseId",
                    "description": "ID of the posse from which to remove the Node from.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/components.js",
            "line": 1845,
            "description": "Remove the given Node from all Posses to which it belongs.",
            "params": [
                {
                    "name": "obj",
                    "description": "A DOM element representing a Node, or a Node id, or a Node.",
                    "type": "Element|String|Node"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "src/dialogs.js",
            "line": 1,
            "description": "jsPlumbToolkit.Dialogs\n\nA library for providing simple dialogs to use with an instance of the jsPlumb Toolkit.  This is not packaged in the\ncore Toolkit file and does not form part of any jsPlumb support agreement.",
            "class": "jsPlumbToolkit.DrawingTools"
        },
        {
            "file": "src/dialogs.js",
            "line": 387,
            "description": "Initialize all the dialogs found on the page.",
            "itemtype": "method",
            "name": "jsPlumbToolkit.Dialogs.initialize",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "selector",
                            "description": "Selector identifying dialog elements. If not provded, the value '.jtk-dialog' is used by default.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'.jtk-dialog'"
                        },
                        {
                            "name": "globals",
                            "description": "Optional object of global callbacks, keyed by event id.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "labels",
                            "description": "Optional object of button labels. See documentation.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkit.DrawingTools"
        },
        {
            "file": "src/dialogs.js",
            "line": 421,
            "description": "Show the dialog with the given id, optionally rendering it with some provided data.",
            "itemtype": "method",
            "name": "jsPlumbToolkit.Dialogs.show",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "ID of the dialog to show",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "Optional data to render the dialog template with.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "description": "Title for the dialog. If not supplied, the dialog's title will come from the `title` attribute of the associated template, if any. Otherwise it will be blank.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onOpen",
                            "description": "Optional function to run once the dialog has opened.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onOK",
                            "description": "Optional function to run when the user presses OK.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onCancel",
                            "description": "Optional function to run when the user presses cancel.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onClose",
                            "description": "Optional function to call when the dialog is closed, regardless of how it was closed.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onMaybeClose",
                            "description": "Optional function that will be called prior to `onOK` being called, with the same data that will be passed to `onOK`. Returning false from this function causes the dilaog to remain open.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkit.DrawingTools"
        },
        {
            "file": "src/dialogs.js",
            "line": 436,
            "description": "Hide the current dialog as if the cancel button was pressed.",
            "itemtype": "method",
            "name": "jsPlumbToolkit.Dialogs.hide",
            "class": "jsPlumbToolkit.DrawingTools"
        },
        {
            "file": "src/dialogs.js",
            "line": 442,
            "description": "Clears the given set",
            "class": "jsPlumbToolkit.DrawingTools"
        },
        {
            "file": "src/drawing.js",
            "line": 1,
            "description": "Optional extra functionality for use with the jsPlumb Toolkit. This provides a set of\ndrawing tools - select, drag, resize. Everything this tool adds to the UI has an associated\nCSS class, so you can skin it very easily.",
            "class": "jsPlumbToolkit.DrawingTools"
        },
        {
            "file": "src/graph.js",
            "line": 83,
            "description": "The Node's id. A String.",
            "itemtype": "property",
            "name": "id",
            "type": "{String}",
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 90,
            "description": "Data associated with the Node.",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 97,
            "description": "Gets the Node's id, which, for Nodes, is just the `id` property. This method is overridden by Ports.",
            "itemtype": "method",
            "name": "getFullId",
            "return": {
                "description": "Node's id.",
                "type": "String"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 114,
            "description": "Gets all Edges where this Node is either the source or the target of the Edge.\nNote that this does *not* retrieve Edges on any Ports associated with this Node - for that, @see #getAllEdges.",
            "itemtype": "method",
            "name": "getEdges",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "Optional Edge filter.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "List of edges.",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 132,
            "description": "Gets all Edges where this Node is the source.",
            "itemtype": "method",
            "name": "getSourceEdges",
            "return": {
                "description": "",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 145,
            "description": "Gets all Edges where this Node is the target.",
            "itemtype": "method",
            "name": "getTargetEdges",
            "return": {
                "description": "",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 158,
            "description": "Adds an Edge to the Node.",
            "itemtype": "method",
            "name": "addEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "The Edge to add.",
                    "type": "Edge"
                }
            ],
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 173,
            "description": "Deletes an Edge from the Node.",
            "itemtype": "method",
            "name": "deleteEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "The Edge to delete.",
                    "type": "Edge"
                }
            ],
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 199,
            "itemtype": "method",
            "name": "getAllEdges",
            "desc": "Gets all of the Edges connected to this Node, both on the Node itself and on all of its Ports.",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "filter",
                            "description": "Optional Edge filter.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "List of Edges.",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 214,
            "description": "Adds a sub-graph to this node. If you provide an existing Graph instance that does not have\nan id, one will be assigned.",
            "itemtype": "method",
            "name": "addGraph",
            "params": [
                {
                    "name": "g",
                    "description": "Either a Graph instance, or the id you wish to assign to a new Graph.",
                    "type": "Graph|String"
                }
            ],
            "return": {
                "description": "The Graph that was added.",
                "type": "Graph"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 230,
            "description": "Retrieves a sub-graph by id.",
            "itemtype": "method",
            "name": "getGraph",
            "return": {
                "description": "Sub-graph with the given id, null if not found.",
                "type": "Graph"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 242,
            "description": "Gets this Node's \"indegree\" centrality; a measure of how many other Nodes are connected to this Node as the target of some Edge.",
            "itemtype": "method",
            "name": "getIndegreeCentrality",
            "return": {
                "description": "Indegree centrality for the Node.",
                "type": "Float"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 254,
            "description": "Gets this Node's \"outdegree\" centrality; a measure of how many other Nodes this Node is connected to as the source of some Edge.",
            "itemtype": "method",
            "name": "getOutdegreeCentrality",
            "return": {
                "description": "Outdegree centrality for the Node.",
                "type": "Float"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 266,
            "description": "Gets all Ports associated with this Node.",
            "itemtype": "method",
            "name": "getPorts",
            "return": {
                "description": "List of Ports, empty list if none registered.",
                "type": "Port[]"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 275,
            "description": "Adds a Port to the Node.",
            "itemtype": "method",
            "name": "addPort",
            "params": [
                {
                    "name": "data",
                    "description": "Optional data backing the Port. This object can be of any type you like.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "idFunction",
                    "description": "Optional function that can take a Port's data and return its ID. By default this looks for an `id` member in the backing data.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created Port.",
                "type": "Port"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 292,
            "description": "Sets the underlying data for the Port with the given id.  If the Port does not yet exist, it is created.",
            "itemtype": "method",
            "name": "setPort",
            "params": [
                {
                    "name": "id",
                    "description": "Id of the Port for which to set data.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data to set for the Port.",
                    "type": "Object"
                }
            ],
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 308,
            "description": "Gets the Port with the given id, null if nothing found.",
            "itemtype": "method",
            "name": "getPort",
            "params": [
                {
                    "name": "id",
                    "description": "Port id.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Port with the given id, or null if not found.",
                "type": "Port"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 322,
            "description": "Removes the given Port.",
            "itemtype": "method",
            "name": "removePort",
            "params": [
                {
                    "name": "Either",
                    "description": "a Port, or a Port id.",
                    "type": "Port|String"
                }
            ],
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 351,
            "description": "Sets the default cost of travelling from one Port to another inside some Node. When a Node is created, this value is set to 1.",
            "itemtype": "method",
            "name": "setDefaultInternalCost",
            "params": [
                {
                    "name": "cost",
                    "description": "Default internal cost.",
                    "type": "Float"
                }
            ],
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 360,
            "description": "Gets an \"internal\" Edge from one Port to another.",
            "itemtype": "method",
            "name": "getInternalEdge",
            "params": [
                {
                    "name": "source",
                    "description": "Source Port.",
                    "type": "Port|String"
                },
                {
                    "name": "target",
                    "description": "Target Port.",
                    "type": "Port|String"
                }
            ],
            "return": {
                "description": "An object containing `\\{ source:..., target:..., cost:..., directed:... \\}`.",
                "type": "Object"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 379,
            "description": "Sets the cost and directedness of some internal Edge.",
            "itemtype": "method",
            "name": "setInternalEdge",
            "params": [
                {
                    "name": "source",
                    "description": "Source Port.",
                    "type": "Port|String"
                },
                {
                    "name": "target",
                    "description": "Target Port.",
                    "type": "Port|String"
                },
                {
                    "name": "cost",
                    "description": "Cost to set. If you leave this as null, the default will be used.",
                    "type": "Float"
                },
                {
                    "name": "directed",
                    "description": "Whether or not the internal Edge is directed.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 396,
            "description": "Returns a string representation of the Node.",
            "return": {
                "description": "Node dumped to a string.",
                "type": "String"
            },
            "class": "Node"
        },
        {
            "file": "src/graph.js",
            "line": 420,
            "itemtype": "property",
            "name": "id The Port's id. This must be unique on a Node, but not necessarily unique with a given Graph.",
            "type": "{String}",
            "see": [
                "getFullId"
            ],
            "class": "Port"
        },
        {
            "file": "src/graph.js",
            "line": 426,
            "description": "Gets the Node this Port belongs to.",
            "itemtype": "method",
            "name": "getNode",
            "return": {
                "description": "The Node this Port belongs to.",
                "type": "Node"
            },
            "class": "Port"
        },
        {
            "file": "src/graph.js",
            "line": 435,
            "description": "Overrides the `getFullId` of Node to return a value in dotted notation of the form `nodeId.portId`.",
            "itemtype": "method",
            "name": "getFullId",
            "return": {
                "description": "The Port's \"full\" id, ie. the Port's id prepended by the parent Node's id, eg `\"BooksTable.idColumn\"```.",
                "type": "String"
            },
            "class": "Port"
        },
        {
            "file": "src/graph.js",
            "line": 444,
            "itemtype": "method",
            "name": "isChildOf",
            "params": [
                {
                    "name": "node",
                    "description": "Node to test if this is a child.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "True if this Port is a child of the given Node, false otherwise.",
                "type": "Boolean"
            },
            "class": "Port"
        },
        {
            "file": "src/graph.js",
            "line": 470,
            "description": "Source of the Edge.",
            "itemtype": "property",
            "name": "source",
            "type": "{Node|Port}",
            "class": "Edge"
        },
        {
            "file": "src/graph.js",
            "line": 476,
            "description": "Target of the Edge.",
            "itemtype": "property",
            "name": "target",
            "type": "{Node|Port}",
            "class": "Edge"
        },
        {
            "file": "src/graph.js",
            "line": 490,
            "description": "Data for the Edge.",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "Edge"
        },
        {
            "file": "src/graph.js",
            "line": 497,
            "description": "Gets the cost for this edge. Defaults to 1.",
            "itemtype": "method",
            "name": "getCost",
            "return": {
                "description": "Edge cost.",
                "type": "Number"
            },
            "class": "Edge"
        },
        {
            "file": "src/graph.js",
            "line": 506,
            "description": "Sets the cost for this edge.",
            "itemtype": "method",
            "name": "setCost",
            "params": [
                {
                    "name": "c",
                    "description": "Edge cost.",
                    "type": "Number"
                }
            ],
            "class": "Edge"
        },
        {
            "file": "src/graph.js",
            "line": 515,
            "description": "Gets the id for this Edge.",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "Edge id.",
                "type": "Number"
            },
            "class": "Edge"
        },
        {
            "file": "src/graph.js",
            "line": 527,
            "description": "Gets whether or not the Edge is directed.",
            "itemtype": "method",
            "name": "isDirected",
            "return": {
                "description": "True if the Edge is directed (unidirectional), false otherwise.",
                "type": "Boolean"
            },
            "class": "Edge"
        },
        {
            "file": "src/graph.js",
            "line": 536,
            "description": "Sets whether or not the Edge is directed.",
            "itemtype": "method",
            "name": "setDirected",
            "class": "Edge"
        },
        {
            "file": "src/graph.js",
            "line": 544,
            "description": "Returns a string representation of the Edge.",
            "return": {
                "description": "Edge dumped to a string.",
                "type": "String"
            },
            "class": "Edge"
        },
        {
            "file": "src/graph.js",
            "line": 588,
            "description": "Sets the default function to use to extract an appropriate ID from the JSON for any given object.",
            "itemtype": "method",
            "name": "setIdFunction",
            "params": [
                {
                    "name": "idFunction",
                    "description": "Function to use to extract IDs.",
                    "type": "Function"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 597,
            "description": "Gets the current function to use to extract an appropriate ID from the JSON for any given object.",
            "itemtype": "method",
            "name": "getIdFunction",
            "return": {
                "description": "Function in use for extracting IDs.",
                "type": "Function"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 606,
            "description": "Sets the default function to use to extract an appropriate type from the JSON for any given object.",
            "itemtype": "method",
            "name": "setIdFunction",
            "params": [
                {
                    "name": "f",
                    "description": "Function to use to extract IDs.",
                    "type": "Function"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 615,
            "description": "Gets the type for some data, by running it through the current typeFunction.",
            "params": [
                {
                    "name": "data",
                    "description": "Object to get type from.",
                    "type": "Object"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 623,
            "description": "Sets whether or not Nodes are Graphs themselves, and can have child Nodes. If you enable this\nthen you cannot use slashes (/) in your Node ids, as they will be treated as components of a path\nto a Node in a nested Graph.",
            "params": [
                {
                    "name": "enable",
                    "description": "True to enable, false to disable.",
                    "type": "Boolean"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 633,
            "description": "Sets the character(s) used to separate ports from nodes in port ids. By default this is '.', ie a\nport is addressed as `nodeId.portId`. This may need to be changed depending on the data in your model.",
            "itemtype": "method",
            "name": "setPortSeparator",
            "params": [
                {
                    "name": "separator",
                    "description": "Separator to use.",
                    "type": "String"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 643,
            "description": "Gets the current port separator.",
            "return": {
                "description": "Port separator string. Default is \".\"",
                "type": "String"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 699,
            "description": "Clears the Graph of all its Nodes, Ports and Edges.",
            "itemtype": "method",
            "name": "clear",
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 711,
            "description": "Gets all the Nodes in the Graph.",
            "itemtype": "method",
            "name": "getNodes",
            "return": {
                "description": "All the Nodes in the Graph.",
                "type": "Node[]"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 720,
            "description": "Gets the count of Nodes in the Graph.",
            "itemtype": "method",
            "name": "getNodeCount",
            "return": {
                "description": "The total number of Nodes in the graph.",
                "type": "Integer"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 729,
            "description": "Returns the Node at the given index (used for bulk init type purposes)",
            "itemtype": "method",
            "name": "getNodeAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of the Node to retrieve",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Node at the given index.",
                "type": "Node"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 739,
            "description": "Returns the total number of Edges in the graph.",
            "itemtype": "method",
            "name": "getEdgeCount",
            "return": {
                "description": "The total number of Edges.",
                "type": "Integer"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 748,
            "description": "Adds an Edge to the Graph.",
            "itemtype": "method",
            "name": "addEdge",
            "params": [
                {
                    "name": "params",
                    "description": "Parameters for new Edge.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source for the Edge - a Node, Port or Node/Port id.",
                            "type": "String|Node|Port"
                        },
                        {
                            "name": "target",
                            "description": "Target for the Edge - a Node, Port or Node/Port id.",
                            "type": "String|Node|Port"
                        },
                        {
                            "name": "cost",
                            "description": "Edge cost. This is used when computing shortest paths through the graph. If\nan Edge is not `directed`, then the same cost is applied regardless of the direction of traversal.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "directed",
                            "description": "Whether or not the Edge is directed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "Optional data to associate with the Edge. The default edgeIdFunction",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Edge that was added.",
                "type": "Edge"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 789,
            "description": "Adds a Node to the Graph",
            "itemtype": "method",
            "name": "addNode",
            "params": [
                {
                    "name": "data",
                    "description": "Backing data for the Node",
                    "type": "Object"
                },
                {
                    "name": "idFunction",
                    "description": "Optional function to use to retrieve ID from backing data. Defaults to retrieving `id` from data object.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "The",
                    "description": "Node that was added.",
                    "type": "Node"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 807,
            "description": "Adds a list of Nodes to the Graph",
            "itemtype": "method",
            "name": "addNodes",
            "params": [
                {
                    "name": "data",
                    "description": "List of data objects, one for each Node to be added.",
                    "type": "Object[]"
                },
                {
                    "name": "idFunction",
                    "description": "Optional function to use to retrieve ID from backing data. Defaults to retrieving `id` from data object.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 819,
            "description": "Deletes a Node",
            "itemtype": "method",
            "name": "deleteNode",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node, or a Node id.",
                    "type": "Node|String"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 855,
            "description": "Deletes an edge.",
            "itemtype": "method",
            "name": "deleteEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "Edge to delete.",
                    "type": "Edge"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 874,
            "description": "Gets an Edge by id, or if the given object is already an Edge, hands that back.",
            "itemtype": "method",
            "name": "getEdge",
            "params": [
                {
                    "name": "e",
                    "description": "ID of the Edge to retrieve, or an actual Edge, or some data from which an ID could be derived.",
                    "type": "String|Edge|Object"
                }
            ],
            "return": {
                "description": "The requested Edge, if found, otherwise null.",
                "type": "Edge"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 893,
            "description": "For some given node, get a subset of edges that match the given filter function.",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "If true, only match edges for which this node is the source.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "If true, only match edges for which this node is the target.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "filter",
                    "description": ""
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 931,
            "description": "Finds the shortest path from source to target, using the Djikstra algorithm.",
            "itemtype": "method",
            "name": "findPath",
            "params": [
                {
                    "name": "source",
                    "description": "Source Node or Node ID.",
                    "type": "Node|String"
                },
                {
                    "name": "target",
                    "description": "Target Node or Node ID.",
                    "type": "Node|String"
                },
                {
                    "name": "strict",
                    "description": "Sets whether or not paths are searched strictly by the given source/target. If, for instance, you supply a node as the source, but there are only edges connected to ports on that node, by default these edges will be ignored. Switching `strict` to false will mean these edges are considered.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "nodeFilter",
                    "description": "Optional function that is given each Node's backing data and asked to return true or false - true means include the Node, false means exclude it.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "edgeFilter",
                    "description": "Optional function that is given each Edge's backing data and asked to return true or false - true means include the Edge, false means exclude it.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array like `[  \\, \\{ vertex,cost,edge \\} ... ]` when successful; when unsuccessful the three compiled\ntables are returned - distances to nodes, each node's previous node, and the associated edge.  so you can call this method with\nno target set and get the entire table populated.",
                "type": "Vertex, cost, edge \\"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 949,
            "description": "Finds the distance between source and target.",
            "itemtype": "method",
            "name": "getDistance",
            "params": [
                {
                    "name": "source",
                    "description": "Source Node or Node ID.",
                    "type": "Node|String"
                },
                {
                    "name": "target",
                    "description": "Target Node or Node ID.",
                    "type": "Node|String"
                },
                {
                    "name": "strict",
                    "description": "Sets whether or not paths are searched strictly by the given source/target. If, for instance, you supply a node as the source, but there are only edges connected to ports on that node, by default these edges will be ignored. Switching `strict` to false will mean these edges are considered.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "Distance from the source to the target.",
                "type": "Number"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 962,
            "description": "Gets the Node or Port with the given id, null if not found.",
            "itemtype": "method",
            "name": "getNode",
            "params": [
                {
                    "name": "id",
                    "description": "Node or Port id.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Node/Port if found, null otherwise.",
                "type": "Node"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 970,
            "description": "Sets the target Node/Port for some Edge.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "o",
                    "description": "Node/Port/id for new Edge target",
                    "type": "Node|Port|String"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 985,
            "description": "Sets the source Node/Port for some Edge.",
            "itemtype": "method",
            "name": "setSource",
            "params": [
                {
                    "name": "o",
                    "description": "Node/Port/id for new Edge source",
                    "type": "Node|Port|String"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1000,
            "description": "Returns the path from source to target as a String.",
            "itemtype": "method",
            "name": "printPath",
            "return": {
                "description": "Printed path. Mostly useful for debugging.",
                "type": "String"
            },
            "see": [
                "findPath"
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1016,
            "description": "Returns the `diameter` of the Graph.",
            "itemtype": "method",
            "name": "getDiameter",
            "params": [
                {
                    "name": "dontUseMax",
                    "description": "Whether or not to return Infinity if there is at least one pair of nodes for which there is no available path.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Diameter of the Graph.",
                "type": "Number"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1042,
            "description": "Returns the degree centrality of the given node. This is an alias to `getDegreeCentrality`, as centrality\nmost commonly refers to degree centrality. Note that this returns incoming and outgoing connections; use\ngetIndegreeCentrality or getOutdegreeCentrality if you need to be more specific.",
            "itemtype": "method",
            "name": "getCentrality",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve centrality for.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "Node's centrality.",
                "type": "Integer"
            },
            "see": [
                "getBetweenness",
                "getCloseness"
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1059,
            "description": "Returns the indegree centrality of the given node (number of connections entering the vertex)",
            "itemtype": "method",
            "name": "getIndegreeCentrality",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve indegree centrality for.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "Node's indegree centrality.",
                "type": "Integer"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1070,
            "description": "Returns the outdegree centrality of the given node (number of connections exiting the vertex)",
            "itemtype": "method",
            "name": "getOutdegreeCentrality",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve outdegree centrality for.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "Node's indegree centrality.",
                "type": "Integer"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1081,
            "description": "Returns the Closeness centrality of the given node. This is the inverse of the node's farness.",
            "itemtype": "method",
            "name": "getCloseness",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve closeness for.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "Node's \"closeness\".",
                "type": "Float"
            },
            "see": [
                "getFarness"
            ],
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1092,
            "description": "Returns the farness centrality of the given node, ie. the sum of its distance from all other nodes, where the distance from one Node to another is given by the associated cost of the Edge joining the two Nodes.",
            "itemtype": "method",
            "name": "getFarness",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve farness for.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "Node's \"farness\".",
                "type": "Number"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1108,
            "description": "Returns the betweenness centrality of the given node.",
            "itemtype": "method",
            "name": "getBetweenness",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve betweenness centrality for.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "Node's \"betweenness\" centrality.",
                "type": "Float"
            },
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1215,
            "description": "finds the Vertex in the 'dist' table that has not yet been computed and has the smallest cost so far.",
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1242,
            "description": "assembles a path to the given target, using data from the 'dist' and 'previous' tables.  the source of the path is the source that was most recently passed in to the\nDjikstra.compute method.",
            "class": "Graph"
        },
        {
            "file": "src/graph.js",
            "line": 1352,
            "description": "An implementation of the Djikstra shortest path algorithm. The algorithm has been modified\nslightly to handle Ports on Nodes.",
            "class": "Graph"
        },
        {
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 34,
            "description": "Create an instance of the jsPlumb Toolkit.",
            "params": [
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 175,
            "description": "Generate a Miniview directive.",
            "itemtype": "method",
            "name": "miniview",
            "return": {
                "description": "A Miniview directive definition.",
                "type": "Object"
            },
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 248,
            "description": "Binds to some event related to the toolkit with the given id, which may or may not yet exist, and in fact\nfor the case for which this functionality was added - a ready event - it most likely does not.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "event",
                    "description": "ID of the event to bind to. Currently we support `ready` only.",
                    "type": "String"
                },
                {
                    "name": "toolkitId",
                    "description": "ID of the Toolkit to bind the event to.",
                    "type": "String"
                },
                {
                    "name": "Function",
                    "description": "to call when the event fires. The function is passed (toolkit, toolkitId, eventId) as args.",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 263,
            "description": "Gets an instance of the jsPlumb Toolkit by the ID used to create it.",
            "itemtype": "method",
            "name": "getToolkit",
            "params": [
                {
                    "name": "id",
                    "description": "ID used to create the Toolkit instance you want to retrieve.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Optional parameters for the Toolkit instance's constructor.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "An instance of the jsPlumb Toolkit; null if not found.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 278,
            "description": "Resets the toolkit with the given id - which is to say, deletes it, so that the next request\nfor it returns null and it gets recreated.",
            "itemtype": "method",
            "name": "resetToolkit",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the toolkit to reset.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 296,
            "description": "Registers a Surface. If any extra components have been registered for this Surface they will be initialised now.",
            "itemtype": "method",
            "name": "addSurface",
            "params": [
                {
                    "name": "id",
                    "description": "ID to register the Surface with.",
                    "type": "String"
                },
                {
                    "name": "surface",
                    "description": "Surface instance.",
                    "type": "Surface"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 319,
            "description": "Retrieve a Surface by id. You will have set the id of the Surface via the `surface-id` attribute on the directive\nelement.",
            "itemtype": "method",
            "name": "getSurface",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Surface to retrieve.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 329,
            "description": "Add a component to the Surface with the given id. If the Surface already exists and has been initialised the component\nwill be added immediately; otherwise it will be enqueued for later processing.",
            "itemtype": "method",
            "name": "addComponent",
            "params": [
                {
                    "name": "surfaceId",
                    "description": "ID of the Surface to add the component to.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Constructor parameters for the component.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of component to add.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 341,
            "description": "Add a Palette to the Surface with the given id. If the Surface already exists and has been initialised the Palette\nwill be added immediately; otherwise it will be enqueued for later processing. This is really just a wrapper around\naddComponent.",
            "itemtype": "method",
            "name": "addPalette",
            "params": [
                {
                    "name": "surfaceId",
                    "description": "ID of the Surface to add the Palette to.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Constructor parameters for the Palette.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "src/jsPlumbToolkit-angular.js",
            "line": 353,
            "description": "Add a Miniview to the Surface with the given id. If the Surface already exists and has been initialised the Miniview\nwill be added immediately; otherwise it will be enqueued for later processing. This is just a wrapper around addComponent.",
            "itemtype": "method",
            "name": "addMiniview",
            "params": [
                {
                    "name": "surfaceId",
                    "description": "ID of the Surface to add the Miniview to.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Constructor parameters for the Miniview.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 160,
            "description": "Gets the current NodeFactory.",
            "return": {
                "description": "Current Node Factory; see documentation for a discussion.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 167,
            "description": "Gets the current EdgeFactory.",
            "return": {
                "description": "Current Edge Factory; see documentation for a discussion.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 174,
            "description": "Gets the current PortFactory.",
            "itemtype": "method",
            "name": "getPortFactory",
            "return": {
                "description": "Current Port Factory; see documentation for a discussion.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 182,
            "description": "Sets the current NodeFactory.",
            "itemtype": "method",
            "name": "setNodeFactory",
            "params": [
                {
                    "name": "f",
                    "description": "Node factory to set as current.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Node Factory to use; see documentation for a discussion.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 191,
            "description": "Sets the current EdgeFactory.",
            "return": {
                "description": "Edge Factory to use; see documentation for a discussion.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 198,
            "description": "Sets the current PortFactory.",
            "return": {
                "description": "Port Factory to use; see documentation for a discussion.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 213,
            "description": "Gets the model registered with this Toolkit instance, if any. Models may be registered on the Toolkit or on each individual\nSurface. In general it is a good idea to use the Toolkit's model to map data model event handlers and other data model considerations\nsuch as the maximum number of connections a Port allows, and each Surface's model definition to configure view concerns.",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "Current model. May be null.",
                "type": "Object"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 284,
            "description": "Sets whether or not the original dataset will be updated whenever a node/edge is removed or added. This functionality is suspended\nwhen a `load` operation is taking place. Note that for this functionality to work there must be a `manager` registered for the given\ndata type in jsPlumbToolkitIO. The Toolkit ships with a manager for the default `json` datatype, but if you have your own custom\ndatatype you will need to provide one of these to support this functionality. See the documentation on data loading for a full\ndiscussion.",
            "params": [
                {
                    "name": "update",
                    "description": "True if you want the backing data to be updated, false otherwise.",
                    "type": "Boolean"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 296,
            "description": "Returns the type function that is currently in use.",
            "return": {
                "description": "Function currently being used to determine types of nodes from their data. The default is to look for a `type` member in the data.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 304,
            "description": "Connects two nodes/ports (or a combination of the two), by ID.  This function does not know about the DOM: tou cannot pass it DOM elements\nor selectors. By default, this method will create nodes that are missing. Port ids are specified with a dotted syntax, eg `foo.bar` refers\nto the port \"bar\" on the node \"foo\".",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "params",
                    "description": "Connect parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Either the data for a node, or a node id as a string, representing the source node in the connection.",
                            "type": "Object|String"
                        },
                        {
                            "name": "target",
                            "description": "Either the data for a node, or a node id as a string, representing the target node in the connection",
                            "type": "Object|String"
                        },
                        {
                            "name": "cost",
                            "description": "Optional; the cost of the connection.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "directed",
                            "description": "Optional, defaults to false. Whether the edge is directed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "doNotCreateMissingNodes",
                            "description": "Optional, defaults to false. Whether to NOT create nodes that do not exist yet. Sorry about the double negative.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "data",
                            "description": "Optional backing data for the Edge. Here you might like to set id:'some value' if you need o retrieve the Edge by id later on.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The new Edge.",
                "type": "Edge"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 360,
            "description": "Clears the graph, then fires a `graphCleared` event.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "The current Toolkit instance.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 371,
            "description": "Returns the current Graph.",
            "itemtype": "method",
            "name": "getGraph",
            "return": {
                "description": "The underlying Graph.",
                "type": "Graph"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 380,
            "description": "Returns the count of nodes in the Graph.",
            "itemtype": "method",
            "name": "getNodeCount",
            "return": {
                "description": "The count of Nodes in the Graph.",
                "type": "Number"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 389,
            "description": "Returns the Node at the given index.",
            "itemtype": "method",
            "name": "getNodeAt",
            "return": {
                "description": "The Node at the given index, null if not found.",
                "type": "Object"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 398,
            "description": "Returns all the nodes in the Graph.",
            "itemtype": "method",
            "name": "getNodes",
            "return": {
                "description": "All the Nodes in the graph.",
                "type": "Node[]"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 407,
            "description": "Iterates through all Nodes in the Toolkit one at a time. You should not perform destructive editing of\nthe dataset inside one of these loops.",
            "itemtype": "method",
            "name": "eachNode",
            "params": [
                {
                    "name": "fn",
                    "description": "A function that takes (index, node) as arguments and is applied for every Node in the Toolkit instance.",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 419,
            "description": "Iterates through all Edges in the Toolkit one at a time. You should not perform destructive editing of\nthe dataset inside one of these loops.",
            "itemtype": "method",
            "name": "eachEdge",
            "params": [
                {
                    "name": "fn",
                    "description": "A function that takes (index, edge) as arguments and is applied for every Node in the Toolkit instance.",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 432,
            "description": "Returns the total number of Edges.",
            "itemtype": "method",
            "name": "getEdgeCount",
            "return": {
                "description": "The total number of Edges in the Graph.",
                "type": "Number"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 441,
            "description": "Gets the id of the Node represented by the given arguments. If this is a JS object, we extract the id using the\ncurrent idFunction. Otherwise we just pass it back as-is.",
            "itemtype": "method",
            "name": "getNodeId",
            "params": [
                {
                    "name": "node",
                    "description": "Object from which to retrieve id.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Node's id, if the current idFunction was able to resolve it, or the given object.",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 453,
            "description": "Gets the type of the Node represented by the given JS object. We first try for a return value from the current typeFunction,\nbut if that returns nothing we just return 'default'.",
            "itemtype": "method",
            "name": "getNodeType",
            "params": [
                {
                    "name": "node",
                    "description": "Object from which to derive type.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Either the object's type, or `default`.",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 464,
            "description": "Gets the id of the Edge represented by the given arguments. If this is a JS object, we extract the id using the\ncurrent edgeIdFunction. Otherwise we just pass it back as-is.",
            "itemtype": "method",
            "name": "getEdgeId",
            "params": [
                {
                    "name": "edge",
                    "description": "Edge from which to retrieve id.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Edge's id, if we could resolve it, otherwise the object we were given.",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 475,
            "description": "Gets the type of the Edge represented by the given JS object.",
            "itemtype": "method",
            "name": "getEdgeType",
            "return": {
                "description": "Either the Edge's type, if set, or \"default\".",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 484,
            "description": "Gets the id of the Port represented by the given arguments. If this is a JS object, we extract the id using the\ncurrent portIdFunction. Otherwise we just pass it back as-is.",
            "itemtype": "method",
            "name": "getPortId",
            "return": {
                "description": "Port's id, if we could resolve it, otherwise the object we were given.",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 494,
            "description": "Gets the type of the Port represented by the given JS object",
            "itemtype": "method",
            "name": "getPortType",
            "return": {
                "description": "Either the port's type, if set, or \"default\".",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 503,
            "description": "Gets the type of the given Object. This is not a type such as `Node`, `Port` or `Edge` - this is the type of the\nobject as defined by your system to identify types; these are the types used to lookup objects in the model.",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "The object's type.",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 514,
            "description": "Adds a Node with the given data. If the data is null, the Toolkit creates an empty object and assigns\na uuid as the Node's id.  If no id can be derived for the given data, the Toolkit creates a uuid and\nsets it as the data object's 'id' member. This method also calls the current `portExtractor` function, if\none was supplied. Its purpose is to extract any Ports from the data for some given Node.",
            "itemtype": "method",
            "name": "addNode",
            "params": [
                {
                    "name": "data",
                    "description": "The Node's backing data - from your data model.",
                    "type": "Object"
                },
                {
                    "name": "eventInfo",
                    "description": "Optional data member that the Toolkit will pass into any registered event listeners. This can be used\nby the UI layer, for instance, to track the position on screen of any newly added elements.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A Node object.  Your original data is available via the `data` member. The Node's id is available via the `id` member.",
                "type": "Node"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 558,
            "description": "Adds a Node by type, running the data generation for the node through the current NodeFactory.  This is\ndifferent from `addNode` in that with `addNode` you are supplying the final data and your NodeFactory is\nnot called. This method can be called with one, two or three arguments. A single argument is considered to be\nthe new Node's `type`, and a backing data object will be created with this set, and no callback will occur.\nIf you provide two arguments the second argument may be either the new Node's backing data OR a callback to\nhit with the newly created Node. With three arguments the second argument is the Node's backing data and the\nthird is a callback to hit with the newly created Node.",
            "params": [
                {
                    "name": "type",
                    "description": "Required. Type of the object to create. `type` will be passed as the first argument to your node factory.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Optional backing data for the Node.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Optional function to call with the newly created Node.",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 580,
            "description": "Adds a list of Nodes.",
            "itemtype": "method",
            "name": "addNodes",
            "params": [
                {
                    "name": "nodeList",
                    "description": "An array of objects, one for each Node to be added.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The current Toolkit instance.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 593,
            "description": "Gets a Node by id, or if the given object is already a Node, hands that back.",
            "itemtype": "method",
            "name": "getNode",
            "params": [
                {
                    "name": "nodeId",
                    "description": "ID of the Node to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The requested Node, if found, otherwise null.",
                "type": "Node"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 603,
            "description": "Gets an Edge by id, or if the given object is already an Edge, hands that back.",
            "itemtype": "method",
            "name": "getEdge",
            "params": [
                {
                    "name": "edgeId",
                    "description": "ID of the Edge to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The requested Edge, if found, otherwise null.",
                "type": "Edge"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 613,
            "description": "Returns whether or not object(s) exist for the given id(s).",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "objects",
                    "description": "List of ids to check existence for.  This method takes an arbitrary number of arguments.",
                    "type": "Object..."
                }
            ],
            "return": {
                "description": "True if objects exist for all given ids, false otherwise.",
                "type": "Boolean"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 626,
            "description": "Removes the given Node, which may be passed in as the actual Node object, or its id.",
            "itemtype": "method",
            "name": "removeNode",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node, or its ID.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "The current Toolkit instance.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 651,
            "description": "Adds an Edge to the Graph.",
            "itemtype": "method",
            "name": "addEdge",
            "params": [
                {
                    "name": "params",
                    "description": "Method params.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source Node, or id of the source Node. If given as a string, this may be in \"dotted\" format, eg. nodeId.portId, to identify a particular port on the source Node.",
                            "type": "Node|String"
                        },
                        {
                            "name": "target",
                            "description": "Target Node, or id of the target Node. If given as a string, this may be in \"dotted\" format, eg. nodeId.portId, to identify a particular port on the target Node.",
                            "type": "Node|String"
                        },
                        {
                            "name": "cost",
                            "description": "Edge cost. This is used when computing shortest paths through the graph. If\nan Edge is not `directed`, then the same cost is applied regardless of the direction of traversal.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "directed",
                            "description": "Whether or not the Edge is directed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Edge that was added.",
                "type": "Edge"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 675,
            "description": "Removes an Edge from the Graph.",
            "itemtype": "method",
            "name": "removeEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "The Edge to remove, as either an Edge object or its id.",
                    "type": "Edge|String"
                },
                {
                    "name": "source",
                    "description": "The source for the removeEdge operation. For internal use.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current Toolkit instance.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 704,
            "description": "Sets the target Node/Port for some Edge.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "edge",
                    "description": "Edge to retarget.",
                    "type": "Edge"
                },
                {
                    "name": "o",
                    "description": "Node/Port/id for new Edge target",
                    "type": "Node|Port|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 718,
            "description": "Sets the source Node/Port for some Edge.",
            "itemtype": "method",
            "name": "setSource",
            "params": [
                {
                    "name": "edge",
                    "description": "Edge to set source for.",
                    "type": "Edge"
                },
                {
                    "name": "o",
                    "description": "Node/Port/id for new Edge source",
                    "type": "Node|Port|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 732,
            "description": "Adds a new Port to some Node. This will call the current `PortFactory` to get the data for a new Port.",
            "itemtype": "method",
            "name": "addNewPort",
            "params": [
                {
                    "name": "node",
                    "description": "Node or id of the Node to add a new Port to.",
                    "type": "Node|String"
                },
                {
                    "name": "type",
                    "description": "Type of Port to add.",
                    "type": "String"
                },
                {
                    "name": "portData",
                    "description": "Optional data to pass to the PortFactory.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 756,
            "description": "Adds a Port from existing data to some Node. This is distinct from `addNewPort`, because in this\ncase the data for the Port already exists.",
            "itemtype": "method",
            "name": "addPort",
            "params": [
                {
                    "name": "node",
                    "description": "Node or id of the Node to add the Port to.",
                    "type": "Node|String"
                },
                {
                    "name": "data",
                    "description": "Data for the Port.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The port that was added.",
                "type": "Port"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 776,
            "description": "Removes the Port with the given id from the given Node.",
            "itemtype": "method",
            "name": "removePort",
            "params": [
                {
                    "name": "node",
                    "description": "Either a node id, or a Node, from which the Port should be removed.",
                    "type": "Node|String"
                },
                {
                    "name": "portId",
                    "description": "Id of the port to remove from the given node.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the port existed and was removed, false otherwise.",
                "type": "Boolean"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 799,
            "description": "Removes whatever is identified by `obj`, which may be one of a number of things.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": "Either a Node id, a Node, an Edge, or Selection or Path whose Nodes/Ports and Edges to remove.",
                    "type": "Node|Edge|Selection|Path"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 829,
            "description": "Suspends or re-enables rendering. This method simply round-robins all the registered renderers\nand calls `setSuspendRendering` on each of them.",
            "itemtype": "method",
            "name": "setSuspendRendering",
            "params": [
                {
                    "name": "v",
                    "description": "True to suspend rendering, false to enable it.",
                    "type": "Boolean"
                },
                {
                    "name": "thenRefresh",
                    "description": "If true, a refresh will be called on all renderers after rendering is unsuspended.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 841,
            "description": "Suspends rendering and then runs the given function, unsuspending rendering afterwards and doing\na refresh. This method is just a convenience method that handles suspending\nand subsequent enabling of rendering. You might use this if you're adding a whole load of Nodes or\nEdges, or maybe you want to add a Node and one or more Edges before\nthe layout recomputes.",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 874,
            "description": "Updates the given Node, notifying any Renderers to do a redraw. If autoSave is set, this method\nwill cause the dataset to be saved.",
            "itemtype": "method",
            "name": "updateNode",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node, a Node id, or the backing data for a Node.",
                    "type": "Node|String|Object"
                },
                {
                    "name": "updates",
                    "description": "An object with path->value pairs. Path can be in dotted notation. You do not actually have to supply this, although in most cases you will want to. But there are edge cases in which you might simply wish to kick off a repaint.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 887,
            "description": "Updates the given Port, notifying any Renderers to do a redraw. If autoSave is set, this method\nwill cause the dataset to be saved.",
            "itemtype": "method",
            "name": "updatePort",
            "params": [
                {
                    "name": "port",
                    "description": "Either a Port, a Port id, or the backing data for a Port.",
                    "type": "Port|String|Object"
                },
                {
                    "name": "updates",
                    "description": "An object with path->value pairs. Path can be in dotted notation. You do not actually have to supply this, although in most cases you will want to. But there are edge cases in which you might simply wish to kick off a repaint.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 900,
            "description": "Updates the given Edge, notifying any Renderers to do a redraw. If autoSave is set, this method\nwill cause the dataset to be saved.",
            "itemtype": "method",
            "name": "updateEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "Either an Edge, an Edge id, or the backing data for an Edge.",
                    "type": "Edge|String|Object"
                },
                {
                    "name": "updates",
                    "description": "An object with path->value pairs. Path can be in dotted notation. You do not actually have to supply this, although in most cases you will want to. But there are edge cases in which you might simply wish to kick off a repaint.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 922,
            "description": "Updates the given object, notifying any renderers to do a repaint.",
            "params": [
                {
                    "name": "object",
                    "description": "Either a Node, Port or Edge, or, as a string, the id of some Node or Port.",
                    "type": "Node|Port|Edge|String"
                },
                {
                    "name": "updates",
                    "description": "An object with path->value pairs. Path can be in dotted notation. You do not actually have to supply this, although in most cases you will want to. But there are edge cases in which you might simply wish to kick off a repaint.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The object that was updated, or null if not found.",
                "type": "Node|Port|Edge"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 945,
            "description": "Gets a Path from some source Node/Port to some target Node/Port.",
            "params": [
                {
                    "name": "params",
                    "description": "Path spec params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source node or port, or id of source node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "target",
                            "description": "Target node or port, or id of target node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "strict",
                            "description": "Sets whether or not paths are searched strictly by the given source/target. If, for instance, you supply a node as the source, but there are only edges connected to ports on that node, by default these edges will be ignored. Switching `strict` to false will mean these edges are considered.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "nodeFilter",
                            "description": "Optional function that is given each Node's backing data and asked to return true or false - true means include the Node, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeFilter",
                            "description": "Optional function that is given each Edge's backing data and asked to return true or false - true means include the Edge, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Path object. Even if no path exists you will get a return value - but it will just be empty.",
                "type": "Path"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 959,
            "description": "Finds the Graph object that matches the given spec.",
            "itemtype": "method",
            "name": "findGraphObject",
            "params": [
                {
                    "name": "spec",
                    "description": "If a string, a Node/Port matching that id is retrieved. Otherwise if `spec` is already a Graph object (Node or Port), it is\nreturned.",
                    "type": "String|Node|Port"
                }
            ],
            "return": {
                "description": "Node or Port matching the spec, null if no match or spec was not a Graph object.",
                "type": "Node|Port"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1003,
            "description": "Gets a set of edges.",
            "itemtype": "method",
            "name": "getEdges",
            "params": [
                {
                    "name": "params",
                    "description": "parameters for the select call",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source Node or id of source Node from which to select Edges.",
                            "type": "Node|String",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "Target Node or id of target Node from which to select Edges.",
                            "type": "Node|String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1014,
            "description": "Get all edges in the toolkit instance.",
            "itemtype": "method",
            "name": "getAllEdges",
            "params": [
                {
                    "name": "params",
                    "description": "Parameters for the selectAllEdges call.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1023,
            "description": "Gets all edges for the given Node or Port.",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to retrieve edges for.",
                    "type": "Node|Port"
                },
                {
                    "name": "filter",
                    "description": "Optional filter function for edge selection.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a list of Edges."
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1089,
            "description": "Loads some data, either via ajax, or directly from a JS object.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "params",
                    "description": "Load parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "Specifies the data type of the data to load. This must match the name of a loader registered with the given instance of the Toolkit.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"json\""
                        },
                        {
                            "name": "data",
                            "description": "Optional. JSON data to load directly.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "url",
                            "description": "URL to retrieve data from. Optional, but you need to supply either this or `data`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "jsonp",
                            "description": "Optional, defaults to false. Tells the Toolkit that the data is coming via JSON-P.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onload",
                            "description": "Optional callback to execute once the data has loaded. Most often used when you are retrieving remote data (using `url` and possibly `jsonp`)",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "parameters",
                            "description": "Optional parameters to pass to the loader.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "Optional function to call on load error.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "Optional map of HTTP header values, if loading via URL.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The current instance of the Toolkit. If you provide data directly to this method you can then chain a load call with a subsequent `render`.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1107,
            "description": "Appends some data to the dataset, either via ajax, or directly from a JS object. The only difference\nbetween this and `load` is the events that are fired during the loading process.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "params",
                    "description": "Append parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "Specifies the data type of the data to load. This must match the name of a loader registered with the given instance of the Toolkit.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"json\""
                        },
                        {
                            "name": "data",
                            "description": "Optional. JSON data to load directly.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "url",
                            "description": "URL to retrieve data from. Optional, but you need to supply either this or `data`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "jsonp",
                            "description": "Optional, defaults to false. Tells the Toolkit that the data is coming via JSON-P.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onload",
                            "description": "Optional callback to execute once the data has loaded. Most often used when you are retrieving remote data (using `url` and possibly `jsonp`)",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "parameters",
                            "description": "Optional parameters to pass to the loader.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "Optional function to call on load error.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The current instance of the Toolkit. If you provide data directly to this method you can then chain a load call with a subsequent `render`.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1125,
            "description": "Saves the current data via ajax POST to a given URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "params",
                    "description": "Load parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "Specifies the data type in which to format the data. This must match the name of an exporter registered with the given instance of the Toolkit.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"json\""
                        },
                        {
                            "name": "url",
                            "description": "URL to POST data to.",
                            "type": "String"
                        },
                        {
                            "name": "parameters",
                            "description": "Optional parameters to pass to the exporter. If you write a custom exporter you may wish to use this.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "success",
                            "description": "Callback to execute once the data has saved successfully.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "Callback to execute if there was an error saving the data.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The current instance of the Toolkit. If you provide data directly to this method you can then chain a load call with a subsequent `render`.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1149,
            "description": "Exports the current data to JSON.",
            "itemtype": "method",
            "name": "exportData",
            "params": [
                {
                    "name": "params",
                    "description": "Export parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "Specifies the data type in which to format the data. This must match the name of an exporter registered with the given instance of the Toolkit.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"json\""
                        },
                        {
                            "name": "parameters",
                            "description": "Optional parameters to pass to the exporter. If you write a custom exporter you may wish to use this.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "JSON payload.",
                "type": "Object"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1200,
            "description": "Sets obj as the current selection for this instance of the jsPlumb Toolkit.",
            "itemtype": "method",
            "name": "setSelection",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to select. May be a Node/Edge or an array of either\nof these, or a Node id, or a Path.",
                    "type": "Node|Edge|Node[]|Edge[]|Path|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1210,
            "description": "Gets an ad-hoc selection",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to select. May be a Node/Port/Edge or an array of either\nof these, or a Node id, a Selection, or a Path.",
                    "type": "Node|Port|Edge|Node[]|Port[]|Edge[]|Path|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1247,
            "description": "Selects all descendants of some Node, and, optionally, the Node itself.",
            "itemtype": "method",
            "name": "selectDescendants",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to select. May be a Node/Port/Edge or an array of either\nof these, or a Node id, a Selection, or a Path.",
                    "type": "Node|Port|Edge|Node[]|Port[]|Edge[]|Path|String"
                },
                {
                    "name": "includeRoot",
                    "description": "Whether or not to include the root node in the returned dataset.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "includeEdges",
                    "description": "Whether or not to include edges in the returned dataset.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1269,
            "description": "Gets a Selection that is a filtered set of Nodes and Edges.",
            "params": [
                {
                    "name": "spec",
                    "description": "Either a function, which will be passed each Edge and Node and is expected to return\ntrue to indicate inclusion, or an object consisting of key/value pairs, all of which are expected to match the `data` for any Edge or Node that should be included in the output.",
                    "type": "Object|Function"
                },
                {
                    "name": "includePartials",
                    "description": "If true, and you're using a match object, the results will include any objects that match at least one key in the match object.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "A Selection.",
                "type": "Selection"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1302,
            "description": "Appends `obj` to the current selection. If there is no current selection, `obj` becomes it.",
            "itemtype": "method",
            "name": "addToSelection",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to select. May be a Node/Edge or an array of either\nof these, or a Node id, or a Path, or a DOM element.",
                    "type": "Node|Edge|Node[]|Edge[]|Path|String|Element"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1325,
            "description": "Toggles whether or not the given `obj` forms part of the current selection.",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to select. May be a Node/Edge or an array of either\nof these, or a Node id, or a Path, or a DOM element.",
                    "type": "Node|Edge|Node[]|Edge[]|Path|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1347,
            "description": "Removes obj from the current selection",
            "itemtype": "method",
            "name": "deselect",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to deselect. May be a Node/Edge or an array of either\nof these, or a Node id, or a Path, or a DOM element.",
                    "type": "Node|Edge|Node[]|Edge[]|Path|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1365,
            "description": "Appends the Path from `source` to `target` to the current selection. If there is no current selection, `obj` becomes it.\nIf the Path does not exist, there is no selection.",
            "itemtype": "method",
            "name": "addPathToSelection",
            "params": [
                {
                    "name": "params",
                    "description": "Path params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "ID of source, or source Node/Port",
                            "type": "Node|String"
                        },
                        {
                            "name": "target",
                            "description": "ID of target, or target Node/Port",
                            "type": "Node|String"
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1377,
            "description": "Sets the current selection to be every node in the toolkit instance.",
            "itemtype": "method",
            "name": "selectAll",
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1386,
            "description": "Clears the current selection and fires a `selectionCleared` event.",
            "itemtype": "method",
            "name": "clearSelection",
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1392,
            "description": "Gets the current Selection for this Toolkit instance.",
            "itemtype": "method",
            "name": "getSelection",
            "return": {
                "description": "Current Selection.",
                "type": "Selection"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1401,
            "description": "Sets the maximum number of nodes that may be selected at any one time. Default is Infinity.",
            "itemtype": "method",
            "name": "setMaxSelectedNodes",
            "params": [
                {
                    "name": "maxNodes",
                    "description": "Max number of nodes allowed to be selected at once.",
                    "type": "Integer"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1410,
            "description": "Sets the maximum number of edges that may be selected at any one time. Default is Infinity.",
            "itemtype": "method",
            "name": "setMaxSelectedEdges",
            "params": [
                {
                    "name": "maxEdges",
                    "description": "Max number of edges allowed to be selected at once.",
                    "type": "Integer"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1419,
            "description": "Sets The action taken when appending an edge or node that would\ntake the selection above its limit for that given type. Depends on the current `capacityPolicy`, which can be either\nSelection.DISCARD_EXISTING (the default) or Selection.DISCARD_NEW.",
            "itemtype": "method",
            "name": "setSelectionCapacityPolicy",
            "params": [
                {
                    "name": "policy",
                    "description": "One of `Selection.DISCARD_EXISTING` (which removes the 0th entry from the list before insertion of the new value) or `Selection.DISCARD_NEW`.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1441,
            "description": "Configures the given element as a renderer, registering it so that it reflects any changes to the\nunderlying data. This method turns the given element into a Surface if it is not already one.  If there is any data in the\nToolkit at the time of this call it is rendered; any data subsequently loaded is automatically rendered. You can supply\nlayout arguments to this method (layout type + layout specific parameters), as well as jsPlumb rules for\nendpoints, paint styles etc.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "container",
                            "description": "Element to convert into a Surface.",
                            "type": "Element|Selector"
                        },
                        {
                            "name": "id",
                            "description": "Optional id to register the created Surface against. You can then retrieve the Surface via `toolkit.getRenderer(id)`. If you do not provide this, one will be assigned. The ID is written as the renderer's `id` property.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "elementsDraggable",
                            "description": "Whether or not elements in the Surface should be draggable.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "dragOptions",
                            "description": "Options for draggable elements.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "events",
                            "description": "Optional event bindings. See documentation.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "miniview",
                            "description": "Optional miniview configuration. See documentation.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "mode",
                            "description": "Mode to initialize the Surface in.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"Pan\""
                        },
                        {
                            "name": "panDistance",
                            "description": "How far a pan nudge should move the UI (in pixels).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "50"
                        },
                        {
                            "name": "enablePan",
                            "description": "Whether or not panning (via mouse drag) is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableWheelZoom",
                            "description": "Whether or not zooming with the mouse wheel is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "wheelFilter",
                            "description": "Optional CSS selector representing elements that should not respond to wheel zoom.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "wheelSensitivity",
                            "description": "How many pixels each click of the mouse wheel represents when zooming. Note that this value, while expressed in pixels, is mapped in a variety of ways depending on the browser.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "10"
                        },
                        {
                            "name": "enablePanButtons",
                            "description": "Whether or not to show the pan nudge buttons on the borders of the widgets.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "padding",
                            "description": "Optional values for padding in the x/y axes to leave around the content. This is only of any use if you have disabled panning via mouse drag,\nsince in that case the user sees only scroll bars and has no way of navigating beyond the content. Some padding makes the UI nicer to use. Default is [0,0].",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "lassoFilter",
                            "description": "Optional selector for elements on which a mousedown should not cause the lasso to activate.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "consumeRightClick",
                            "description": "Useful for development: set this to false if you don't want the widget to consume context menu clicks.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "jsPlumb",
                            "description": "Optional set of jsPlumb Defaults to use for this renderer. The format and allowed properties is that of\n                the Defaults object in jsPlumb. You can also set display properties in the model.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "enhancedModel",
                            "description": "If false, there will be no support for preconfigured parameters or functions in the definitions inside a Model. You will want to set this for Angular if you use the 2-way data binding.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1499,
            "description": "Gets a renderer by the `id` parameter supplied to the `render` call (which is by default null, and only renderers for which an `id` was supplied are retrievable via this method)",
            "itemtype": "method",
            "name": "getRenderer",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the renderer to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Either a Renderer that was registered against the given id, or null if none found.",
                "type": "AbstractRenderer"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1509,
            "description": "Gets all renderers registered on this instance of the jsPlumb Toolkit.",
            "itemtype": "method",
            "name": "getRenderers",
            "return": {
                "description": "A map of `id-> Renderer` pairs.",
                "type": "Object"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1518,
            "description": "Finds information related to the given object, which may be a DOM node or an existing Toolkit object. This function is\nuseful for mapping some UI element to its underlying data.",
            "itemtype": "method",
            "name": "getObjectInfo",
            "params": [
                {
                    "name": "obj",
                    "description": "An element id, node id, DOM element, Node or Port.",
                    "type": "String|Element|Node|Port"
                },
                {
                    "name": "elementResolver",
                    "description": "For internal use. Resolves a Node or Port into its DOM element.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A JS object containing `obj` (the Toolkit object), `id` (the Node/Port ID), `type` (\"port\" or \"node\"), `els` - a map of Surface ids\nto [ Surface, Element ] pairs, one for each Surface that has rendered the given Node/Port.",
                "type": "Object"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/jsPlumbToolkit.js",
            "line": 1604,
            "description": "Gets a new instance of the jsPlumb Toolkit.",
            "params": [
                {
                    "name": "params",
                    "description": "Valid constructor parameters for a jsPlumbToolkitInstance."
                }
            ],
            "return": {
                "description": "",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "src/lasso.js",
            "line": 101,
            "description": "Returns whether or not the lasso is active.",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "true if active, false otherwise.",
                "type": "Boolean"
            },
            "class": "jsPlumbToolkit.Widgets.Lasso"
        },
        {
            "file": "src/lasso.js",
            "line": 110,
            "description": "Sets whether or not the lasso responds to mouse events.",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "e",
                    "description": "Enabled state.",
                    "type": "Boolean"
                }
            ],
            "class": "jsPlumbToolkit.Widgets.Lasso"
        },
        {
            "file": "src/layout.js",
            "line": 195,
            "description": "Magnetize the display. You must indicate what sort of magnetization you wish to perform: if you provide an event,\nthe event's location will be the magnetization origin. If you provide `origin:{left;xxx, top:xxx}`, that value will be used. If\nyou provide neither, the computed center of all elements will be used. You can also provide an `options:{...}` value, whose\nvalues can contain `filter`, `constrain` and `padding` values for the specific run of the magnetizer.",
            "params": [
                {
                    "name": "params",
                    "description": "Magnetize parameters. If ommitted, the origin of magnetization will be the computed center of all the elements.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "event",
                            "description": "If provided, the event location will be used as the origin of magnetization.",
                            "type": "Event",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "An object with `left` and `top` properties. If provided, will be used as the origin of magnetization.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "description": "Extra magnetizer options for this run of the magnetizer.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 213,
            "description": "Called by components to inform a layout that a new node was added. You should never\ncall this method directly. Also, you should not override this method in a custom layout: if your layout\nneeds to track node addition, implement `_nodeAdded` instead.",
            "itemtype": "method",
            "name": "nodeAdded",
            "params": [
                {
                    "name": "params",
                    "description": "Method args",
                    "type": "Object",
                    "props": [
                        {
                            "name": "node",
                            "description": "Node that was added",
                            "type": "Node"
                        },
                        {
                            "name": "el",
                            "description": "The DOM element associated with the Node.",
                            "type": "Element"
                        }
                    ]
                },
                {
                    "name": "eventInfo",
                    "description": "Optional information associated with the Event that the host system needs to pass through without adding to the data model.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 239,
            "description": "Optional method for subclasses to override should they wish to be informed of node addition.",
            "itemtype": "method",
            "name": "_nodeAdded",
            "params": [
                {
                    "name": "params",
                    "description": "Method args",
                    "type": "Object",
                    "props": [
                        {
                            "name": "node",
                            "description": "Node that was added",
                            "type": "Node"
                        },
                        {
                            "name": "data",
                            "description": "Data associated with the Node",
                            "type": "Object"
                        },
                        {
                            "name": "el",
                            "description": "The DOM element associated with the Node.",
                            "type": "Element"
                        }
                    ]
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 248,
            "description": "Called by components to inform a layout that a given node was removed. You should never\ncall this method directly.",
            "itemtype": "method",
            "name": "nodeRemoved",
            "params": [
                {
                    "name": "nodeId",
                    "description": "Id of the the node that was removed.",
                    "type": "String"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 262,
            "description": "Optional method for subclasses to implement if they wish to be informed of node removal.",
            "itemtype": "method",
            "name": "_nodeRemoved",
            "params": [
                {
                    "name": "nodeId",
                    "description": "Id of the the node that was removed.",
                    "type": "String"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 268,
            "description": "Optional method for subclasses to implement if they wish to be informed of a node having moved.",
            "itemtype": "method",
            "name": "_nodeMoved",
            "params": [
                {
                    "name": "nodeId",
                    "description": "Id of the the Node that was moved.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "New X location of the Node.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "New Y location of the Node.",
                    "type": "Number"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 276,
            "description": "Gets the size of the node with given id, caching it for later use.",
            "itemtype": "method",
            "name": "getSize",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the node to retrieve size for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Width and height of the Node in an array.",
                "type": "Number[]"
            },
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 295,
            "description": "Gets the position of the node with given id, creating it (as a random value) if null and optionally setting values.\nnote this method does a 'pass by reference' thing as the return value - any changes you make will\nbe used by the final layout step (this is a good thing). Note that here it is fine to work with\nthe node's id, as we are not going anywhere near a DOM element yet. When it comes time to\nactually set a DOM element's position, we use the supplied `getElementForNode` function to\nget it.  And of course note also that we are not necessarily dealing with DOM elements.",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Node to retrieve the position for",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "Optional X location for the Node if its position has not yet been set.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "Optional Y location for the Node if its position has not yet been set.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "doNotRandomize",
                    "description": "If true, won't set a random position for an element whose position is not yet being tracked.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 327,
            "description": "Sets the Position of the Node with the given ID.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Node to set the position for",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "X location for the Node.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location for the Node.",
                    "type": "Number"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 435,
            "description": "This is an abstract function that subclasses may implement if they wish. It will be called at the beginning of a layout.",
            "itemtype": "method",
            "name": "begin",
            "abstract": "",
            "params": [
                {
                    "name": "_jsPlumbToolkit",
                    "description": "The associated jsPlumbToolkit instance",
                    "type": "JsPlumbToolkitInstance"
                },
                {
                    "name": "parameters",
                    "description": "Parameters configured for the layout.",
                    "type": "Object"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 444,
            "description": "This is an abstract function that subclasses may implement if they wish. It will be called at the end of a layout.",
            "itemtype": "method",
            "name": "end",
            "abstract": "",
            "params": [
                {
                    "name": "_jsPlumbToolkit",
                    "description": "The associated jsPlumbToolkit instance",
                    "type": "JsPlumbToolkitInstance"
                },
                {
                    "name": "parameters",
                    "description": "Parameters configured for the layout.",
                    "type": "Object"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 480,
            "description": "Runs the layout, first doing a reset of element positions. Next, if the subclass has defined a `begin` method, that will\nbe called first.  Then, the subclass's `step` method will be called repeatedly, until the subclass makes a call to `_super.setDone`.\nUse the `layout` method to run the layout incrementally without first resetting everything.",
            "itemtype": "method",
            "name": "relayout",
            "params": [
                {
                    "name": "newParameters",
                    "description": "Optional new set of parameters to apply.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "onComplete",
                    "description": "Optional function to call on completion of relayout.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 495,
            "description": "Runs the layout, without resetting calculated or user-provided positions beforehand.\nIf the subclass has defined a `begin` method, that will be called first.  Then, the subclass's\n`step` method will be called repeatedly, until the subclass makes a call to `_super.setDone`.",
            "itemtype": "method",
            "name": "layout",
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 506,
            "description": "Resets user-supplied and calculated positions.",
            "itemtype": "method",
            "name": "clear",
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "src/layout.js",
            "line": 630,
            "description": "Set the layout on which to base this layout.",
            "class": "Layouts.Mistletoe"
        },
        {
            "file": "src/layout.js",
            "line": 683,
            "description": "Gets the position for the given Node as dictated by either the `left`/`top` properties, or some other nominated pair, in the node's data.\nThis position is what the Absolute layout uses itself, and this method exposes the absolute position for subclasses that wish to make use\nof the absolute backing.",
            "params": [
                {
                    "name": "v",
                    "description": "Node to get absolute position for.",
                    "type": "Node"
                },
                {
                    "name": "parameters",
                    "description": "Constructor parameters. May contain a custom `locationFunction`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Number[]"
            },
            "class": "Layouts.AbsoluteBackedLayout"
        },
        {
            "file": "src/layouts-circular.js",
            "line": 1,
            "name": "jsPlumbToolkit.Layouts.Circular",
            "desc": "Provides a circular layout.",
            "class": "Layouts.Hierarchical"
        },
        {
            "file": "src/layouts-circular.js",
            "line": 5,
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "padding",
                            "description": "Minimum distance between a node and its neighbours. Defaults to 30 pixels.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "30"
                        }
                    ]
                }
            ],
            "class": "Layouts.Hierarchical"
        },
        {
            "file": "src/layouts-hierarchical.js",
            "line": 230,
            "description": "Gets the computed hierarchy. This is returned as an array of objects, one for each level, inside which\nthere is a `nodes` array.",
            "itemtype": "method",
            "name": "getHierarchy",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Layouts.Hierarchical"
        },
        {
            "file": "src/layouts-hierarchical.js",
            "line": 238,
            "description": "Gets the orientation of the layout - \"horizontal\" or \"vertical\".",
            "return": {
                "description": "\"horizontal\" or \"vertical\"",
                "type": "String"
            },
            "class": "Layouts.Hierarchical"
        },
        {
            "file": "src/miniview.js",
            "line": 211,
            "description": "Sets whether or not the miniview is visible. Strictly speaking you don't need to use this method;\nyou can just control the miniview's container via your own CSS or whatever. But the Surface uses this\noccasionally, and there is also the concept of having the miniview initially invisible until the\nrelated surface contains some data.",
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "src/miniview.js",
            "line": 223,
            "description": "Gets the current [left,top] of the panned content.",
            "itemtype": "method",
            "name": "getPan",
            "return": {
                "description": "[left,top], in pixels, of the panned content, where [0,0] is the origin of the viewport.",
                "type": "Number[]"
            },
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "src/miniview.js",
            "line": 240,
            "description": "Forces a repaint of every element.",
            "itemtype": "method",
            "name": "invalidate",
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "src/miniview.js",
            "line": 254,
            "description": "Sets whether or not the miniview is currently suspended, ie. will not respond\nto changes.",
            "itemtype": "method",
            "name": "setSuspended",
            "params": [
                {
                    "name": "s",
                    "description": "Suspended or not.",
                    "type": "Boolean"
                },
                {
                    "name": "updateAfterwards",
                    "description": "If true, will update the state after changing the suspended state. Only makes sense to use this if you are unsuspending the widget.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "src/miniview.js",
            "line": 266,
            "description": "Instructs the miniview to update its state.",
            "itemtype": "method",
            "name": "update",
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "src/miniview.js",
            "line": 313,
            "description": "Update the host layout for this miniview",
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 180,
            "description": "Sets whether or not rendering is suspended, which for the moment means that when updateBounds is\ncalled, the widget doesn't sort the bounds, since we know there will be more changes to the\npositions and/or sizes of elements.",
            "params": [
                {
                    "name": "val",
                    "description": "True to suspend rendering, false to re-enable rendering. If an update was called during the\ntime that rendering was suspended, the positions are sorted once rendering is re-enabled."
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 354,
            "description": "Decodes the page location from the given event, taking touch devices into account.",
            "itemtype": "method",
            "name": "pageLocation",
            "return": {
                "description": "[left, top] of the given event.",
                "type": "Integer[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 691,
            "description": "Programmatically report a down event in order to kick the widget into action.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "e",
                    "description": "Mouse event to use to kick things off.",
                    "type": "Event"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 806,
            "description": "Registers that an element has changed position, updating bounds info as necessary.",
            "itemtype": "method",
            "name": "positionChanged",
            "params": [
                {
                    "name": "el",
                    "description": "Element that has just moved.",
                    "type": "Element"
                },
                {
                    "name": "pos",
                    "description": "New position. If this is omitted, it will be calculated.",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "id",
                    "description": "Optional id of the element. This might be called from a context in which\nthe id is known already, so we can save some work.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 821,
            "description": "Adds the given element to those that this widget is tracking.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "el",
                    "description": "Element to begin tracking.",
                    "type": "Element"
                },
                {
                    "name": "id",
                    "description": "Optional id of the element. This might be called from a context in which\nthe id is known already, so we can save some work.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "pos",
                    "description": "Optional location for the node.  If not provided, the position will be retrieved from a call to the DOM.",
                    "type": "Number[]",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 837,
            "description": "Removes the given element from the list this widget is tracking. Note that this widget does\nnot remove the element from the DOM.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "el",
                    "description": "Element to stop tracking.",
                    "type": "Selector|Element"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 863,
            "description": "Removes all tracked elements and resets the widget.",
            "itemtype": "method",
            "name": "reset",
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 877,
            "description": "Gets the current bounds information.",
            "itemtype": "method",
            "name": "getBoundsInfo",
            "return": {
                "description": "An object with these fields:\nw - width of the content\nh - height of the content\nx - minimum x value of all nodes in the content\ny - minimum y value of all nodes in the content\nvw - width of the viewport\nvh - height of the viewport\npadding - padding around the content (an array)\nz - smallest zoom that could result in all the content being visible inside the viewport\nzoom - current zoom",
                "type": "Object"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 893,
            "description": "Zooms the display so that all the tracked elements fit inside the viewport. This method will also,\nby default, increase the zoom if necessary - meaning the default behaviour is to adjust the zoom so that\nthe content fills the viewport. You can suppress zoom increase by setting `doNotZoomIfVisible:true` on the\nparameters to this method.",
            "itemtype": "method",
            "name": "zoomToFit",
            "params": [
                {
                    "name": "params.padding",
                    "description": "Optional padding to leave around all elements.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "20"
                },
                {
                    "name": "params.onComplete",
                    "description": "Optional function to call on operation complete (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.onStep",
                    "description": "Optional function to call on operation step (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.doNotAnimate",
                    "description": "By default, the centering content step does not use animation. This is due to this method being used most often to initially setup a UI.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "params.doNotZoomIfVisible",
                    "description": "If true, no action is taken if the content is currently all visible.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "params.doNotFirePanEvent",
                    "description": "If true, a pan event will not be fired.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 923,
            "description": "Zooms the display so that all the tracked elements fit inside the viewport, but does not make any adjustments\nto zoom if all the elements are currently visible (it still does center the content though).",
            "itemtype": "method",
            "name": "zoomToFitIfNecessary",
            "params": [
                {
                    "name": "[params.padding",
                    "description": "= 20] Optional padding to leave around all elements.",
                    "type": "Number"
                },
                {
                    "name": "params.onComplete",
                    "description": "Optional function to call on operation complete (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.onStep",
                    "description": "Optional function to call on operation step (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.doNotAnimate",
                    "description": "By default, the centering content step does not use animation. This is due to this method being used most often to initially setup a UI.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 938,
            "description": "Zooms the display so that all the given elements fit inside the viewport.",
            "itemtype": "method",
            "name": "zoomToElements",
            "params": [
                {
                    "name": "zParams",
                    "description": "",
                    "props": [
                        {
                            "name": "elements",
                            "description": "List of DOM elements to zoom to.",
                            "type": "Element[]"
                        },
                        {
                            "name": "doNotZoomIfVisible",
                            "description": "If true and the widget determines the entire selection is already\nvisible, the zoom will not be adjusted.",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 980,
            "description": "Zooms the display so that the background fits inside the viewport.",
            "itemtype": "method",
            "name": "zoomToBackground",
            "params": [
                {
                    "name": "params.onComplete",
                    "description": "Optional function to call on operation complete (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.onStep",
                    "description": "Optional function to call on operation step (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.doNotAnimate",
                    "description": "If true, centering content will not use animation.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1009,
            "description": "Sets (or clears) the filter that will be called if the widget needs to know whether to respond to an event that would\nstart a pan. By default, the widget responds to down events on the viewport or the canvas, but not on child nodes. You\ncan supply a function that the widget will call in the event that the down event did not occur on the viewport or the canvas;\nreturning true from this function will cause the pan to begin.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "filterFn",
                    "description": "Function to set as the filter; may be null if you wish to clear it. The function should return true if it wants to honour the down event on the given element.",
                    "type": "Function"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1023,
            "description": "Position the widget so the background is centered in the viewport, without changing the current zoom.",
            "itemtype": "method",
            "name": "centerBackground",
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1046,
            "description": "Positions the widget so that the edges of the background align with the viewport. This method is useful for\nsnapping to a corner of the background.",
            "itemtype": "method",
            "name": "alignBackground",
            "params": [
                {
                    "name": "axes",
                    "description": "Spec for the axes to align to. This should be a space-separated string containing a value\nfor the x (allowed values `left` and `right`) and, optionally, y (allowed values `top` and `bottom`) axes. The\ndefault value is `\"left top\"`.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1071,
            "description": "Places (using `style.left` and `style.top`) the given element at the given x,y, which is taken to\nmean an x,y value on the canvas.  At zoom 1, with no panning, this will be the same as the given x,y value\nrelative to the viewport origin.  But once the canvas has been zoomed and panned we have to map\nto the altered coordinates. This function also takes into account the difference between the offset of the\nviewport in the page and the offset of the given element. It is assumed, just because of what this method\ndoes, that the given element will be positioned `absolute`, but this method does nothing to ensure that.",
            "itemtype": "method",
            "name": "positionElementAt",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "x",
                    "description": "X location on canvas to move element's left edge to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location on canvas to move element's top edge to.",
                    "type": "Number"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "ensureOnScreen",
                    "description": "If true, will ensure that x and y positions are never negative.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1105,
            "description": "Places (using `style.left` and `style.top`) the given element at the given page x,y.  It is assumed, just because of what this method\ndoes, that the given element will be positioned `absolute`, but this method does nothing to ensure that.",
            "itemtype": "method",
            "name": "positionElementAt",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "x",
                    "description": "X location on canvas to move element's left edge to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location on canvas to move element's top edge to.",
                    "type": "Number"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1120,
            "description": "Places (using `style.left` and `style.top`) the given element at the page x,y corresponding to the given event.  It is assumed, just because of what this method\ndoes, that the given element will be positioned `absolute`, but this method does nothing to ensure that.",
            "itemtype": "method",
            "name": "positionElementAt",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "evt",
                    "description": "Event to position element at.",
                    "type": "Event"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1134,
            "description": "Zooms the component by the given increment, centered on the location at which the given event occurred.",
            "itemtype": "method",
            "name": "zoomToEvent",
            "params": [
                {
                    "name": "e",
                    "description": "Browser event",
                    "type": "Event"
                },
                {
                    "name": "increment",
                    "description": "Amount to zoom by (a positive or negative number). If this takes the component out of the current zoom range, it will be clamped.",
                    "type": "Number"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1145,
            "description": "Tells the widget that a relayout has occurred. If panning is\ndisabled, the widget will move the canvas element so that all\ncontent is visible, and adjust the transform origin so that the ui\nzooms from the apparent top left corner.",
            "itemtype": "method",
            "name": "relayout",
            "params": [
                {
                    "name": "boundsInfo",
                    "description": "Bounds information, in the same format as the `getBoundsInfo` method returns.",
                    "type": "Object"
                },
                {
                    "name": "doNotAnimate",
                    "description": "If true, the widget will not animate the change.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1169,
            "description": "Nudges the zoom by the given amount. Zoom will be clamped to the current zoom range in effect and the\nvalue that was ultimately set is returned from this function.",
            "itemtype": "method",
            "name": "nudgeZoom",
            "params": [
                {
                    "name": "delta",
                    "description": "Amount to change zoom by. The value you pass in here is multiplied by\n100 to give a percentage value: 1 is 100%, for instance, 0.05 is 5%. You can pass in negative numbers to\nzoom out.",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "Original event that caused the nudge. May be null.",
                    "type": "Event",
                    "optional": true
                }
            ],
            "return": {
                "description": "The zoom that was set. Zoom will be clamped to the allowed range.",
                "type": "Number"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1191,
            "description": "Nudges the wheel zoom by the given amount. This function is intended for use by components that control\nzoom via the mouse wheel, and not for general usage. See `nudgeZoom` for a more general version of this.",
            "itemtype": "method",
            "name": "nudgeWheelZoom",
            "params": [
                {
                    "name": "delta",
                    "description": "Amount to change zoom by.",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "Original event that caused the nudge. May be null.",
                    "type": "Event",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1203,
            "description": "Centers the tracked content inside the viewport, but does not adjust the current zoom.",
            "itemtype": "method",
            "name": "centerContent",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bounds",
                            "description": "Bounds info. This is in an internal format and only used when this method is called by the widget itself. Otherwise it is calculated.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, don't animate while centering.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotFirePanEvent",
                            "description": "If true, a pan event will not be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1241,
            "description": "Centers the tracked content inside the viewport horizontally, but does not adjust the current zoom.",
            "itemtype": "method",
            "name": "centerContentHorizontally",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bounds",
                            "description": "Bounds info. This is in an internal format and only used when this method is called by the widget itself. Otherwise it is calculated.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, don't animate while centering.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotFirePanEvent",
                            "description": "If true, a pan event will not be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1255,
            "description": "Centers the tracked content inside the viewport vertically, but does not adjust the current zoom.",
            "itemtype": "method",
            "name": "centerContentVertically",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bounds",
                            "description": "Bounds info. This is in an internal format and only used when this method is called by the widget itself. Otherwise it is calculated.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, don't animate while centering.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotFirePanEvent",
                            "description": "If true, a pan event will not be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1269,
            "description": "Centers the given element in the viewport, vertically and/or horizontally.",
            "itemtype": "method",
            "name": "centerOn",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                },
                {
                    "name": "params",
                    "description": "Optional extra parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontal",
                            "description": "Whether or not to center horizontally",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "vertical",
                            "description": "Whether or not to center vertically",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, animation will not be switched on for the operation.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional on complete callback",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional on animation step callback.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "fillRatio",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.4"
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1309,
            "description": "Centers the given element in the viewport, horizontally only.",
            "itemtype": "method",
            "name": "centerOnHorizontally",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1318,
            "description": "Centers the given element in the viewport, vertically only.",
            "itemtype": "method",
            "name": "centerOnHorizontally",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1327,
            "description": "Centers on the given element and then adjusts the zoom of the widget so that the short axis of the viewport\nis [1 / fillRatio] larger than its corresponding axis on the centered node. `fillRatio` is basically\na measure of how much context you want to see around the node on which you centered.",
            "itemtype": "method",
            "name": "centerOnAndZoom",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                },
                {
                    "name": "fillRatio",
                    "description": "Proportional ratio of the corresponding node's edge to the viewport's short edge.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.6"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1361,
            "description": "Gets the canvas location that corresponds to the center of the viewport.  Note that this may describe\na point outside of the content bounds.",
            "itemtype": "method",
            "name": "getViewportCenter",
            "return": {
                "description": "left,top location of the logical position on the canvas corresponding to the center of the viewport.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1379,
            "description": "Sets the location of the canvas such that the given point appears at the center of the viewport.",
            "itemtype": "method",
            "name": "setViewportCenter",
            "params": [
                {
                    "name": "xy",
                    "description": "left, top location of the point on the canvas to position in the center of the viewport.",
                    "type": "Number[]"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1397,
            "description": "Sets whether or not the widget clamps the movement of the canvas during pan/zoom\nto ensure that the managed content never disappears from view.",
            "itemtype": "method",
            "name": "setClamping",
            "params": [
                {
                    "name": "clamp",
                    "description": "Whether or not to clamp movement.",
                    "type": "Boolean"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1407,
            "description": "Sets the current zoom, clamping it to the allowed range.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "z",
                    "description": "Zoom value. If this is outside the allowed bounds it will be clamped.",
                    "type": "Number"
                },
                {
                    "name": "dontFireEvent",
                    "description": "If true, a zoom event will not be fired.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Current zoom. This may or may not be the value you asked for - it might have been clamped to the current allowed zoom range.",
                "type": "Number"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1418,
            "description": "Sets the current zoom range. By default, this method checks if the current zoom is within\nthe new range, and if it is not then `setZoom` is called, which will cause the zoom to be clamped\nto an allowed value in the new range. You can disable this by passing `true` for `doNotClamp`.",
            "itemtype": "method",
            "name": "setZoomRange",
            "params": [
                {
                    "name": "zr",
                    "description": "New range, as an array consisting of [lower, upper] values. Lower must be less than upper.",
                    "type": "Number[]"
                },
                {
                    "name": "doNotClamp",
                    "description": "If true, will not check the current zoom to ensure it falls within the new range.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1438,
            "description": "Gets the current zoom range.",
            "itemtype": "method",
            "name": "getZoomRange",
            "return": {
                "description": "Array of [min, max] zoom values.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1447,
            "description": "Gets the current zoom.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "Current zoom value",
                "type": "Number"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1456,
            "description": "Gets the current [left,top] of the panned content.",
            "itemtype": "method",
            "name": "getPan",
            "return": {
                "description": "[left,top], in pixels, of the panned content, where [0,0] is the origin of the viewport.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1465,
            "description": "Pans the content by dx and dy.",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "dx",
                    "description": "Amount to pan in X direction",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "Amount to pan in Y direction",
                    "type": "Number"
                },
                {
                    "name": "[animate",
                    "description": "= false] Whether or not to animate the pan.",
                    "type": "Boolean"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1480,
            "description": "Sets the position of the panned content's origin.",
            "itemtype": "method",
            "name": "setPan",
            "params": [
                {
                    "name": "left",
                    "description": "Position in pixels of the left edge of the panned content.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Position in pixels of the top edge of the panned content.",
                    "type": "Number"
                },
                {
                    "name": "[animate",
                    "description": "= false] Whether or not to animate the pan.",
                    "type": "Boolean"
                },
                {
                    "name": "onComplete",
                    "description": "If `animate` is set to true, an optional callback for the end of the pan.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onStep",
                    "description": "If `animate` is set to true, an optional callback for each frame in the pan.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1493,
            "description": "Sets the current transform origin, in pixels. Used mainly to support save/restore state.",
            "itemtype": "method",
            "name": "setTransformOrigin",
            "params": [
                {
                    "name": "left",
                    "description": "Position of the X coordinate of the transform origin.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Position of the Y coordinate of the transform origin.",
                    "type": "Number"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1505,
            "description": "Maps the given page location to a value relative to the viewport origin, allowing for\nzoom and pan of the canvas. This takes into account the offset of the viewport in the page so that what\nyou get back is the mapped position relative to the target element's [left,top] corner. If\nyou wish, you can supply true for 'doNotAdjustForOffset', to suppress that behavior.",
            "itemtype": "method",
            "name": "mapLocation",
            "params": [
                {
                    "name": "left",
                    "description": "X location",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Y location",
                    "type": "Number"
                },
                {
                    "name": "doNotAdjustForOffset",
                    "description": "Whether or not to adjust for the offset of the viewport in the page.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1529,
            "description": "Maps the page location of the given event to a value relative to the viewport origin, allowing for\nzoom and pan of the canvas. This takes into account the offset of the viewport in the page so that what\nyou get back is the mapped position relative to the target element's [left,top] corner. If\nyou wish, you can supply true for 'doNotAdjustForOffset', to suppress that behavior.",
            "itemtype": "method",
            "name": "mapEventLocation",
            "params": [
                {
                    "name": "event",
                    "description": "Browser event",
                    "type": "Event"
                },
                {
                    "name": "doNotAdjustForOffset",
                    "description": "Whether or not to adjust for the offset of the viewport in the page.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1543,
            "description": "Sets whether or not the component should respond to mouse events.",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "state",
                    "description": "Whether or not to respond to mouse events.",
                    "type": "Boolean"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1552,
            "description": "Takes some element that is in the DOM and moves it so that it appears at the given x,y over the canvas,\nallowing for the current zoom and pan.  It is expected that the element is not one that is currently\nmanaged by the widget - a common use case for this is some dialog, which you do not want to append to\nthe canvas since it would have the zoom effect applied.",
            "itemtype": "method",
            "name": "showElementAt",
            "params": [
                {
                    "name": "el",
                    "description": "Selector, DOM element or element id representing the element to move.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "x",
                    "description": "X location to move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location to move to.",
                    "type": "Number"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1574,
            "description": "Returns the apparent [left,top] of the canvas inside the viewport - the coordinates, in real pixel\nvalues, of where the origin of the canvas appears to be. This apparent origin is not necessarily the\nsame as the [left,top] values of the canvas, because the transform origin and zoom values change\nthings.  This function can be used in conjunction with the content bounds by widgets such as the miniview, to calculate what is actually visible in the\nviewport at some point in time.",
            "itemtype": "method",
            "name": "getApparentCanvasLocation",
            "return": {
                "description": "[Integer[]] [left,top] of the canvas, relative to the viewport's 0,0."
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1590,
            "description": "Sets the apparent canvas location - see the notes for getApparentCanvasLocation.",
            "itemtype": "method",
            "name": "setApparentCanvasLocation",
            "params": [
                {
                    "name": "left",
                    "description": "Value in pixels for left edge of canvas.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Value in pixels for top edge of canvas.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[left,top] of the actual origin set, after clamping.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1605,
            "description": "Applies either the widget's current zoom to the given element, or some supplied zoom.",
            "itemtype": "method",
            "name": "applyZoomToElement",
            "params": [
                {
                    "name": "el",
                    "description": "Element to set zoom on.",
                    "type": "Element"
                },
                {
                    "name": "zoomToSet",
                    "description": "Optional zoom value; if omitted we use the widget's current zoom.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1616,
            "description": "Sets the transform origin for some element. This is really just exposed as a helper, since\nthere seems little point in reinventing the wheel if you have this widget in your codebase and you\nneed to perform this operation.  The Miniview uses this, for instance.",
            "itemtype": "method",
            "name": "setTransFormOriginForElement",
            "params": [
                {
                    "name": "el",
                    "description": "Element to set transform origin for.",
                    "type": "Element"
                },
                {
                    "name": "xy",
                    "description": "Transform origin for element.",
                    "type": "Number[]"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1628,
            "description": "Gets the current transform origin, in an object of the form `[ left, top ]`. The coordinate space is pixels.",
            "itemtype": "method",
            "name": "getTransformOrigin",
            "return": {
                "description": "[left,top] values for the transform origin.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1637,
            "description": "Appends an element to the viewport so that it floats above the content that is being zoomed and panned.\nThe element will have `position:absolute` set on it. You can float any element you like, but note that the\nresponsibility for setting an appropriate z index is yours.",
            "params": [
                {
                    "name": "el",
                    "description": "Element to float.",
                    "type": "Element"
                },
                {
                    "name": "pos",
                    "description": "Array of [x,y] positions.",
                    "type": "Number[]"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1677,
            "description": "Appends an element to the content such that it is zoomed with everything else, but constrains pan\nin one or both axes so that the element remains fixed with respect to the viewport origin.",
            "itemtype": "method",
            "name": "fixElement",
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element to append.",
                    "type": "Element"
                },
                {
                    "name": "constraints",
                    "description": "Flags to indicate optional constraint to each axis.",
                    "type": "Object"
                },
                {
                    "name": "pos",
                    "description": "[left,top] location of the element's origin.",
                    "type": "Number[]"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1701,
            "description": "Finds all nodes that intersect to any extent the rectangle defined by the given origin\nand dimensions. This rectangle is taken to be in the coordinate space of the page, ie. a value\nof [0,0] for the origin means the page's top/left corner. A future version could take an optional\nthird argument specifying the element whose origin to use.",
            "itemtype": "method",
            "name": "findIntersectingNodes",
            "params": [
                {
                    "name": "origin",
                    "description": "[x,y] location for center of search. IMPORTANT: This is relative to the page origin.",
                    "type": "Number[]"
                },
                {
                    "name": "dimensions",
                    "description": "Width and height of search area.",
                    "type": "Number[]"
                },
                {
                    "name": "enclosed",
                    "description": "If true, returns only nodes that are enclosed by the given search area. Otherwise returns nodes that both intersect and are enclosed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "filter",
                    "description": "Optional filter function. This is passed the (id, node, boundingRect) of some element and should return true for elements that should be included in results.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A list of objects containing {id:id, el:element, r:bounding rect} that either intersect or are enclosed by the search area.",
                "type": "Object[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1738,
            "description": "Finds all nodes whose centers are within a rectangle with `origin` as its center, and\na width and height of `radius / 2`.",
            "itemtype": "method",
            "name": "findNearbyNodes",
            "params": [
                {
                    "name": "origin",
                    "description": "[x,y] location for center of search. IMPORTANT: This is relative to the page origin.",
                    "type": "Number[]"
                },
                {
                    "name": "radius",
                    "description": "Radius of search.",
                    "type": "Number"
                },
                {
                    "name": "mustBeInViewport",
                    "description": "If true, first check that the given origin is within the viewport.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "filter",
                    "description": "Optional filter function. Should return true for elements that should be included in results.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A list of objects containing {id:id, el:element, r:bounding rect}, sorted in ascending order of distance of the center of the bounding rectangle from the given origin.",
                "type": "Object[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1772,
            "description": "Returns whether or not the given point (relative to page origin) is within the viewport for the widget.",
            "itemtype": "method",
            "name": "isInViewport",
            "params": [
                {
                    "name": "x",
                    "description": "X location of point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location of point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if the point is within the viewport, false if not.",
                "type": "Boolean"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1787,
            "description": "Returns the current map of element ids -> positions.",
            "itemtype": "method",
            "name": "getElementPositions",
            "return": {
                "description": "Map of { id->[x,y]} positions.",
                "type": "Object"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1796,
            "description": "Sets the filter used to determine whether or not a given event should begin a pan.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "f",
                    "description": "A function that will be given the current mouse event. You must return true from the function if you wish for a pan to begin.",
                    "type": "Function"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1807,
            "description": "Sets the filter used to determine whether or not a given wheel event should be responded to.",
            "itemtype": "method",
            "name": "setWheelFilter",
            "params": [
                {
                    "name": "f",
                    "description": "A function that will be given the current mouse event. You must return false from the function if you wish for the wheel event to be responded to.",
                    "type": "Function"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1818,
            "description": "Sets the background for the canvas element.",
            "itemtype": "method",
            "name": "setBackground",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "img",
                            "description": "Image to use. Optional; you can also supply an image url",
                            "type": "Image",
                            "optional": true
                        },
                        {
                            "name": "url",
                            "description": "Image URL.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "\"tiled\" or \"simple\": whether to use a single background image or to tile it.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"simple\""
                        },
                        {
                            "name": "tiling",
                            "description": "Default is \"logarithmic\": each layer is assumed to have a maximum of\n(2^level+1) tiles in each axis (for instance at level 0, 2 tiles in each axis.  Alternatively you can\nset this to be \"absolute\", which means that at the maximum zoom level the number of tiles in each axis\nis computed as the size of the image in that axis divided by the tile size in that axis (rounded up of course).\nThen at subsequent levels below, the",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"logarithmic\""
                        },
                        {
                            "name": "onBackgroundReady",
                            "description": "Optional function to call when the image has loaded.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "src/pan-zoom-widget.js",
            "line": 1856,
            "description": "Gets the current background layer.",
            "return": {
                "description": "current background layer. you can use the `getWidth` and `getHeight` methods on this object to find out the background size.",
                "type": "Object"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "src/path.js",
            "line": 1,
            "description": "Models a Path - the series of edges and intermediate nodes between two nodes or ports\nin some toolkit of the Toolkit.",
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 17,
            "is_constructor": 1,
            "params": [
                {
                    "name": "toolkit",
                    "description": "toolkit instance from which to get the path info.",
                    "type": "JsPlumbToolkittoolkit"
                },
                {
                    "name": "params",
                    "description": "Path spec params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source node or port, or id of source node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "target",
                            "description": "Target node or port, or id of target node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "strict",
                            "description": "Sets whether or not paths are searched strictly by the given source/target. If, for toolkit, you supply a node as the source, but there are only edges connected to ports on that node, by default these edges will be ignored. Switching `strict` to false will mean these edges are considered.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "nodeFilter",
                            "description": "Optional function that is given each Node's backing data and asked to return true or false - true means include the Node, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeFilter",
                            "description": "Optional function that is given each Edge's backing data and asked to return true or false - true means include the Edge, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 99,
            "description": "Iterates through the path one step at a time. Each step consists of an object containing a\n`vertex`, and, for all entries except the first, an `edge` member, which supplies the Edge that links\nto the Vertex (which is why it is null for the first entry).",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call for each step. Arguments are `(index, {vertex:v,edge:e})`.",
                    "type": "Function"
                }
            ],
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 112,
            "description": "Iterates through the Nodes/Ports in the path one step at a time.",
            "itemtype": "method",
            "name": "eachNode",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call for each step. Arguments are `(index, Node|Port)`.",
                    "type": "Function"
                }
            ],
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 123,
            "description": "Iterates through the Edges in the path one step at a time. There is always one fewer Edges than Nodes/Ports.",
            "itemtype": "method",
            "name": "eachEdge",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call for each step. Arguments are `(index, Edge)`.",
                    "type": "Function"
                }
            ],
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 134,
            "description": "Gets the number of Nodes in the Path.",
            "itemtype": "method",
            "name": "getNodeCount",
            "return": {
                "description": "Number of Nodes in the Path.",
                "type": "Integer"
            },
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 143,
            "description": "Gets the Node at the given index in the path.",
            "itemtype": "method",
            "name": "getNodeAt",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 153,
            "description": "Gets the number of Edges in the Path.",
            "itemtype": "method",
            "name": "getEdgeCount",
            "return": {
                "description": "Number of Edges in the Path.",
                "type": "Integer"
            },
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 162,
            "description": "The Path from the underlying Graph. See Graph documentation.",
            "itemtype": "property",
            "name": "path",
            "type": "{Graph.Path}",
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 169,
            "description": "Deletes every Edge in this Path from the underlying Toolkit toolkit.",
            "itemtype": "method",
            "name": "deleteEdges",
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 175,
            "description": "Deletes every Node in this Path from the underlying Toolkit toolkit.  Note that this has the\neffect of also deleting all the Edges, so this is analogous to #deleteAll.",
            "itemtype": "method",
            "name": "deleteNodes",
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 182,
            "description": "Deletes every object in this Path from the underlying Toolkit toolkit.",
            "itemtype": "method",
            "name": "deleteAll",
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 188,
            "description": "Returns whether or not a given path is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "True if path is empty, false otherwise.",
                "type": "Boolean"
            },
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 197,
            "description": "Returns the cost of a given path, computed as the sum of the cost of all of the edges in the path.",
            "itemtype": "method",
            "name": "getCost",
            "return": {
                "description": "Total cost of the Path. Null if path does not exist.",
                "type": "Number"
            },
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 206,
            "description": "Returns whether or not a Path contains the given object.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "Node/Port/Edge,",
                    "description": "or object id, of the element to test for.",
                    "type": "Node|Port|Edge|String"
                },
                {
                    "name": "doNotFuzzyMatchNodes",
                    "description": "If true, will return true iff a given Node is on the Path. Otherwise,\nif the test object is a Node that has a Port on the Path, this method will return true.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "True if Path contains the object, false otherwise.",
                "type": "Boolean"
            },
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 216,
            "description": "Returns whether or not a given path exists.",
            "itemtype": "method",
            "name": "exists",
            "return": {
                "description": "True if path exists, false otherwise.",
                "type": "Boolean"
            },
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 225,
            "description": "Select a set of edges.",
            "itemtype": "method",
            "name": "selectEdges",
            "params": [
                {
                    "name": "params",
                    "description": "parameters for the select call",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source Node or id of source Node from which to select Edges.",
                            "type": "Node|String",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "Target Node or id of target Node from which to select Edges.",
                            "type": "Node|String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Path"
        },
        {
            "file": "src/path.js",
            "line": 236,
            "description": "Select all edges in the toolkit toolkit.",
            "itemtype": "method",
            "name": "selectAllEdges",
            "params": [
                {
                    "name": "params",
                    "description": "Parameters for the selectAllEdges call.",
                    "type": "Object"
                }
            ],
            "class": "Path"
        },
        {
            "file": "src/pinch-listener.js",
            "line": 1,
            "description": "Pinch listener for all touch browsers - ipad, android, and windows laptops/surfaces. Needless to say,\nevery browser does it differently. IE10+ uses PointerEvents; ipad safari/windows chrome/ipad chrome/\nandroid chrome use TouchEvents.  The listener posts pinchstart, pinch happening, and pinch end events.",
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 1,
            "description": "Models a selection of Nodes/Ports end Edges.",
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 16,
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "toolkit",
                            "description": "jsPlumb Toolkit instance to which this Selection belongs.",
                            "type": "JsPlumbToolkitInstance"
                        },
                        {
                            "name": "generator",
                            "description": "Optional function that can be called to fill the selection. You'd use this\nwhen you are rendering individual selections and you need to be able to refresh the whole view based on some\nchange in the data model.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onClear",
                            "description": "Optional function to call when the selection is cleared.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 199,
            "description": "Removes the given object from the selection.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": "Object(s) to remove. May take many forms - a Node, Node Id, or Edge, or a list of these,\nor a Path.",
                    "type": "Node|Edge|Node[]|Edge[]|Path"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 209,
            "description": "Appends the given object to the selection.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "obj",
                    "description": "Object(s) to add. May take many forms - a Node, Node Id, or Edge, or a list of these,\nor a Path.",
                    "type": "Node|Edge|Node[]|Edge[]|Path"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 219,
            "description": "Toggles the given object's membership in the current selection. If `obj` is a Path, then the individual\nmembers of the Path are toggled independently.",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "obj",
                    "description": "Object(s) to add. May take many forms - a Node, Node Id, or Edge, or a list of these,\nor a Path.",
                    "type": "Node|Edge|Node[]|Edge[]|Path"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 230,
            "description": "Sets the maximum number of nodes the selection can hold. The action taken when appending a node that would\ntake the selection above its limit depends on the current `capacityPolicy`, which can be either\nSelection.DISCARD_EXISTING (the default) or Selection.DISCARD_NEW.",
            "itemtype": "method",
            "name": "setMaxNodes",
            "params": [
                {
                    "name": "_maxNodes",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 241,
            "description": "Sets the maximum number of edges the selection can hold. The action taken when appending an edge that would\ntake the selection above its limit depends on the current `capacityPolicy`, which can be either\nSelection.DISCARD_EXISTING (the default) or Selection.DISCARD_NEW.",
            "itemtype": "method",
            "name": "setMaxEdges",
            "params": [
                {
                    "name": "_maxEdges",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 252,
            "description": "Sets the action taken when appending an edge or node that would\ntake the selection above its limit for that given type. Depends on the current `capacityPolicy`,\nwhich can be either `jsPlumbToolkitUtil.Selection.DISCARD_EXISTING` (the default) or `jsPlumbToolkitUtil.Selection.DISCARD_NEW`.",
            "itemtype": "method",
            "name": "setCapacityPolicy",
            "params": [
                {
                    "name": "policy",
                    "description": "One of `jsPlumbToolkitUtil.Selection.DISCARD_EXISTING` (which removes the 0th entry from the list\nbefore insertion of the new value) or `jsPlumbToolkitUtil.Selection.DISCARD_NEW`.",
                    "type": "String"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 264,
            "description": "Clears this selection.",
            "itemtype": "method",
            "name": "clear",
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 275,
            "description": "Reloads the content of this Selection, if a `generator` was supplied to the constructor. Otherwise\ndoes nothing. A data load start event is fired first, followed by a call to the generator to repopulate,\nand then a data load end event is fired.  So calling this method on a Selection that you are rendering\nto a Surface will cause the Surface to repaint itself.",
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 296,
            "description": "Iterates the objects of the given type in the selection, calling the supplied callback\nfor each item. The callback's signature should be `function(index, item)`. If you don't supply\n`type`, the default of \"Node\" will be used.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call with each item.",
                    "type": "Function"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"Node\""
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 316,
            "description": "Iterates the Nodes in the selection, calling the supplied callback\nfor each item. The callback's signature should be `function(index, item)`.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call with each item.",
                    "type": "Function"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 324,
            "description": "Iterates the Edges in the selection, calling the supplied callback\nfor each item. The callback's signature should be `function(index, item)`.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call with each item.",
                    "type": "Function"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 334,
            "description": "Get the current number of Nodes in the selection.",
            "itemtype": "method",
            "name": "getNodeCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 343,
            "description": "Gets the node at the given index.",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of the Node to retrieve. Will return null if index out of range."
                }
            ],
            "return": {
                "description": "A Node, or null.",
                "type": "Node"
            },
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 352,
            "description": "Gets all the Nodes in the Selection.",
            "return": {
                "description": "",
                "type": "Node[]"
            },
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 372,
            "description": "Get the current number of Edges in the selection.",
            "itemtype": "method",
            "name": "getEdgeCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 381,
            "description": "Gets the Node/Port at the given index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of the Node/Port to retrieve.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Node/Port at the given index, null if nothing found at that index.",
                "type": "Object"
            },
            "class": "Selection"
        },
        {
            "file": "src/selection.js",
            "line": 391,
            "description": "Gets the Edge at the given index.",
            "itemtype": "method",
            "name": "getEdge",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of the Edge to retrieve.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Edge at the given index, null if nothing found at that index.",
                "type": "Object"
            },
            "class": "Selection"
        },
        {
            "file": "src/support.js",
            "line": 19,
            "description": "Ingests an existing jsPlumb instance into a new Toolkit instance, and turns the instance's Container into a Surface.  Every element\nthat is the source or target of a Connection is added to the Toolkit instance as a Node, and every Connection is added as an Edge. You\ncan provide your own functions for determining the `id` and `type` of Nodes and Edges, if you need to. This method will throw an error\nif your jsPlumb instance does not have a Container set; it is a requirement for the Surface widget.",
            "itemtype": "method",
            "name": "ingest",
            "static": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jsPlumb",
                            "description": "The instance of jsPlumb to ingest. If null, it uses the static jsPlumb window instance.",
                            "type": "JsPlumbInstance",
                            "optional": true
                        },
                        {
                            "name": "nodeSelector",
                            "description": "Optional selector to identify elements that may not yet be managed by jsPlumb but which you would like to have imported as Nodes.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "idFunction",
                            "description": "A function to use to extract the id from elements that are being loaded as Nodes. If null,\n                                      the default behaviour is to ask the jsPlumb instance for the element's `id` attribute.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "typeFunction",
                            "description": "A function to use to extract the type from elements that are being loaded as Nodes. If null,\n                                      the default behaviour is to use `default` as the Node type.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeIdFunction",
                            "description": "A function to use to extract the id from Connections that are being loaded as Edges. If null,\n                                      the default behaviour is to use the Connection's `id`.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeTypeFunction",
                            "description": "A function to use to extract the type from Connections that are being loaded as Edges. If null,\n                                      the default behaviour is to use `default` as the Edge type.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "renderParams",
                            "description": "Parameters to pass to the Surface constructor.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "render",
                            "description": "If false, this method returns only a Toolkit instance with data loaded, and doesn't create a Surface renderer for it.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "A Surface instance whose underlying Toolkit has been loaded with the contents of the jsPlumb instance (you can access the Toolkit itself via `surface.getToolkit()`), or, if `render` was set to false, a `jsPlumbToolkitInstance`..",
                "type": "JsPlumbToolkitInstance|Surface"
            },
            "class": "jsPlumbToolkit.Support"
        },
        {
            "file": "src/surface.js",
            "line": 72,
            "description": "Constant for the Select mode.",
            "itemtype": "property",
            "name": "SELECT",
            "type": "{String}",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 78,
            "description": "Constant for the Pan mode.",
            "itemtype": "property",
            "name": "PAN",
            "type": "{String}",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 84,
            "description": "Constant for the Disabled mode.",
            "itemtype": "property",
            "name": "DISABLED",
            "type": "{String}",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 411,
            "description": "Zooms the display so that all the tracked elements fit inside the viewport. This method will also,\nby default, increase the zoom if necessary - meaning the default behaviour is to adjust the zoom so that\nthe content fills the viewport. You can suppress zoom increase by setting `doNotZoomIfVisible:true` on the\nparameters to this method.",
            "itemtype": "method",
            "name": "zoomToFit",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "padding",
                            "description": "Optional padding to leave around all elements.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "20"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "By default, the centering content step does not use animation. This is due to this method being used most often to initially setup a UI.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "doNotZoomIfVisible",
                            "description": "If true, no action is taken if the content is currently all visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "doNotFirePanEvent",
                            "description": "If true, a pan event will not be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 427,
            "description": "Zooms the display so that all the tracked elements fit inside the viewport, but does not make any adjustments\nto zoom if all the elements are currently visible (it still does center the content though).",
            "itemtype": "method",
            "name": "zoomToFitIfNecessary",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "By default, the centering content step does not use animation. This is due to this method being used most often to initially setup a UI.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "[params.padding",
                    "description": "= 20] Optional padding to leave around all elements.",
                    "type": "Number"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 439,
            "description": "Zooms the display so that the current selected nodes are all visible.",
            "itemtype": "method",
            "name": "zoomToSelection",
            "params": [
                {
                    "name": "params",
                    "description": "Optional method params",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "doNotZoomIfVisible",
                            "description": "If true and the widget determines the entire selection is already\nvisible, the zoom will not be adjusted.",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 457,
            "description": "Zooms the display so that the background fits inside the viewport.",
            "itemtype": "method",
            "name": "zoomToBackground",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, centering content will not use animation.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 467,
            "description": "Centers the given object in the viewport. You can pass in a DOM element or a Toolkit Node here.",
            "itemtype": "method",
            "name": "centerOn",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to center in the viewport - a Node, Element, or Node id.",
                    "type": "Node|Element|String"
                },
                {
                    "name": "params",
                    "description": "Optional extra parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontal",
                            "description": "Whether or not to center horizontally",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "vertical",
                            "description": "Whether or not to center vertically",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, animation will not be switched on for the operation.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional on complete callback",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional on animation step callback.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 483,
            "description": "Centers the given element in the viewport, horizontally only.",
            "itemtype": "method",
            "name": "centerOnHorizontally",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 492,
            "description": "Centers the given element in the viewport, vertically only.",
            "itemtype": "method",
            "name": "centerOnHorizontally",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 501,
            "description": "Centers on the given element and then adjusts the zoom of the widget so that the short axis of the viewport\nis [1 / fillRatio] larger than its corresponding axis on the centered node. `fillRatio` is basically\na measure of how much context you want to see around the node on which you centered.",
            "itemtype": "method",
            "name": "centerOnAndZoom",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                },
                {
                    "name": "fillRatio",
                    "description": "Proportional ratio of the corresponding node's edge to the viewport's short edge.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.6"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 514,
            "description": "Centers the content in the viewport.",
            "itemtype": "method",
            "name": "centerContent",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 520,
            "description": "Centers the content in the viewport horizontally.",
            "itemtype": "method",
            "name": "centerContentHorizontally",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 526,
            "description": "Centers the content in the viewport vertically.",
            "itemtype": "method",
            "name": "centerContentVertically",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 532,
            "description": "Gets the canvas location that corresponds to the center of the viewport.  Note that this may describe\na point outside of the content bounds.",
            "itemtype": "method",
            "name": "getViewportCenter",
            "return": {
                "description": "left,top location of the logical position on the canvas corresponding to the center of the viewport.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 540,
            "description": "Sets the location of the canvas such that the given point appears at the center of the viewport.",
            "itemtype": "method",
            "name": "setViewportCenter",
            "params": [
                {
                    "name": "xy",
                    "description": "left, top location of the point on the canvas to position in the center of the viewport.",
                    "type": "Number[]"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 547,
            "description": "Sets the default handle to use for state save/restore operations.",
            "itemtype": "method",
            "name": "setStateHandle",
            "params": [
                {
                    "name": "handle",
                    "description": "Handle to use.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 556,
            "description": "Gets the default handle to use for state save/restore operations.",
            "itemtype": "method",
            "name": "getStateHandle",
            "return": {
                "description": "Handle in use.",
                "type": "String"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 565,
            "description": "Sets the current lasso selection filter function.",
            "itemtype": "method",
            "name": "setLassoSelectionFilter",
            "params": [
                {
                    "name": "fn",
                    "description": "A function that takes Nodes as argument and returns false if the Node should not be\nselected. Any other return value will cause the Node to be selected.",
                    "type": "Function"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 575,
            "description": "Returns the apparent [left,top] of the canvas inside the viewport - the coordinates, in real pixel\nvalues, of where the origin of the canvas appears to be. This apparent origin is not necessarily the\nsame as the [left,top] values of the canvas, because the transform origin and zoom values change\nthings.  This function can be used in conjunction with the content bounds by widgets such as the miniview,\nto calculate what is actually visible in the viewport at some point in time.",
            "itemtype": "method",
            "name": "getApparentCanvasLocation",
            "return": {
                "description": "[Number[]] [left,top] of the canvas, relative to the viewport's 0,0."
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 586,
            "description": "Sets the apparent canvas location - see the notes for getApparentCanvasLocation.",
            "itemtype": "method",
            "name": "setApparentCanvasLocation",
            "params": [
                {
                    "name": "left",
                    "description": "Value in pixels for left edge of canvas.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Value in pixels for top edge of canvas.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[left,top] of the actual origin set, after clamping.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 595,
            "description": "Gets the current bounds information.",
            "itemtype": "method",
            "name": "getBoundsInfo",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 601,
            "description": "Sets the current zoom, clamping it to the allowed range.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "Zoom value. If this is outside the allowed bounds it will be clamped.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Current zoom. This may or may not be the value you asked for - it might have been clamped to the current allowed zoom range.",
                "type": "Number"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 609,
            "description": "Sets the current zoom range. By default, this method checks if the current zoom is within\nthe new range, and if it is not then `setZoom` is called, which will cause the zoom to be clamped\nto an allowed value in the new range. You can disable this by passing `true` for `doNotClamp`.",
            "itemtype": "method",
            "name": "setZoomRange",
            "params": [
                {
                    "name": "zr",
                    "description": "New range, as an array consisting of [lower, upper] values. Lower must be less than upper.",
                    "type": "Number[]"
                },
                {
                    "name": "doNotClamp",
                    "description": "If true, will not check the current zoom to ensure it falls within the new range.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 619,
            "description": "Gets the current zoom range.",
            "itemtype": "method",
            "name": "getZoomRange",
            "return": {
                "description": "Array of [min, max] zoom values.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 626,
            "description": "Gets the current zoom.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "Current zoom value",
                "type": "Number"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 633,
            "description": "Nudges the zoom by the given amount. Zoom will be clamped to the current zoom range in effect and the\nvalue that was ultimately set is returned from this function. The value you pass in here is multiplied by\n100 to give a percentage value: 1 is 100%, for instance, 0.05 is 5%.",
            "itemtype": "method",
            "name": "nudgeZoom",
            "params": [
                {
                    "name": "delta",
                    "description": "Amount to change zoom by.",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "Original event that caused the nudge. May be null.",
                    "type": "Event",
                    "optional": true
                }
            ],
            "return": {
                "description": "The zoom that was set. Zoom will be clamped to the allowed range.",
                "type": "Number"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 644,
            "description": "Nudges the wheel zoom by the given amount. This function is intended for use by components that control\nzoom via the mouse wheel, and not for general usage. See `nudgeZoom` for a more general version of this.",
            "itemtype": "method",
            "name": "nudgeWheelZoom",
            "params": [
                {
                    "name": "delta",
                    "description": "Amount to change zoom by.",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "Original event that caused the nudge. May be null.",
                    "type": "Event",
                    "optional": true
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 653,
            "description": "Decodes the page location from the given event, taking touch devices into account.",
            "itemtype": "method",
            "name": "pageLocation",
            "return": {
                "description": "[left, top] of the given event.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 660,
            "description": "Gets the current [left,top] of the panned content.",
            "itemtype": "method",
            "name": "getPan",
            "return": {
                "description": "[left,top], in pixels, of the panned content, where [0,0] is the origin of the viewport.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 667,
            "description": "Pans the content by dx and dy.",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "dx",
                    "description": "Amount to pan in X direction",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "Amount to pan in Y direction",
                    "type": "Number"
                },
                {
                    "name": "[animate",
                    "description": "= false] Whether or not to animate the pan.",
                    "type": "Boolean"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 676,
            "description": "Sets the position of the panned content's origin.",
            "itemtype": "method",
            "name": "setPan",
            "params": [
                {
                    "name": "left",
                    "description": "Position in pixels of the left edge of the panned content.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Position in pixels of the top edge of the panned content.",
                    "type": "Number"
                },
                {
                    "name": "[animate",
                    "description": "= false] Whether or not to animate the pan.",
                    "type": "Boolean"
                },
                {
                    "name": "onComplete",
                    "description": "If `animate` is set to true, an optional callback for the end of the pan.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onStep",
                    "description": "If `animate` is set to true, an optional callback for each frame in the pan.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 693,
            "description": "Sets the filter used to determine whether or not a given event should begin a pan.",
            "itemtype": "method",
            "name": "setPanFilter",
            "params": [
                {
                    "name": "f",
                    "description": "Either a CSS selector to use as a whitelist on the event target, or a function that will be given the target of the current mouse event. You must return true from the function if you wish for a pan to begin.",
                    "type": "String|Function"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 708,
            "description": "Sets the filter used to determine whether or not a given wheel event should be responded to.",
            "itemtype": "method",
            "name": "setWheelFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "A CSS selector to use as a blacklist on the event target.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 726,
            "description": "Maps the given page location to an [x,y] location in the Surface's canvas.",
            "itemtype": "method",
            "name": "mapLocation",
            "params": [
                {
                    "name": "x",
                    "description": "X location to map",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location to map",
                    "type": "Number"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 734,
            "description": "Maps the page location of the given event to an [x,y] location in the Surface's canvas.",
            "itemtype": "method",
            "name": "mapEventLocation",
            "params": [
                {
                    "name": "e",
                    "description": "Event to map",
                    "type": "Event"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 741,
            "description": "Finds all nodes whose centers are within a rectangle with `origin` as its center, and\na width and height of `radius / 2`.",
            "itemtype": "method",
            "name": "findNearbyNodes",
            "params": [
                {
                    "name": "x,y",
                    "description": "location for center of search",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "Radius",
                    "description": "of search.",
                    "type": "Number"
                },
                {
                    "name": "mustBeInViewport",
                    "description": "If true, first check that the given origin is within the viewport.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "filter",
                    "description": "Optional filter function. This is passed the (id, node, boundingRect) of some element and should return true for elements that should be included in results.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A list of objects containing {id:id, el:element, r:bounding rect}, sorted in ascending order of distance of the center of the bounding rectangle from the given origin.",
                "type": "Object[]"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 753,
            "description": "Finds all nodes that intersect to any extent the rectangle defined by the given origin\nand dimensions. This rectangle is taken to be in the coordinate space of the document, ie. a value\nof [0,0] for the origin means the document's top/left corner. A future version could take an optional\nthird argument specifying the element whose origin to use.",
            "itemtype": "method",
            "name": "findIntersectingNodes",
            "params": [
                {
                    "name": "origin",
                    "description": "[x,y] location for center of search",
                    "type": "Number[]"
                },
                {
                    "name": "dimensions",
                    "description": "Width and height of search area.",
                    "type": "Number[]"
                },
                {
                    "name": "enclosed",
                    "description": "If true, returns only nodes that are enclosed by the given search area. Otherwise returns nodes that both intersect and are enclosed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "A list of objects containing {id:id, el:element, r:bounding rect} that either intersect or are enclosed by the search area.",
                "type": "Object[]"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 766,
            "description": "Returns whether or not the given point (relative to page origin) is within the viewport for the widget.",
            "itemtype": "method",
            "name": "isInViewport",
            "params": [
                {
                    "name": "x",
                    "description": "X location of point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location of point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if the point is within the viewport, false if not.",
                "type": "Boolean"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 775,
            "description": "Places (using `style.left` and `style.top`) the given element at the given x,y, which is taken to\nmean an [x,y] value on the canvas.  At zoom 1, with no panning, this will be the same as the given [x,y] value\nrelative to the viewport origin.  But once the canvas has been zoomed and panned we have to map\nto the altered coordinates. This function also takes into account the difference between the offset of the\nviewport in the page and the offset of the given element. It is assumed, just because of what this method\ndoes, that the given element will be positioned `absolute`, but this method does nothing to ensure that.\nNote that this method - and its relatives, `positionElementAtEventLocation` and `positionElementAtPageLocation` - are\nnot intended for use with elements being managed by the Surface. They are for use with external\nelements that you need to align with the contents of the Surface.",
            "itemtype": "method",
            "name": "positionElementAt",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "x",
                    "description": "X location on canvas to move element's left edge to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location on canvas to move element's top edge to.",
                    "type": "Number"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 794,
            "description": "Places (using `style.left` and `style.top`) the given element at the page x,y corresponding to the given\nevent.  It is assumed, just because of what this method does, that the given element will be positioned\n`absolute`, but this method does nothing to ensure that. Note that this method - and its relatives,\n`positionElementAt` and `positionElementAtPageLocation` - are not intended for use with elements being\nmanaged by the Surface. They are for use with external elements that you need to align with the contents\nof the Surface.",
            "itemtype": "method",
            "name": "positionElementAtEventLocation",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "evt",
                    "description": "Event to position element at.",
                    "type": "Event"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 809,
            "description": "Places (using `style.left` and `style.top`) the given element at the given page x,y.  It is assumed, just\nbecause of what this method does, that the given element will be positioned `absolute`, but this method\ndoes nothing to ensure that. Note that this method - and its relatives, `positionElementAtEventLocation`\nand `positionElementAt` - are not intended for use with elements being managed by the Surface. They are\nfor use with external elements that you need to align with the contents of the Surface.",
            "itemtype": "method",
            "name": "positionElementAtPageLocation",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "x",
                    "description": "X location on canvas to move element's left edge to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location on canvas to move element's top edge to.",
                    "type": "Number"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 824,
            "description": "Sets (or clears) the filter that will be called if the widget needs to know whether to respond to an event that would\nstart a pan. By default, the widget responds to down events on the viewport or the canvas, but not on child nodes. You\ncan supply a function that the widget will call in the event that the down event did not occur on the viewport or the canvas;\nreturning true from this function will cause the pan to begin.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "filterFn",
                    "description": "Function to set as the filter; may be null if you wish to clear it. The function should return true if it wants to honour the down event on the given element.",
                    "type": "Function"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 834,
            "description": "Appends an element to the viewport so that it floats above the content that is being zoomed and panned.\nThe element will have `position:absolute` set on it. You can float any element you like, but note that the\nresponsibility for setting an appropriate z index is yours.",
            "itemtype": "method",
            "name": "floatElement",
            "params": [
                {
                    "name": "el",
                    "description": "Element to float.",
                    "type": "Element"
                },
                {
                    "name": "pos",
                    "description": "Array of [x,y] positions.",
                    "type": "Number[]"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 844,
            "description": "Appends an element to the content such that it is zoomed with everything else, but constrains pan\nin one or both axes so that the element remains fixed with respect to the viewport origin.",
            "itemtype": "method",
            "name": "fixElement",
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element to append.",
                    "type": "Element"
                },
                {
                    "name": "constraints",
                    "description": "Flags to indicate optional constraint to each axis.",
                    "type": "Object"
                },
                {
                    "name": "pos",
                    "description": "[left,top] location of the element's origin.",
                    "type": "Number[]"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 881,
            "description": "Traces the given overlay along either a given path, or the shortest path\nfrom a specified `source` to a specified `target` (if such a path exists).\nIf there is no path nothing happens (except for a debug trace, if you have debugging enabled on\nthe Toolkit instance via `toolkit.setDebugEnabled(true)`)",
            "params": [
                {
                    "name": "params",
                    "description": "Options for the trace.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "path",
                            "description": "Path to trace.",
                            "type": "Path",
                            "optional": true
                        },
                        {
                            "name": "source",
                            "description": "Source of traversal. May be a Node or Port, or a DOM element or element id. Supply this if you do not supply `path`.",
                            "type": "String|Element|Node|Port",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "Target of traversal. May be a Node or Port, or a DOM element or element id. Supply this if you do not supply `path`.",
                            "type": "String|Element|Node|Port",
                            "optional": true
                        },
                        {
                            "name": "overlay",
                            "description": "This is in the format accepted by the Community edition of jsPlumb.",
                            "type": "String|Object"
                        },
                        {
                            "name": "options",
                            "description": "Options for animation.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "dwell",
                                    "description": "How long, in milliseconds, to dwell on each node as the overlay traverses the path.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "250"
                                },
                                {
                                    "name": "speed",
                                    "description": "How many pixels per second to travel. *Note*: this is in seconds, not milliseconds.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "100"
                                },
                                {
                                    "name": "rate",
                                    "description": "Frame rate, in milliseconds.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "30"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "True if the path existed and was traced. False otherwise.",
                "type": "Boolean"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 957,
            "description": "Returns a map of element ids -> positions.",
            "return": {
                "description": "Map of { id->[x,y]} positions.",
                "type": "Object"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1073,
            "description": "Sets the current mode - \"pan\", \"select\" or \"disabled\", then fires an event notifying any listeners subscribed to the `modeChanged` event.",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "mode",
                    "description": "Mode to set. Must be one of Surface.PAN, Surface.SELECT or Surface.DISABLED.",
                    "type": "String"
                },
                {
                    "name": "doNotClearSelection",
                    "description": "By default, when switching _into_ Select mode, the current selection is cleared. Setting this to false prevents the selection from being cleared.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1110,
            "description": "Selects a set of edges. If you supply a DOM element for any of the arguments here, the underlying graph object - a Node or a Port - will be\ndetermined, and the edges for that object will be retrieved.  Note that for a Port this method does the same thing as\n`selectAllEdges`, but for a Node, which may have Ports registered on it, this method will retrieve only the Edges directly\nregistered on the Node itself.  You may need to use `selectAllEdges` if you want everything from some Node.",
            "itemtype": "method",
            "name": "selectEdges",
            "params": [
                {
                    "name": "params",
                    "description": "Selection parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "Target node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        },
                        {
                            "name": "element",
                            "description": "Source or target node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1125,
            "description": "Selects a set of Edges.  Parameters are the same as for selectEdges; the difference here is that when you're working with\nNodes, this method will return all of the Node's Edges as well as those of all the Ports registered on the Node.",
            "itemtype": "method",
            "name": "selectAllEdges",
            "params": [
                {
                    "name": "params",
                    "description": "Selection parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "Target node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        },
                        {
                            "name": "element",
                            "description": "Source or target node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1139,
            "description": "Repaints the element for the given object.",
            "itemtype": "method",
            "name": "repaint",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to repaint, including any associated connections. This can be\na Toolkit Node or Port, a String (representing a Node or Node.Port id), a DOM element, or a selector from the support library\nmodelling a DOM element.",
                    "type": "String|Port|Node|Element|Selector"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1155,
            "description": "Repaints every element in the UI.",
            "itemtype": "method",
            "name": "repaintEverything",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1161,
            "description": "Sets whether or not elements will be made draggable. This does not disable dragging on elements\nthat are already draggable.",
            "itemtype": "method",
            "name": "setElementsDraggable",
            "params": [
                {
                    "name": "d",
                    "description": "If false, elements will not be made draggable. If null or true, they will.",
                    "type": "Boolean"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1307,
            "description": "Allows you to register a list of droppables that can be dropped onto the surface. This function also supports\nconfiguring the Surface to accept files dragged from the user's desktop, but it is limited to supporting one file\nat a time.",
            "itemtype": "method",
            "name": "registerDroppableNodes",
            "params": [
                {
                    "name": "params",
                    "description": "Parameters for droppables, including node list, drop options etc",
                    "type": "Object",
                    "props": [
                        {
                            "name": "typeExtractor",
                            "description": "Optional function to use to extract the related node type for some element that was dropped on the Surface.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "dataGenerator",
                            "description": "Optional function to use to generate some initial data for a node of some given type. The function is passed `type` as argument, which _may be null_, so program defensively.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "droppables",
                            "description": "List of elements identifying the elements to be configured as droppable. Either provide this,\nor provide `source` and `selector`. It is only in this latter case that you will be able to call `refresh` to\nsubsequently add newly added elements to the set of droppables.",
                            "type": "Element[]",
                            "optional": true
                        },
                        {
                            "name": "source",
                            "description": "Source element on which to execute `querySelectorAll` with the given `selector`\nin order to get the list of elements to be configured as droppable.",
                            "type": "Element",
                            "optional": true
                        },
                        {
                            "name": "selector",
                            "description": "Selector that specifies child nodes of `source` that should be configured as droppable.",
                            "type": "Element",
                            "optional": true
                        },
                        {
                            "name": "dragOptions",
                            "description": "Optional set of drag options, in a format specific to your underlying library.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "dropOptions",
                            "description": "Optional set of drop options, in a format specific to your underlying library.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "start",
                            "description": "Function to call when a droppable starts to be dragged.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "drag",
                            "description": "Function to call as a droppable is being dragged.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "stop",
                            "description": "Function to call when a droppable stops being dragged.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "drop",
                            "description": "Function to call when a droppable has been dropped, *before* the Toolkit code is run. Returning false from this function causes the drop to be aborted.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1333,
            "description": "Creates a miniview that is associated with this Surface.",
            "itemtype": "method",
            "name": "createMiniview",
            "params": [
                {
                    "name": "params",
                    "description": "Miniview parameters. See Minview docs.",
                    "type": "Object"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1375,
            "description": "Gets the current Miniview, if there is one. There may not be.",
            "itemtype": "method",
            "name": "getMiniview",
            "return": {
                "description": "Current Miniview, null if no Miniview is registered.",
                "type": "Miniview"
            },
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1388,
            "description": "Writes the current location of each node in the UI to local storage (using either a cookie or html5 storage,\ndepending on browser capabilities). You pass this function a 'handle' argument, which is used to restore the state\nat some stage in the future.",
            "itemtype": "method",
            "name": "State.save",
            "params": [
                {
                    "name": "handle",
                    "description": "The handle to save the state as, If this is not supplied, and `stateHandle` was supplied as a constructor parameter, that is used instead.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "preprocessor",
                    "description": "Optional preprocessor which is given the serialized state, and a callback function, before saving to localStorage. Useful if you wish to compress the data, for instance.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1410,
            "description": "Serializes the UI state to a String.",
            "itemtype": "method",
            "name": "State.serialize",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1430,
            "description": "Restores the UI state to the state it was in when it was saved with the given handle. If the handle does not\nexist, nothing happens. It is possible a future incarnation of this could support animating a UI back to some state.",
            "itemtype": "method",
            "name": "State.restore",
            "params": [
                {
                    "name": "handle",
                    "description": "The handle to restore the state from, If this is not supplied, and `stateHandle` was supplied as a constructor parameter, that is used instead.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "preprocessor",
                    "description": "Optional preprocessor which is given the serialized state before saving to localStorage. Useful if you wish to compress the data, for instance.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1453,
            "description": "Restores the UI state to the serialized state given.",
            "itemtype": "method",
            "name": "State.deserialize",
            "params": [
                {
                    "name": "value",
                    "description": "Serialized state.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1476,
            "description": "Clears the state that was stored against the given handle.",
            "itemtype": "method",
            "name": "State.clear",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1486,
            "description": "Removes all saved UI state information.",
            "itemtype": "method",
            "name": "State.clearAll",
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1495,
            "description": "Saves the current state of the UI, either to local storage or a cookie, depending on the browser's capabilities.",
            "itemtype": "method",
            "name": "saveState",
            "params": [
                {
                    "name": "handle",
                    "description": "The handle to save the state as, If this is not supplied, and `stateHandle` was supplied as a constructor parameter, that is used instead.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1507,
            "description": "Restores the current state of the UI, either from local storage or a cookie, depending on the browser's capabilities.",
            "itemtype": "method",
            "name": "restoreState",
            "params": [
                {
                    "name": "handle",
                    "description": "The handle to restore the state from, If this is not supplied, and `stateHandle` was supplied as a constructor parameter, that is used instead.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/surface.js",
            "line": 1518,
            "description": "Clears the state stored by the given handle.",
            "itemtype": "method",
            "name": "clearState",
            "params": [
                {
                    "name": "handle",
                    "description": "The handle to restore the state from. If this is not supplied, and `stateHandle` was supplied as a constructor parameter, that is used instead.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "src/templates.js",
            "line": 1,
            "description": "functionality to support template loading from script tags (browser only)\n\ncopyright 2015 jsPlumbToolkit.com",
            "class": ""
        },
        {
            "file": "src/util.js",
            "line": 1,
            "description": "jsPlumbToolkit utility functions, used both in browser and on server.\nDependencies\njsPlumbUtil (does this depend on browser at all? it shouldnt.)",
            "class": ""
        },
        {
            "file": "src/wheel-listener.js",
            "line": 2,
            "description": "Wheel listener. Normalises wheel events across browsers.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/anim.js:34"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/browser-util.js:67"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/graph.js:132"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/graph.js:145"
        },
        {
            "message": "unknown tag: desc",
            "line": " src/graph.js:199"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/jsPlumbToolkit-angular.js:329"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/jsPlumbToolkit-angular.js:329"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/jsPlumbToolkit-angular.js:341"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/jsPlumbToolkit-angular.js:353"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/jsPlumbToolkit.js:503"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/jsPlumbToolkit.js:1604"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/layout.js:76"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/layout.js:435"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/layout.js:444"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/layout.js:683"
        },
        {
            "message": "unknown tag: name",
            "line": " src/layouts-circular.js:1"
        },
        {
            "message": "unknown tag: desc",
            "line": " src/layouts-circular.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/layouts-hierarchical.js:230"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/layouts-hierarchical.js:238"
        },
        {
            "message": "unknown tag: constructorg",
            "line": " src/miniview.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/path.js:143"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/selection.js:343"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/selection.js:352"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/surface.js:881"
        },
        {
            "message": "Missing item type\nTraces the given overlay along the Connection.",
            "line": " src/anim.js:34"
        },
        {
            "message": "Missing item type\nUtility functions that run only in browsers, and are not included in a headless environment build.",
            "line": " src/browser-util.js:1"
        },
        {
            "message": "Missing item type\nAdapter for a normal DOM element",
            "line": " src/components.js:169"
        },
        {
            "message": "Missing item type\nSets whether or not rendering is suspended. This actually does not mean that new nodes are not\nadded, but it does mean that the panzoom widget is informed not to do any work involving element\npostions or sizes.",
            "line": " src/components.js:509"
        },
        {
            "message": "Missing item type\nMagnetize the display. You must indicate what sort of magnetization you wish to perform: if you provide an event,\nthe event's location will be the magnetization origin. If you provide `origin:{left;xxx, top:xxx}`, that value will be used. If\nyou provide neither, the computed center of all elements will be used. You can also provide an `options:{...}` value, whose\nvalues can contain `filter`, `constrain` and `padding` values for the specific run of the magnetizer.",
            "line": " src/components.js:1261"
        },
        {
            "message": "Missing item type\nGets a Path from some source Node/Port to some target Node/Port. This method is a wrapper around the\nToolkit's `getPath` method, adding a `setVisible` function to the result.",
            "line": " src/components.js:1318"
        },
        {
            "message": "Missing item type\nSets the position of the given node, animating the element to that position.",
            "line": " src/components.js:1723"
        },
        {
            "message": "Missing item type\nAdd the given Node to the posse with the given name",
            "line": " src/components.js:1818"
        },
        {
            "message": "Missing item type\nRemove the given Node from the given Posse.",
            "line": " src/components.js:1833"
        },
        {
            "message": "Missing item type\nRemove the given Node from all Posses to which it belongs.",
            "line": " src/components.js:1845"
        },
        {
            "message": "Missing item type\njsPlumbToolkit.Dialogs\n\nA library for providing simple dialogs to use with an instance of the jsPlumb Toolkit.  This is not packaged in the\ncore Toolkit file and does not form part of any jsPlumb support agreement.",
            "line": " src/dialogs.js:1"
        },
        {
            "message": "Missing item type\nClears the given set",
            "line": " src/dialogs.js:442"
        },
        {
            "message": "Missing item type\nOptional extra functionality for use with the jsPlumb Toolkit. This provides a set of\ndrawing tools - select, drag, resize. Everything this tool adds to the UI has an associated\nCSS class, so you can skin it very easily.",
            "line": " src/drawing.js:1"
        },
        {
            "message": "Missing item type\nReturns a string representation of the Node.",
            "line": " src/graph.js:396"
        },
        {
            "message": "Missing item type\nReturns a string representation of the Edge.",
            "line": " src/graph.js:544"
        },
        {
            "message": "Missing item type\nGets the type for some data, by running it through the current typeFunction.",
            "line": " src/graph.js:615"
        },
        {
            "message": "Missing item type\nSets whether or not Nodes are Graphs themselves, and can have child Nodes. If you enable this\nthen you cannot use slashes (/) in your Node ids, as they will be treated as components of a path\nto a Node in a nested Graph.",
            "line": " src/graph.js:623"
        },
        {
            "message": "Missing item type\nGets the current port separator.",
            "line": " src/graph.js:643"
        },
        {
            "message": "Missing item type\nFor some given node, get a subset of edges that match the given filter function.",
            "line": " src/graph.js:893"
        },
        {
            "message": "Missing item type\nfinds the Vertex in the 'dist' table that has not yet been computed and has the smallest cost so far.",
            "line": " src/graph.js:1215"
        },
        {
            "message": "Missing item type\nassembles a path to the given target, using data from the 'dist' and 'previous' tables.  the source of the path is the source that was most recently passed in to the\nDjikstra.compute method.",
            "line": " src/graph.js:1242"
        },
        {
            "message": "Missing item type\nAn implementation of the Djikstra shortest path algorithm. The algorithm has been modified\nslightly to handle Ports on Nodes.",
            "line": " src/graph.js:1352"
        },
        {
            "message": "Missing item type\nCreate an instance of the jsPlumb Toolkit.",
            "line": " src/jsPlumbToolkit-angular.js:34"
        },
        {
            "message": "Missing item type\nGets the current NodeFactory.",
            "line": " src/jsPlumbToolkit.js:160"
        },
        {
            "message": "Missing item type\nGets the current EdgeFactory.",
            "line": " src/jsPlumbToolkit.js:167"
        },
        {
            "message": "Missing item type\nSets the current EdgeFactory.",
            "line": " src/jsPlumbToolkit.js:191"
        },
        {
            "message": "Missing item type\nSets the current PortFactory.",
            "line": " src/jsPlumbToolkit.js:198"
        },
        {
            "message": "Missing item type\nSets whether or not the original dataset will be updated whenever a node/edge is removed or added. This functionality is suspended\nwhen a `load` operation is taking place. Note that for this functionality to work there must be a `manager` registered for the given\ndata type in jsPlumbToolkitIO. The Toolkit ships with a manager for the default `json` datatype, but if you have your own custom\ndatatype you will need to provide one of these to support this functionality. See the documentation on data loading for a full\ndiscussion.",
            "line": " src/jsPlumbToolkit.js:284"
        },
        {
            "message": "Missing item type\nReturns the type function that is currently in use.",
            "line": " src/jsPlumbToolkit.js:296"
        },
        {
            "message": "Missing item type\nGets the type of the given Object. This is not a type such as `Node`, `Port` or `Edge` - this is the type of the\nobject as defined by your system to identify types; these are the types used to lookup objects in the model.",
            "line": " src/jsPlumbToolkit.js:503"
        },
        {
            "message": "Missing item type\nAdds a Node by type, running the data generation for the node through the current NodeFactory.  This is\ndifferent from `addNode` in that with `addNode` you are supplying the final data and your NodeFactory is\nnot called. This method can be called with one, two or three arguments. A single argument is considered to be\nthe new Node's `type`, and a backing data object will be created with this set, and no callback will occur.\nIf you provide two arguments the second argument may be either the new Node's backing data OR a callback to\nhit with the newly created Node. With three arguments the second argument is the Node's backing data and the\nthird is a callback to hit with the newly created Node.",
            "line": " src/jsPlumbToolkit.js:558"
        },
        {
            "message": "Missing item type\nSuspends rendering and then runs the given function, unsuspending rendering afterwards and doing\na refresh. This method is just a convenience method that handles suspending\nand subsequent enabling of rendering. You might use this if you're adding a whole load of Nodes or\nEdges, or maybe you want to add a Node and one or more Edges before\nthe layout recomputes.",
            "line": " src/jsPlumbToolkit.js:841"
        },
        {
            "message": "Missing item type\nUpdates the given object, notifying any renderers to do a repaint.",
            "line": " src/jsPlumbToolkit.js:922"
        },
        {
            "message": "Missing item type\nGets a Path from some source Node/Port to some target Node/Port.",
            "line": " src/jsPlumbToolkit.js:945"
        },
        {
            "message": "Missing item type\nGets all edges for the given Node or Port.",
            "line": " src/jsPlumbToolkit.js:1023"
        },
        {
            "message": "Missing item type\nGets a Selection that is a filtered set of Nodes and Edges.",
            "line": " src/jsPlumbToolkit.js:1269"
        },
        {
            "message": "Missing item type\nToggles whether or not the given `obj` forms part of the current selection.",
            "line": " src/jsPlumbToolkit.js:1325"
        },
        {
            "message": "Missing item type\nGets a new instance of the jsPlumb Toolkit.",
            "line": " src/jsPlumbToolkit.js:1604"
        },
        {
            "message": "Missing item type\nMagnetize the display. You must indicate what sort of magnetization you wish to perform: if you provide an event,\nthe event's location will be the magnetization origin. If you provide `origin:{left;xxx, top:xxx}`, that value will be used. If\nyou provide neither, the computed center of all elements will be used. You can also provide an `options:{...}` value, whose\nvalues can contain `filter`, `constrain` and `padding` values for the specific run of the magnetizer.",
            "line": " src/layout.js:195"
        },
        {
            "message": "Missing item type\nSet the layout on which to base this layout.",
            "line": " src/layout.js:630"
        },
        {
            "message": "Missing item type\nGets the position for the given Node as dictated by either the `left`/`top` properties, or some other nominated pair, in the node's data.\nThis position is what the Absolute layout uses itself, and this method exposes the absolute position for subclasses that wish to make use\nof the absolute backing.",
            "line": " src/layout.js:683"
        },
        {
            "message": "Missing item type",
            "line": " src/layouts-circular.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/layouts-circular.js:5"
        },
        {
            "message": "Missing item type\nGets the orientation of the layout - \"horizontal\" or \"vertical\".",
            "line": " src/layouts-hierarchical.js:238"
        },
        {
            "message": "Missing item type\nSets whether or not the miniview is visible. Strictly speaking you don't need to use this method;\nyou can just control the miniview's container via your own CSS or whatever. But the Surface uses this\noccasionally, and there is also the concept of having the miniview initially invisible until the\nrelated surface contains some data.",
            "line": " src/miniview.js:211"
        },
        {
            "message": "Missing item type\nUpdate the host layout for this miniview",
            "line": " src/miniview.js:313"
        },
        {
            "message": "Missing item type\nSets whether or not rendering is suspended, which for the moment means that when updateBounds is\ncalled, the widget doesn't sort the bounds, since we know there will be more changes to the\npositions and/or sizes of elements.",
            "line": " src/pan-zoom-widget.js:180"
        },
        {
            "message": "Missing item type\nAppends an element to the viewport so that it floats above the content that is being zoomed and panned.\nThe element will have `position:absolute` set on it. You can float any element you like, but note that the\nresponsibility for setting an appropriate z index is yours.",
            "line": " src/pan-zoom-widget.js:1637"
        },
        {
            "message": "Missing item type\nGets the current background layer.",
            "line": " src/pan-zoom-widget.js:1856"
        },
        {
            "message": "Missing item type\nModels a Path - the series of edges and intermediate nodes between two nodes or ports\nin some toolkit of the Toolkit.",
            "line": " src/path.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/path.js:17"
        },
        {
            "message": "Missing item type\nPinch listener for all touch browsers - ipad, android, and windows laptops/surfaces. Needless to say,\nevery browser does it differently. IE10+ uses PointerEvents; ipad safari/windows chrome/ipad chrome/\nandroid chrome use TouchEvents.  The listener posts pinchstart, pinch happening, and pinch end events.",
            "line": " src/pinch-listener.js:1"
        },
        {
            "message": "Missing item type\nModels a selection of Nodes/Ports end Edges.",
            "line": " src/selection.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/selection.js:16"
        },
        {
            "message": "Missing item type\nReloads the content of this Selection, if a `generator` was supplied to the constructor. Otherwise\ndoes nothing. A data load start event is fired first, followed by a call to the generator to repopulate,\nand then a data load end event is fired.  So calling this method on a Selection that you are rendering\nto a Surface will cause the Surface to repaint itself.",
            "line": " src/selection.js:275"
        },
        {
            "message": "Missing item type\nGets the node at the given index.",
            "line": " src/selection.js:343"
        },
        {
            "message": "Missing item type\nGets all the Nodes in the Selection.",
            "line": " src/selection.js:352"
        },
        {
            "message": "Missing item type\nTraces the given overlay along either a given path, or the shortest path\nfrom a specified `source` to a specified `target` (if such a path exists).\nIf there is no path nothing happens (except for a debug trace, if you have debugging enabled on\nthe Toolkit instance via `toolkit.setDebugEnabled(true)`)",
            "line": " src/surface.js:881"
        },
        {
            "message": "Missing item type\nReturns a map of element ids -> positions.",
            "line": " src/surface.js:957"
        },
        {
            "message": "Missing item type\nfunctionality to support template loading from script tags (browser only)\n\ncopyright 2015 jsPlumbToolkit.com",
            "line": " src/templates.js:1"
        },
        {
            "message": "Missing item type\njsPlumbToolkit utility functions, used both in browser and on server.\nDependencies\njsPlumbUtil (does this depend on browser at all? it shouldnt.)",
            "line": " src/util.js:1"
        },
        {
            "message": "Missing item type\nWheel listener. Normalises wheel events across browsers.",
            "line": " src/wheel-listener.js:2"
        }
    ]
}