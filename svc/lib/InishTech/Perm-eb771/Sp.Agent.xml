<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sp.Agent</name>
    </assembly>
    <members>
        <member name="T:Slps.ProtectionAttributes.FeatureAttribute">
            <summary>
            Indicates that the marked method should have protection applied and, optionally if licensing is enabled, additionally require a license to execute 
            </summary>
        </member>
        <member name="T:Slps.Engine.Internal.InternalFeatureAttribute">
            <summary>
            This attribute can be attached to method to indicate that it should be transformed during Code Protection
            
            NB this does not require a license, 
            <seealso cref="T:Slps.ProtectionAttributes.FeatureAttribute"/>
            </summary>summary&gt;
        </member>
        <member name="F:Slps.Engine.Internal.InternalFeatureAttribute.FEATURE_PROPERTY_NAME">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="F:Slps.Engine.Internal.InternalFeatureAttribute.CODE_RULE_TYPE_PROPERTY_NAME">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Internal.InternalFeatureAttribute.#ctor">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Internal.InternalFeatureAttribute.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Internal.InternalFeatureAttribute.#ctor(Slps.Engine.Internal.CodeRuleType)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Internal.InternalFeatureAttribute.FeatureName">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Internal.InternalFeatureAttribute.CodeRuleType">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.ProtectionAttributes.FeatureAttribute.#ctor">
            <summary>
            Indicates that the marked method should have Protection applied during Code Protector execution.
            Requires the 'Execute' feature to be present on a supporting license at execution time 
            (i.e., When Licensing is Enabled, requires a valid license for the Product but does not require any specific feature to be present on that license).
            
            Note: If Licensing is Disabled in your Code Protector Settings, Methods associated with this attribute will not be restricted.
            </summary>
        </member>
        <member name="M:Slps.ProtectionAttributes.FeatureAttribute.#ctor(System.String)">
            <summary>
            Indicates that the marked method should have Protection applied during Code Protector execution.
            Requires the indicated <param name="featureName"></param> feature to be available on a supporting Product License at execution time.
            </summary>
        </member>
        <member name="T:Slps.Engine.Execution.Internal.IExecutionEngineParams">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionEngineParams.ExtractParameters(System.Object,System.Object@,System.Object[]@)">
            <summary>
            For internal use.
            </summary>
            <seealso cref="T:Slps.Engine.Execution.Internal.IExecutionEngineParams"/>
            <param name="methodData">For internal use.</param>
            <param name="objectInstance">For internal use.</param>
            <param name="arguments">For internal use.</param>
        </member>
        <member name="T:Slps.Engine.Execution.Internal.IExecutionEngineGenericArguments">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.IExecutionEngineGenericArguments.GenericTypeArgs">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.IExecutionEngineGenericArguments.GenericMethodArgs">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.IExecutionEngineGenericArguments.Stack">
            <summary>
            For internal use.
            </summary>		
        </member>
        <member name="T:Slps.Engine.Execution.Internal.IExecutionStack">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionStack.Push(System.Guid)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionStack.Enter(System.Guid)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionStack.Exit(System.Guid)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionStack.Pop(System.Guid)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Slps.Engine.Execution.Internal.InvocationContext">
            /// <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.InvocationContext.#ctor(System.Object,System.Object[],System.Type[],System.Type[])">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.InvocationContext.ExtractParameters(System.Object,System.Object@,System.Object[]@)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.InvocationContext.GenericTypeArgs">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.InvocationContext.GenericMethodArgs">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.InvocationContext.Stack">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Activation.InvalidLicenseKeyException">
            <summary>
            License Key format is invalid.
            </summary>
        </member>
        <member name="M:Sp.Agent.Activation.InvalidLicenseKeyException.#ctor">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Activation.InvalidLicenseKeyException.#ctor(System.String,System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Activation.InvalidLicenseKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sp.Agent.Activation.InvalidLicenseKeyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Sp.Agent.Activation.InvalidLicenseKeyException.LicenseKey">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Execution.NotLicensedException">
            <summary>
            Thrown when there's no license to Execute protected code.
            </summary>
        </member>
        <member name="M:Sp.Agent.Execution.NotLicensedException.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Execution.NotLicensedException.#ctor(System.String,System.Exception)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Execution.NotLicensedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sp.Agent.Execution.NotLicensedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Slps.Engine.Internal.CodeRuleType">
            <summary>
            Type of CodeRule (Include/Exclude).
            </summary>
        </member>
        <member name="F:Slps.Engine.Internal.CodeRuleType.Include">
            <summary>
            Include all code entities that match the rule.
            </summary>
        </member>
        <member name="F:Slps.Engine.Internal.CodeRuleType.Exclude">
            <summary>
            Exclude all code entities that match the rule.
            </summary>
        </member>
        <member name="T:Sp.Agent.Activation.NumberOfActivationsExceededActivationServerException">
            <summary>
            Indicates that the License associated with the supplied activation key has already been activated the maximum permitted number of times designated in License entity in the Software Potential service.
            </summary>
        </member>
        <member name="T:Sp.Agent.Activation.ActivationServerException">
            <summary>
            Indicates that there has been a problem encountered by the license server in the processing of an activation request.<para/>
            The reason can be inspected via the <c>Code</c> property.
            </summary>
        </member>
        <member name="M:Sp.Agent.Activation.ActivationServerException.#ctor(System.Exception,System.String)">
            <summary>
            Constructs a default ActivationServerException.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="code">The underlying error code.</param>
        </member>
        <member name="M:Sp.Agent.Activation.ActivationServerException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Constructs an ActivationServerException with the specified message explaining the details of the condition.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="code">The underlying error code.</param>
        </member>
        <member name="M:Sp.Agent.Activation.ActivationServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sp.Agent.Activation.ActivationServerException.Code">
            <summary>
            The reason given by the activation server for the rejection of the activation request.
            </summary>
        </member>
        <member name="M:Sp.Agent.Activation.NumberOfActivationsExceededActivationServerException.#ctor(System.Exception,System.String)">
            <summary>
            Creates an instance with the supplied inner exception detail and standard error message.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="code">The fault code encountered.</param>
        </member>
        <member name="M:Sp.Agent.Activation.NumberOfActivationsExceededActivationServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sp.Agent.Activation.LicenseExpiredActivationServerException">
            <summary>
            Indicates that the License associated with the supplied activation key has been marked Expired in the License entity in the Software Potential service.
            </summary>
        </member>
        <member name="M:Sp.Agent.Activation.LicenseExpiredActivationServerException.#ctor(System.Exception,System.String)">
            <summary>
            Creates an instance with the supplied inner exception detail and standard error message.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="code">The fault code encountered.</param>
        </member>
        <member name="M:Sp.Agent.Activation.LicenseExpiredActivationServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sp.Agent.Activation.LicenseDisabledActivationServerException">
            <summary>
            Indicates that the License associated with the supplied activation key has been marked Disabled in the License entity in the Software Potential service.
            </summary>
        </member>
        <member name="M:Sp.Agent.Activation.LicenseDisabledActivationServerException.#ctor(System.Exception,System.String)">
            <summary>
            Creates an instance with the supplied inner exception detail and standard error message.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="code">The fault code encountered.</param>
        </member>
        <member name="M:Sp.Agent.Activation.LicenseDisabledActivationServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sp.Agent.Activation.DeviceChangedActivationServerException">
            <summary>
            Indicates that the Software Potential service refused to re-activate the license due to an inability to fulfill a stipulation that it cannot be activated on more than one machine.
            </summary>
        </member>
        <member name="M:Sp.Agent.Activation.DeviceChangedActivationServerException.#ctor(System.Exception,System.String)">
            <summary>
            Creates an instance with the supplied inner exception detail and standard error message.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="code">The fault code encountered.</param>
        </member>
        <member name="M:Sp.Agent.Activation.DeviceChangedActivationServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sp.Agent.Activation.TagsChangedActivationServerException">
            <summary>
            Indicates that the Software Potential service refused to re-activate the license due to an inability to fulfill a stipulation that all activation tags must match those of the preceding activation.
            </summary>
        </member>
        <member name="M:Sp.Agent.Activation.TagsChangedActivationServerException.#ctor(System.Exception,System.String)">
            <summary>
            Creates an instance with the supplied inner exception detail and standard error message.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="code">The fault code encountered.</param>
        </member>
        <member name="M:Sp.Agent.Activation.TagsChangedActivationServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sp.Agent.ActivateLicensesExtensions">
            <summary>
            Provides access to more granular activation Apis that allow one to implement Disconnected or Manual Activation scenarios.
            </summary>
            <remarks>
            Not implemented directly as a property as <see cref="T:Sp.Agent.Activation.IActivateLicensesAdvanced"/> is not <c>CLSCompliant</c> but <see cref="T:Sp.Agent.Activation.IActivateLicenses"/> is.
            </remarks>
        </member>
        <member name="M:Sp.Agent.ActivateLicensesExtensions.Advanced(Sp.Agent.Activation.IActivateLicenses)">
            <summary>
            Provides more granular activation Apis that allow one to implement Disconnected or Manual Activation scenarios.
            <para/>
            See <see cref="T:Sp.Agent.Activation.IActivateLicensesAdvanced"/> for further details.
            </summary>
        </member>
        <member name="T:Sp.Agent.Activation.IActivateLicenses">
            <summary>
            Manages the process of activating a license that has been prepared on the Software Potential service into a local license store.
            <para/>
            See <see cref="T:Sp.Agent.Configuration.AgentContext"/> for details of configuring stores.
            See <see cref="T:Sp.Agent.ActivateLicensesExtensions"/> for extension methods pertaining to advanced options as managed via <see cref="T:Sp.Agent.Activation.IActivateLicensesAdvanced"/>.
            </summary>
        </member>
        <member name="T:Sp.Agent.Internal.IHideObjectMembers">
            <summary>
            Facilitates more natural usage of fluent interfaces wrt intellisense
            </summary>
            <remarks>
            see http://blogs.clariusconsulting.net/kzu/how-to-hide-system-object-members-from-your-interfaces/ for details </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.IHideObjectMembers.GetType">
            <summary>
            Has no material effect - does not get overridden; Only serves to indicate to VS intellisense that the member should be omitted from the method lists
            </summary>
        </member>
        <member name="M:Sp.Agent.Internal.IHideObjectMembers.GetHashCode">
            <summary>
            Has no material effect - does not get overridden; Only serves to indicate to VS intellisense that the member should be omitted from the method lists
            </summary>
        </member>
        <member name="M:Sp.Agent.Internal.IHideObjectMembers.ToString">
            <summary>
            Has no material effect - does not get overridden; Only serves to indicate to VS intellisense that the member should be omitted from the method lists
            </summary>
        </member>
        <member name="M:Sp.Agent.Internal.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Has no material effect - does not get overridden; Only serves to indicate to VS intellisense that the member should be omitted from the method lists
            </summary>
        </member>
        <member name="M:Sp.Agent.Activation.IActivateLicenses.IsWellFormedKey(System.String)">
            <summary>
            Determines whether the specified activation key is well formed (e.g., 5 sets of digits/letters separated by minus (-) symbols).
            </summary>
            <param name="activationKey">The activation key. Can by any string, doesn't have to be of a particular length etc.</param>
            <returns><c>true</c> if <paramref name="activationKey"/> is  well formed; otherwise, <c>false</c>.</returns>
            <remarks>Does not attempt to ascertain whether the Activation Key represents a license that is valid - the validation is purely for adherence to the key format.</remarks>
        </member>
        <member name="M:Sp.Agent.Activation.IActivateLicenses.OnlineActivateAsync(System.String,System.Object)">
             <summary>
             Submits an activation request to Software Potential service and installs the resulting license (assuming that succeeds) asynchronously.
            <para/>
             See <see cref="T:Sp.Agent.Activation.IActivateLicensesAdvanced"/> <c>.CreateDeferredRequest()</c>  (for deferring Activation and/or processing it on another machine) or <c>CreateManualActivationRequest()</c> (for Manual Activation via the Software Potential service) for alternate approaches to activation.
             </summary>
             <param name="activationKey">must be a well formed Activation Key as defined by <c>IsWellFormedKey()</c>.</param>
             <param name="state">used to send custom tags as part of an activation request</param>
             <remarks>Performs an asynchronous <c>CreateRequest()</c> followed by a <c>SendDeferredRequestAsync()</c> and a <c>Install()</c>.</remarks>
             <exception cref="T:Sp.Agent.Activation.ActivationServerException">Thrown if the Software Potential service refuses the Activation Request. For some causes, there are specific derived Types reflecting the indicated reason.</exception>
        </member>
        <member name="M:Sp.Agent.Activation.IActivateLicenses.OnlineActivateAsync(System.String)">
             <summary>
             Submits an activation request to Software Potential service and installs the resulting license (assuming that succeeds) asynchronously.
            <para/>
             See <see cref="T:Sp.Agent.Activation.IActivateLicensesAdvanced"/> <c>.CreateDeferredRequest()</c>  (for deferring Activation and/or processing it on another machine) or <c>CreateManualActivationRequest()</c> (for Manual Activation via the Software Potential service) for alternate approaches to activation.
             </summary>
             <param name="activationKey">must be a well formed Activation Key as defined by <c>IsWellFormedKey()</c>.</param>
             <remarks>Performs an asynchronous <c>CreateRequest()</c> followed by a <c>SendDeferredRequestAsync()</c> and a <c>Install()</c>.</remarks>
             <exception cref="T:Sp.Agent.Activation.ActivationServerException">Thrown if the Software Potential service refuses the Activation Request. For some causes, there are specific derived Types reflecting the indicated reason.</exception>
        </member>
        <member name="M:Sp.Agent.Activation.IActivateLicenses.OnlineActivate(System.String,System.Object)">
            <summary>
            Submits an activation request to Software Potential service and installs the resulting license (assuming that succeeds) synchronously.
            <para/>
            See <see cref="T:Sp.Agent.Activation.IActivateLicensesAdvanced"/> <c>.CreateRequest()</c>  (for deferring Activation and/or processing it on another machine) or <c>CreateManualActivationRequest()</c> (for Manual Activation via the Software Potential service) for alternate approaches to activation.
            </summary>
            <param name="activationKey">must be a well formed Activation Key as defined by <c>IsWellFormedKey()</c>.</param>
            <param name="state">used to send custom tags as part of an activation request</param>
            <remarks>Performs a synchronous <c>CreateDeferredRequest()</c> followed by a <c>SendDeferredRequestAsync()</c> and a <c>Install()</c>.</remarks>
            <exception cref="T:Sp.Agent.Activation.ActivationServerException">Thrown if the Software Potential service refuses the Activation Request. For some causes, there are specific derived Types reflecting the indicated reason.</exception>
        </member>
        <member name="M:Sp.Agent.Activation.IActivateLicenses.OnlineActivate(System.String)">
            <summary>
            Submits an activation request to Software Potential service and installs the resulting license (assuming that succeeds) synchronously.
            <para/>
            See <see cref="T:Sp.Agent.Activation.IActivateLicensesAdvanced"/> <c>.CreateRequest()</c>  (for deferring Activation and/or processing it on another machine) or <c>CreateManualActivationRequest()</c> (for Manual Activation via the Software Potential service) for alternate approaches to activation.
            </summary>
            <param name="activationKey">must be a well formed Activation Key as defined by <c>IsWellFormedKey()</c>.</param>
            <remarks>Performs a synchronous <c>CreateDeferredRequest()</c> followed by a <c>SendDeferredRequestAsync()</c> and a <c>Install()</c>.</remarks>
            <exception cref="T:Sp.Agent.Activation.ActivationServerException">Thrown if the Software Potential service refuses the Activation Request. For some causes, there are specific derived Types reflecting the indicated reason.</exception>
        </member>
        <member name="T:Sp.Agent.Activation.IActivateLicensesAdvanced">
            <summary>
            Provides advanced facilities for management of the Activation process such as:<para/>
            <list type="number">
            <item><description>Manual Activation - creation of a textual activation request which an end-user can transmit to the Vendor's systems via mechanisms such as email.</description></item>
            <item><description>Disconnected Activation - creation of a Deferred Activation request on the machine that is to have the license installed which can then be submitted to the Software Potential Activation service at a later point in time - e.g., on another machine that doesn't have firewall restrictions imposed on it.</description></item>
            <item><description>Installation of licenses resulting from Manual or Disconnected activation.</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Sp.Agent.Activation.IActivateLicensesAdvanced.CreateDeferredRequest(System.String,System.Object)">
            <summary>
            Generates a request blob which can then be transmitted to the Software Potential service in order to generate a <see cref="T:Sp.Agent.Licensing.ILicense">License</see> that is appropriate for the configured licensing context.
            <para/>
            See <see cref="T:Sp.Agent.Configuration.AgentContext"/> for details of configuring stores.
            </summary>
            <param name="activationKey">The activation key for the License entity in the Software Potential service.</param>
            <param name="state">used to send custom tags as part of an activation request</param>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown if <paramref name="activationKey"/> does not represent a well-formed key, as defined by <c>IsWellFormedKey()</c>.</exception>
            <returns>An activation request blob that can be submitted to the Software Potential service at a later point via<c>SendDeferredRequestAsync()</c>. </returns>
        </member>
        <member name="M:Sp.Agent.Activation.IActivateLicensesAdvanced.CreateManualActivationRequest(System.String,System.Object)">
            <summary>
            <para>Generates a textual representation of the request blob which can be used to download a binary license file from the Software Potential service.</para>
            <para>Textual requests can be submitted e.g., via email where an Online Activation would not be appropriate, e.g., due to lack of network connectivity.</para>
            <para>See <see cref="T:Sp.Agent.Configuration.AgentContext"/> for details of configuring stores.</para>
            </summary>
            <returns>Manual Activation request string ready for submission to the Software Potential service (in return for a .BIN license file)</returns>
            <remarks>Submission of the textual request to the Software Potential service yields a .BIN License File. Such a license can be installed at a later point in time via <see cref="M:Sp.Agent.Storage.IStoreLicenses.Install(System.Byte[])">IStoreLicenses.Install</see></remarks>.
            <param name="activationKey">The activation key for the license entity in the Software Potential service.</param>
            <param name="state">used to send custom tags as part of an activation request</param>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown if <paramref name="activationKey"/> does not represent a well-formed key, as defined by <c>IsWellFormedKey()</c>.</exception>
            <seealso cref="M:Sp.Agent.Storage.IStoreLicenses.Install(System.Byte[])">IStoreLicenses.Install</seealso>
        </member>
        <member name="M:Sp.Agent.Activation.IActivateLicensesAdvanced.SendDeferredRequestAsync(System.Byte[])">
            <summary>
            <para>Transmits a request blob generated by <c>CreateDeferredRequest()</c> to the Software Potential service in order to retrieve a license blob which is appropriate for the configured licensing context.</para>
            <para>Such a license can be installed at a later point in time via <see cref="M:Sp.Agent.Storage.IStoreLicenses.Install(System.Byte[])">IStoreLicenses.Install</see>.</para>
            </summary>
            <param name="requestBlob">The license activation request blob to be transmitted to the Software Potential service (previously obtained from <c>CreateRequest()</c>).</param>
            <exception cref="T:System.ArgumentNullException">thrown if <paramref name="requestBlob"/> is <c>null</c>.</exception>
            <exception cref="T:Sp.Agent.Activation.ActivationServerException">Thrown if the Software Potential service refuses the Activation Request. For some causes, there are specific derived Types reflecting the indicated reason.</exception>
        </member>
        <member name="P:Sp.Agent.Activation.IActivateLicensesAdvanced.ActivationUrl">
            <summary>
             Returns the configured Software Potential activation service endpoint.
            </summary>
            <value>Activation endpoint URL.</value>
            <example><c>"http://srv.softwarepotential.com/SLMServerWS/ActivationWS.svc"</c></example>
        </member>
        <member name="T:Sp.Agent.Configuration.AgentContext">
             <summary>
             Main entry point to the Software Potential Agent's Configuration and processing capabilities.<para/>
             <list type="bullet">
             <item><description>Configuration - Controls configuration of the Agent's Stores, Activation endpoints etc. in a manner appropriate to your application style/environment.</description></item><para/>
             <item><description>Agent Context, see <see cref="T:Sp.Agent.Configuration.IAgentContext"/> - Provides licensing and configuration information not pertaining to a specific licensed product.</description></item><para/>
             <item><description>Product Context, see <see cref="T:Sp.Agent.IProductContext"/> - Provides information regarding a licensed product.</description></item>
             </list>
             </summary>
             <example>
             <code>
             using Sp.Agent.Configuration;
             using Sp.Agent;
             
             // Skeleton Software Potential Agent Integration class - see documentation for your application environment/style to see Configuration options.
             public class SpAgent
             {
                readonly static IAgentContext _agentContext;
                readonly static IProductContext _product;
            
                static SpAgent()
                {
                    _agentContext = AgentContext.For( "abc12" );
                    // TODO see your specific Sp.Agent.*.dll Integration Layer Documentation for specifics of how to manage configuration for your application/hosting context
                    // _agentContext.Configure( x =&gt; x /* application/environment-specific Configuration Sequence */ .CompleteWithDefaults() );
                    _product = _agentContext.ProductContextFor( "My Product", "My Version" );
                }
            
                static IProductContext Product
                {
                    get { return _product; }
                }
            
                public void Activate( string activationKey )
                {
                    Product.Activation.OnlineActivate( activationKey );
                }
            }
             </code>
             </example>
        </member>
        <member name="M:Sp.Agent.Configuration.AgentContext.For(System.String)">
            <summary>
            Obtains the <see cref="T:Sp.Agent.Configuration.IAgentContext"/> for the Software Potential Agent Permutation with reference id <paramref name="permutationId"/>.
            </summary>
            <example><code>AgentContext.For( "abc12" )</code></example>
            <returns><see cref="T:Sp.Agent.Configuration.IAgentContext"/> for the specified Software Potential Agent Permutation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="permutationId"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Sp.Agent.Configuration.ICompletedConfigurationPhase">
            <summary>
            Terminates the Software Potential Agent configuration pipeline.<para/>
            See <see cref="T:Sp.Agent.Configuration.IStartingConfigurationPhase"/> for further information and examples pertaining to <c>Configure()</c> / <c>EnsureConfigured()</c> call sequences.<para/>
            NB IntelliSense will not offer any methods until you add a Reference to an appropriate environment layer such as <c>Sp.Agent.Crm.dll</c>.<para/>
            </summary>
            <seealso cref="T:Sp.Agent.Configuration.IStartingConfigurationPhase"/>
            <seealso cref="T:Sp.Agent.Configuration.IAgentContext"/>.
            <seealso cref="T:Sp.Agent.Configuration.AgentContext"/>.
        </member>
        <member name="T:Sp.Agent.Configuration.Internal.IActivationEndpointsInternalConfigurationPhase">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.IActivationEndpointsInternalConfigurationPhase.WithDefaultActivationEndpoint">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.IActivationEndpointsInternalConfigurationPhase.WithSslActivationEndpoint">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.IActivationEndpointsInternalConfigurationPhase.WithActivationServerBaseUrlOverride(System.Uri)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
            <example><c>"https://srv.softwarepotential.com"</c></example>
        </member>
        <member name="T:Sp.Agent.Configuration.Internal.IEmbeddedLicensesInternalConfigurationPhase">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.IEmbeddedLicensesInternalConfigurationPhase.WithEmbeddedLicensesAutoDetected">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.IEmbeddedLicensesInternalConfigurationPhase.DisableEmbeddedLicenses">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Configuration.Internal.AgentContextInternalExtensions">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.AgentContextInternalExtensions.IsConfigured(Sp.Agent.Configuration.IAgentContext)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.AgentContextInternalExtensions.AsImpl(Sp.Agent.Configuration.IAgentContext)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.IProductContext">
            <summary>
            Provides access to information and capabilities for a given Software Potential service Product such as:<para/>
            <list type="bullet">
            <item><description><see cref="T:Sp.Agent.Activation.IActivateLicenses">Activation</see>.</description></item>
            <item><description><see cref="T:Sp.Agent.Licensing.IQueryLicenses">Activated Licenses</see>.</description></item>
            </list>
            See <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">IAgentContext.ProductContextFor</see> for examples and details of how to obtain an <see cref="T:Sp.Agent.IProductContext"/>.<para/>
            See <see cref="M:Sp.Agent.Configuration.AgentContext.For(System.String)">AgentContext.For</see> for examples and details of how to obtain an <see cref="T:Sp.Agent.Configuration.IAgentContext"/>.<para/>
            </summary>
        </member>
        <member name="P:Sp.Agent.IProductContext.ProductName">
            <summary>
            The Product Name string as supplied to <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)"/>.
            </summary>
            <example><c>"My Product"</c></example>
            <seealso cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">IAgentContext.ProductContextFor</seealso>
        </member>
        <member name="P:Sp.Agent.IProductContext.ProductVersion">
            <summary>
            The Product Version string as supplied to <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)"/>.
            </summary>
            <example><c>"My Version"</c></example>
            <seealso cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">IAgentContext.ProductContextFor</seealso>
        </member>
        <member name="P:Sp.Agent.IProductContext.Activation">
            <summary>
            Provides License Activation-related capabilities.
            </summary>
            <seealso cref="T:Sp.Agent.Activation.IActivateLicenses"/>
        </member>
        <member name="P:Sp.Agent.IProductContext.Licenses">
            <summary>
            Provides License querying-related capabilities.
            </summary>
            <seealso cref="T:Sp.Agent.Licensing.IQueryLicenses"/>
        </member>
        <member name="P:Sp.Agent.IProductContext.Features">
            <summary>
            Provides Feature querying-related capabilities.
            </summary>
            <seealso cref="T:Sp.Agent.Licensing.IQueryFeatures"/>
        </member>
        <member name="P:Sp.Agent.IProductContext.Stores">
            <summary>
            Provides <see cref="T:Sp.Agent.Activation.IActivateLicenses">Activated</see> License Store manipulation capabilities.
            </summary>
            <seealso cref="T:Sp.Agent.Storage.IStoreLicenses"/>
        </member>
        <member name="T:Sp.Agent.Configuration.IAgentContext">
            <summary>
            Provides access to information and capabilities for a given Permuted Software Potential Agent.<para/>
            See <see cref="T:Sp.Agent.Configuration.IStartingConfigurationPhase"/> for examples and details of <c>.Configure( ... )</c> or <c>.EnsureConfigured( ... )</c> extension methods which can be layered onto this context.<para/>
            See <see cref="M:Sp.Agent.Configuration.AgentContext.For(System.String)">AgentContext.For</see> for examples and details of how to obtain an <see cref="T:Sp.Agent.Configuration.IAgentContext"/>.<para/>
            </summary>
        </member>
        <member name="M:Sp.Agent.Configuration.IAgentContext.Configure(System.Func{Sp.Agent.Configuration.IStartingConfigurationPhase,Sp.Agent.Configuration.ICompletedConfigurationPhase})">
            <summary>
            <para>Enables one to provide a Configuration Expression specifying details of how you wish Licenses to be managed within your system.</para>
            <para>May only be called a single time per <c>PermutationId</c> in a given <c>AppDomain</c>.</para>
            </summary>
            <remarks>
            Failing to call <c>Configure()</c> will result in a Default Configuration (without any License Stores) being applied at the first point where the any of the following events occur:
            <list type="bullet">
            <item><description>Protected code is executed within the current <c>AppDomain</c>which has been protected using the Permutation identified by <c>PermutationId</c>.</description></item>
            <item><description><c>ProductContextFor()</c> is used in any <see cref="T:Sp.Agent.Configuration.IAgentContext"/> for the current <c>PermutationId</c>.</description></item>
            </list>
            </remarks>
            <param name="compose"><see cref="T:Sp.Agent.Configuration.IStartingConfigurationPhase"/> for details of composing a Configuration Expression appropriate to your application style/environment using the fluent expression composition sequence.</param>
        </member>
        <member name="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">
            <summary>
            Provides access to information regarding installed licenses and Activation capabilities relating to the Licenses and Features for the Software Potential service Product profile designated by the <paramref name="productName"/> and <paramref name="productVersion"/> parameters.
            </summary>
            <param name="productName">The Product Name string, e.g., <c>"My Product"</c>.</param>
            <param name="productVersion">The Product Version string, e.g., <c>"My Version"</c>.</param>
        </member>
        <member name="P:Sp.Agent.Configuration.IAgentContext.PermutationId">
            <summary>
            The 5 character permutation short code identifier associated with your Permuted set of Software Potential Agent DLLs.<para/>
            See <see cref="M:Sp.Agent.Configuration.AgentContext.For(System.String)">AgentContext.For</see> for examples / details of using a Permutation Short Code.
            </summary>
            <example><c>"abc12"</c></example>
        </member>
        <member name="P:Sp.Agent.Configuration.IAgentContext.VendorName">
            <summary>
            The identifying Vendor Name string associated with your Permuted set of Software Potential Agent DLLs.<para/>
            </summary>
            <example><c>"SampleVendor - licensing@samplevendor.com"</c></example>
        </member>
        <member name="T:Sp.Agent.Internal.CoreServices.ICorePermutationServices">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICorePermutationServices.FetchVendorName">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Internal.Contexts.Permutations.IPermutationContext">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.Contexts.Permutations.IPermutationContext.FetchVendorName">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Internal.CoreServices.ICoreActivationServices">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreActivationServices.IsWellFormed(System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreActivationServices.CreateRequest(System.String,System.Tuple{System.String,System.String,System.String},System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Object)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreActivationServices.CreateManualActivationRequest(System.String,System.Tuple{System.String,System.String,System.String},System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Object)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreActivationServices.SendRequestAsync(System.Byte[])">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreActivationServices.ComputeActivationUrl">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Internal.CoreServices.ICoreStorageServices">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreStorageServices.All(System.Collections.ObjectModel.ReadOnlyCollection{System.Guid})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreStorageServices.AddLicenseBlob(System.Byte[],System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Tuple{System.String,System.String,System.String})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreStorageServices.Delete(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Tuple{System.String,System.String,System.String})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreStorageServices.Initialize(System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Tuple{System.String,System.String,System.String})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreStorageServices.Uninitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Tuple{System.String,System.String,System.String})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreStorageServices.VerifyInitialized(System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Tuple{System.String,System.String,System.String})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Licensing.ILicense">
            <summary>
            Provides access to information pertaining to an <see cref="P:Sp.Agent.IProductContext.Activation">Activated</see> License for a given <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">Software Potential service Product</see>.<para/>
            </summary>
            <seealso cref="T:Sp.Agent.Licensing.IQueryLicenses"/>
            <seealso cref="P:Sp.Agent.IProductContext.Licenses">IProductContext.Licenses</seealso>
            <seealso cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">IAgentContext.ProductContextFor</seealso>
            <seealso cref="M:Sp.Agent.Configuration.AgentContext.For(System.String)">AgentContext.For</seealso>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicense.ActivationKey">
            <summary>
            The activation key for <see cref="P:Sp.Agent.IProductContext.Activation">Activated</see> License.
            </summary>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicense.IsEvaluation">
            <summary>
            Indicates whether License is an Evaluation license (or Commercial).
            </summary>
            <value>
            <para><c>true</c> if the License is an Evaluation License.</para>
            <para><c>false</c> if the License is a Commercial License.</para>
            </value>
            <remarks>All Evaluation licenses available for a product are removed whenever a Commercial License for the same product is added to the <see cref="T:Sp.Agent.Storage.IStoreLicenses">Store</see>.</remarks>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicense.IssueDate">
            <summary>
            The point in time at which the License was created. Typically this reflects the Activation time.
            </summary>
            <remarks>The time is recorded with <c>DateTimeKind.Utc</c>.</remarks>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicense.Renewal">
            <summary>
            Provides access to information pertaining to the renewal-related aspects of the License.
            </summary>
            <seealso cref="T:Sp.Agent.Licensing.ILicense"/>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicense.Advanced">
            <summary>
            Provides access to aspects of the license which are not commonly used in the vast majority of Software Potential licensed applications.
            </summary>
            <remarks>In most cases, other facilities within <see cref="T:Sp.Agent.IProductContext"/> provide higher level facilities which provide the desired behavior in a higher level fashion than the lower-level Apis contained herein.</remarks>
            <seealso cref="T:Sp.Agent.Licensing.ILicense"/>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicense.Tags">
            <summary>The custom tags associated with this License.</summary>
            <remarks>
            <para>Tags can be added either via the Software Potential service Web Api or by supplying them at Activation Time.</para>
            <para>The <c>Key</c>s of Activation Tags are prefixed with an <c>A:</c> prefix.</para>
            </remarks>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicense.ValidFrom">
            <summary>
            The date/time from which the License is operable.
            </summary>
            <remarks>The <see cref="T:System.DateTimeKind"/> is <see cref="F:System.DateTimeKind.Local"/>.</remarks>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicense.ValidUntil">
            <summary>
            The date/time until which the License is operable, which may be limited by a <see cref="P:Sp.Agent.Licensing.ILicensePeriod.EndDate"/> and extended  <see cref="P:Sp.Agent.Licensing.ILicenseRenewal.GracePeriod"/>.
            </summary>
            <value>The date at which the license will become Expired due to <see cref="P:Sp.Agent.Licensing.ILicenseAdvanced.Period"/> stipulations. <c>DateTime.MaxValue</c> if there is no limit stipulated in the license terms.</value>
            <remarks>The <see cref="T:System.DateTimeKind"/> is <see cref="F:System.DateTimeKind.Local"/>.</remarks>
        </member>
        <member name="T:Sp.Agent.Licensing.ILicenseRenewal">
            <summary>
            Provides access to information pertaining to the renewal-related aspects of a <see cref="T:Sp.Agent.Licensing.ILicense">License</see>.
            </summary>
            <seealso cref="T:Sp.Agent.Licensing.ILicense"/>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicenseRenewal.RevisionNumber">
            <summary>
            <para>The revision number of the license. Incremented when a license is reissued (potentially with altered terms) on the Software Potential service.</para>
            <para>A re-activation may not necessarily mean a new Revision.</para>
            </summary>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicenseRenewal.GracePeriod">
            <summary>
            <para>This details the time span after a license has officially expired in which it is still valid.</para>
            </summary>
            <remarks><para>Typically these parameters are not used directly, and one instead uses the <see cref="T:Sp.Agent.Licensing.ILicense"/><c>.Valid</c>... methods and properties to provide a higher level interpretation.</para></remarks>
        </member>
        <member name="T:Sp.Agent.Licensing.ILicenseAdvanced">
            <summary>
            Provides access to aspects of the license that are not commonly used in the vast majority of Software Potential licensed applications.
            </summary>
            <remarks>In most cases, other facilities within <see cref="T:Sp.Agent.IProductContext"/> provide higher level facilities which provide the desired behavior in a higher level fashion than the lower-level Apis contained herein.</remarks>
            <seealso cref="T:Sp.Agent.Licensing.ILicense"/>
        </member>
        <member name="M:Sp.Agent.Licensing.ILicenseAdvanced.AllFeatures">
            <summary>
            <para>Lists the complete set of <see cref="T:Sp.Agent.Licensing.IFeature">Features</see> on the License.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicenseAdvanced.ConcurrentUsageLimit">
            <summary>
            The maximum number of concurrent usages of this <see cref="T:Sp.Agent.Licensing.ILicense">License</see> stipulated on the license.
            </summary>
            <remarks>
            While this has an implicit meaning in the context of the Software Potential Distributor system, the Software Potential Agent does not ordinarily apply any specific constraints based on this setting.
            </remarks>
            <value><c>null</c> if Unlimited. Otherwise the maximum number of permitted instances.</value>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicenseAdvanced.IsVirtualMachineAllowed">
            <summary>
            Indicates if the license is permitted to be used in Virtualized Execution Environments.
            </summary>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicenseAdvanced.Period">
            <summary>
            Provides access to parameters governing the validity period of a License.
            </summary>
            <remarks><para>Typically these parameters are not used directly, and one instead uses the <see cref="T:Sp.Agent.Licensing.ILicense"/><c>.Valid</c>... methods and properties to provide a higher level interpretation.</para></remarks>
        </member>
        <member name="T:Sp.Agent.Licensing.IFeature">
            <summary>
            Exposes the properties of a Feature included in an Activated License.
            </summary>
        </member>
        <member name="P:Sp.Agent.Licensing.IFeature.ConcurrentUsageLimit">
            <summary>
            The maximum number of concurrent usages of this <see cref="T:Sp.Agent.Licensing.IFeature">Feature</see> stipulated on the license, or <c>null</c> if Unlimited.
            </summary>
            <remarks>
            <para>While this has an implicit meaning in the context of the Software Potential Distributor system, the Software Potential Agent does not ordinarily apply any specific constraints based on this setting.</para>
            <para>Typically this value is considered as an additional limitation on top of that implied by <see cref="P:Sp.Agent.Licensing.ILicenseAdvanced.ConcurrentUsageLimit">the equivalent property at License Level</see>.</para>
            </remarks>
            <value><c>null</c> if Unlimited. Otherwise the maximum number of permitted instances.</value>
            <seealso cref="P:Sp.Agent.Licensing.ILicenseAdvanced.ConcurrentUsageLimit"/>
        </member>
        <member name="P:Sp.Agent.Licensing.IFeature.EndDate">
            <summary>
            <para>The date/time at which this feature completes its normal validity period.</para>
            </summary>
            <remarks><para>This limitation is in addition to the <see cref="T:Sp.Agent.Licensing.ILicensePeriod">License Validity Period</see> constraints if any.</para>
            <para>NB it is not recommended to use this property in attempting to determine whether a Licensed Feature is Valid (either at the current time or based on an effective date). Such 
            computations should instead be carried out using the <see cref="T:Sp.Agent.Licensing.IQueryFeatures"/> Apis.</para></remarks>
            <value>The <see cref="T:System.DateTimeKind">DateTimeKind.Local</see> time at which the feature completes it's normal validity period (assuming the underlying License is itself Valid).</value>
            <seealso cref="T:Sp.Agent.Licensing.IQueryFeatures"/>
            <seealso cref="T:Sp.Agent.Licensing.ILicenseAdvanced"/>
            <seealso cref="T:Sp.Agent.Licensing.ILicensePeriod"/>
        </member>
        <member name="P:Sp.Agent.Licensing.IFeature.ValidUntil">
            <summary>
            The date/time until which the Feature is operable, which may be limited by a <see cref="P:Sp.Agent.Licensing.IFeature.EndDate"/> and extended <c>IFeature.GracePeriod</c>.
            </summary>
            <value>The date at which the license will become Expired due to <see cref="P:Sp.Agent.Licensing.ILicenseAdvanced.Period"/> stipulations. <c>DateTime.MaxValue</c> if there is no limit stipulated in the license terms.</value>
            <remarks>The <see cref="T:System.DateTimeKind"/> is <see cref="F:System.DateTimeKind.Local"/>.</remarks>
        </member>
        <member name="T:Sp.Agent.Licensing.ILicensePeriod">
            <summary>
            Provides access to parameters governing the validity period of a license.
            </summary>
            <remarks><para>Typically these parameters are not used directly, and one instead uses the <see cref="T:Sp.Agent.Licensing.ILicense"/><c>.Valid</c>... methods and properties to provide a higher level interpretation.</para></remarks>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicensePeriod.StartDate">
            <summary>
            <para>The date/time at which a license is to first become operable.</para>
            </summary>
            <value>The <see cref="T:System.DateTimeKind">DateTimeKind.Local</see> time at which the license enters it's validity period.</value>
        </member>
        <member name="P:Sp.Agent.Licensing.ILicensePeriod.EndDate">
            <summary>
            <para>The date/time at which a license exits its normal validity period and enters its Grace Period.</para>
            </summary>
            <remarks>A license may still continue to be valid for some time after this point while it is in its <see cref="T:Sp.Agent.Licensing.ILicenseRenewal"/><c>.GracePeriod</c>.</remarks>
            <value>The <see cref="T:System.DateTimeKind">DateTimeKind.Local</see> time at which the feature completes it's normal validity period.</value>
        </member>
        <member name="T:Sp.Agent.Licensing.IQueryFeatures">
            <summary>
            <para>Provides access to high level information pertaining to features present on the the <see cref="P:Sp.Agent.IProductContext.Activation">Activated</see> set of <see cref="T:Sp.Agent.Licensing.ILicense">License</see>s for a given <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">Software Potential service Product</see>.</para>
            <para>See <see cref="P:Sp.Agent.IProductContext.Features">IProductContext.Features</see> for examples and details of how to obtain an <see cref="T:Sp.Agent.Licensing.IQueryFeatures"/>.</para>
            <para><see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">IAgentContext.ProductContextFor</see> for examples and details of how to obtain an <see cref="T:Sp.Agent.IProductContext"/>.</para>
            <para><see cref="M:Sp.Agent.Configuration.AgentContext.For(System.String)">AgentContext.For</see> for examples and details of how to obtain an <see cref="T:Sp.Agent.Configuration.IAgentContext"/>.</para>
            </summary>
            <seealso cref="P:Sp.Agent.IProductContext.Features">IProductContext.Features</seealso>
            <seealso cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">IAgentContext.ProductContextFor</seealso>
            <seealso cref="M:Sp.Agent.Configuration.AgentContext.For(System.String)">AgentContext.For</seealso>
        </member>
        <member name="M:Sp.Agent.Licensing.IQueryFeatures.ValidAvailable">
            <summary>
            <para>Provides a consolidated set of in-date Features across all currently Valid Activated Software Potential service Product Licenses for this <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">Product Context</see>.</para>
            <para>The set of licenses considered is obtainable via <see cref="M:Sp.Agent.Licensing.IQueryLicenses.Valid">Licenses.Valid</see>.</para>
            </summary>
            <returns>The set of in-date features available across all Valid licenses.</returns>
            <remarks>
            <para>When checking for the presence of a single Feature, it can be significantly cheaper to use <see cref="M:Sp.Agent.Licensing.IQueryFeatures.ValidAvailableContains(System.String)"/> in preference.</para>
            <para>The <c>Execute</c> implicit feature is not included in this set; Use <see cref="M:Sp.Agent.Licensing.IQueryLicenses.Valid">Licenses.Valid</see> to query at the license level.</para>
            </remarks>
        </member>
        <member name="M:Sp.Agent.Licensing.IQueryFeatures.ValidAvailableContains(System.String)">
            <summary>
            <para>Determines whether <paramref name="featureName"/> is available and in-date Feature on any Valid Activated Software Potential service Product License for this <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">Product Context</see>.</para>
            <para>A consolidated set of available features can be retrieved using <see cref="M:Sp.Agent.Licensing.IQueryFeatures.ValidAvailable"/>.</para>
            <para>The set of licenses considered can be retrieved via <see cref="M:Sp.Agent.Licensing.IQueryLicenses.Valid">Licenses.Valid</see>.</para>
            </summary>
            <param name="featureName">Name of the feature to search for. The value is case-sensitive.</param>
            <returns><c>true</c> if the feature is present and in-date on at least one valid license.</returns>
            <remarks>
            <para>The <c>Execute</c> implicit feature is not considered; Use <see cref="M:Sp.Agent.Licensing.IQueryLicenses.Valid">Licenses.Valid</see> to query at the license level.</para>
            </remarks>
        </member>
        <member name="M:Sp.Agent.Licensing.IQueryFeatures.ValidAvailableExpiringWithin(System.TimeSpan)">
            <summary>
            <para>Provides a filtered set of Features across all Activated Software Potential service Product Licenses for this <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">Product Context</see> that fulfill the following criteria:</para>
            <para><list type="bullet"><item><description>Currently valid, i.e., is in the <see cref="M:Sp.Agent.Licensing.IQueryFeatures.ValidAvailable"/> set of Features.</description></item></list></para>
            <para><list type="bullet"><item><description>Will have expired after <paramref name="period"/>, i.e., have a <see cref="P:Sp.Agent.Licensing.ILicensePeriod.EndDate">Feature EndDate</see> or a <see cref="P:Sp.Agent.Licensing.ILicensePeriod.EndDate">License EndDate</see> that will have lapsed after <paramref name="period"/>.</description></item></list></para>
            </summary>
            <returns>The set of features that are currently valid that will not be valid after <paramref name="period"/>.</returns>
            <remarks>
            <para>The <c>Execute</c> implicit feature is not included in this set; Use <see cref="M:Sp.Agent.Licensing.IQueryLicenses.Valid">Licenses.Valid</see> to query at the license level.</para>
            </remarks>
        </member>
        <member name="T:Sp.Agent.Storage.StorageInaccessibleException">
            <summary>
            Thrown if there is an issue accessing a license store. Typically this results from misconfiguration or environment changes to the internal storage mechanism employed by a store.
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.StorageInaccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="T:Sp.Agent.Storage.WritingStorageInaccessibleException">
            <summary>
            <para>Thrown if there is an issue writing a License to a Store. Additionally also triggered by activities such as commencing Activation which will emit this exception as an indication that it will not be possible to install the resulting license upon activation.</para>
            <para>Typically this results from misconfiguration or environment changes to the internal storage mechanism employed by a store.</para>
            <seealso cref="T:Sp.Agent.Storage.Internal.IStoreInitialization"/>
            <seealso cref="T:Sp.Agent.Activation.IActivateLicenses"/>
            <seealso cref="T:Sp.Agent.Storage.IStoreLicenses"/>
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.WritingStorageInaccessibleException.#ctor(System.Tuple{System.String,System.String,System.String},System.Exception)">
            <summary>
            Creates a new WritingStorageInaccessibleException citing the specified <paramref name="productId"/>.
            </summary>
            <param name="productId">The Product for which being processing was taking place at the point of detection of the problem.</param>
            <param name="innerException">The underlying cause.</param>
        </member>
        <member name="T:Sp.Agent.Storage.ReadingStorageInaccessibleException">
            <summary>
            <para>Thrown if there is an issue reading a License from a Store</para>
            <para>Typically this results from misconfiguration or environment changes to the internal storage mechanism employed by a store.</para>
            <para>This exception often forms part of the details of a <see cref="T:Sp.Agent.Execution.NotLicensedException"/>.</para>
            <seealso cref="T:Sp.Agent.Storage.Internal.IStoreInitialization"/>
            <seealso cref="T:Sp.Agent.Execution.NotLicensedException"/>
            <seealso cref="T:Sp.Agent.Licensing.IQueryLicenses"/>
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.ReadingStorageInaccessibleException.#ctor(System.Tuple{System.String,System.String,System.String},System.Exception)">
            <summary>
            Creates a new ReadingStorageInaccessibleException citing the specified <paramref name="productId"/>.
            </summary>
            <param name="productId">The Product for which being processing was taking place at the point of detection of the problem.</param>
            <param name="innerException">The underlying cause.</param>
        </member>
        <member name="T:Sp.Agent.Storage.Internal.IStoreInitialization">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>	
        </member>
        <member name="M:Sp.Agent.Storage.Internal.IStoreInitialization.Initialize">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Storage.Internal.IStoreInitialization.Uninitialize">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Storage.Internal.IStoreInitialization.Verify">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Storage.Internal.IStoreLicensesInternalExtensions">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>	
        </member>
        <member name="M:Sp.Agent.Storage.Internal.IStoreLicensesInternalExtensions.Initialization(Sp.Agent.Storage.IStoreLicenses)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>	
        </member>
        <member name="T:Sp.Agent.Storage.IStoreLicenses">
            <summary>
            Manages manipulation of <see cref="T:Sp.Agent.Activation.IActivateLicenses">Activated</see> product <see cref="T:Sp.Agent.Licensing.ILicense">Licenses</see> in configured License <see cref="T:Sp.Agent.Storage.IStore">Stores</see>.
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.IStoreLicenses.All">
            <summary>
            Yields a list of the Configured <see cref="T:Sp.Agent.Storage.IStore">Stores</see> within the current <see cref="M:Sp.Agent.Configuration.AgentContext.For(System.String)">Context</see>.
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.IStoreLicenses.Install(System.Byte[])">
            <summary>
            <para>Adds an Activated <see cref="T:Sp.Agent.Licensing.ILicense">License</see> for the <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">current product</see> obtained via <c>IActivateLicensesAdvanced.SendDeferredRequestAsync()</c> or the contents of a .BIN license file downloaded from the Software Potential service obtained via Manual Activation.</para>
            <para>If an Activated <see cref="T:Sp.Agent.Licensing.ILicense">License</see> for the same activation key already exists, it will replace the existing one.</para>
            </summary>
            <param name="licenseBlob">The license blob to be installed.</param>
            <exception cref="T:System.ArgumentNullException">thrown if <paramref name="licenseBlob"/> is <c>null</c>.</exception>
            <exception cref="T:Sp.Agent.Storage.NonmatchingProductIdException">thrown if the <paramref name="licenseBlob"/> is for a product other than that supplied when creating the <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">Product Context</see>.</exception>
            <seealso cref="M:Sp.Agent.Activation.IActivateLicensesAdvanced.SendDeferredRequestAsync(System.Byte[])"/>
            <seealso cref="M:Sp.Agent.Activation.IActivateLicensesAdvanced.CreateManualActivationRequest(System.String,System.Object)"/>
        </member>
        <member name="M:Sp.Agent.Storage.IStoreLicenses.Delete(System.String)">
            <summary>
            Deletes a license for the <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">current product</see> that was previously successfully <see cref="M:Sp.Agent.Storage.IStoreLicenses.Install(System.Byte[])">Installed</see>.
            </summary>
            <param name="activationKey">Activation key of <see cref="T:Sp.Agent.Licensing.ILicense">license</see> that is to be removed.</param>
            <exception cref="T:System.ArgumentNullException">thrown if <paramref name="activationKey"/> is <c>null</c>.</exception>
            <exception cref="T:Sp.Agent.Storage.LicenseNotFoundException">thrown if the license identified by <paramref name="activationKey"/> cannot be located in any configured <see cref="T:Sp.Agent.Storage.IStore">Store</see> for the <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">current product</see>.</exception>
        </member>
        <member name="T:Sp.Agent.Storage.NonmatchingProductIdException">
            <summary>
            Indicates that the supplied license blob is not valid for the <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">current product</see>.<para/>
            See <see cref="M:Sp.Agent.Storage.IStoreLicenses.Install(System.Byte[])"/>.
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.NonmatchingProductIdException.#ctor(System.Tuple{System.String,System.String,System.String},System.Tuple{System.String,System.String,System.String})">
            <summary>
            Constructs a new NonmatchingProductIdException.
            </summary>
            <param name="expected">The product Id that was expected based on the <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">current product</see>.</param>
            <param name="actual">The product Id that the activated license is for.</param>
        </member>
        <member name="M:Sp.Agent.Storage.NonmatchingProductIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="T:Sp.Agent.Storage.VirtualMachineNotAllowedException">
            <summary>
            Indicates that the supplied license blob has a stipulation on it that it not be used within a Virtual Machine environment and hence it is not suitable for use on the current machine.<para/>
            See <see cref="M:Sp.Agent.Storage.IStoreLicenses.Install(System.Byte[])"/>.
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.VirtualMachineNotAllowedException.#ctor">
            <summary>
            Constructs a new VirtualMachineNotAllowedException.
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.VirtualMachineNotAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="T:Sp.Agent.Storage.DistributorLicenseOnClientException">
            <summary>
            Indicates that the supplied license blob is not a standard license, but is instead one that needs to be installed into a Software Potential Distributor and used indirectly via a Software Potential Distributor Client.
            See <see cref="M:Sp.Agent.Storage.IStoreLicenses.Install(System.Byte[])"/>.
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.DistributorLicenseOnClientException.#ctor">
            <summary>
            Constructs a new DistributorLicenseOnClientException.
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.DistributorLicenseOnClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="T:Sp.Agent.Storage.LicenseNotFoundException">
            <summary>
            Indicates that the specified license was not found in the store for the <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">current product</see>.<para/>
            See <see cref="M:Sp.Agent.Storage.IStoreLicenses.Delete(System.String)"/>.
            </summary>
        </member>
        <member name="M:Sp.Agent.Storage.LicenseNotFoundException.#ctor(System.String,System.Tuple{System.String,System.String,System.String})">
            <summary>
            Constructs a new LicenseNotFoundException.
            </summary>
            <param name="vendorProductVersion">The product Id based on the <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">current product</see>.</param>
            <param name="activationKey">The activation key for the license that could not be located.</param>
        </member>
        <member name="M:Sp.Agent.Storage.LicenseNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="T:Sp.Agent.Storage.StoreNotEmptyException">
            <summary>
            Indicates that the store for the <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">current product</see> still has licenses installed in it and hence cannot be <see cref="M:Sp.Agent.Storage.Internal.IStoreInitialization.Uninitialize">Uninitialized</see> until the licenses have been <see cref="M:Sp.Agent.Storage.IStoreLicenses.Delete(System.String)">Deleted()d</see>.<para/>
            </summary>
            <seealso cref="M:Sp.Agent.Storage.IStoreLicenses.Delete(System.String)"/>
            <seealso cref="M:Sp.Agent.Storage.Internal.IStoreInitialization.Uninitialize"/>
        </member>
        <member name="M:Sp.Agent.Storage.StoreNotEmptyException.#ctor(System.String,System.Tuple{System.String,System.String,System.String})">
            <summary>
            Constructs a new StoreNotEmptyException.
            </summary>
            <param name="vendorProductVersion">The product Id based on the <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">current product</see>.</param>
            <param name="storeName">The name of the Store that was not empty.</param>
        </member>
        <member name="M:Sp.Agent.Storage.StoreNotEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="T:Sp.Agent.Storage.IStore">
            <summary>
            Represents a Configured <see cref="T:Sp.Agent.Activation.IActivateLicenses">Activated</see> Product <see cref="T:Sp.Agent.Licensing.ILicense">License</see> Store.
            </summary>
        </member>
        <member name="P:Sp.Agent.Storage.IStore.Name">
            <summary>
            The unique name associated with the store type that has been Configured.
            </summary>
            <example><c>"Crm.Organization"</c></example>
        </member>
        <member name="T:Sp.Agent.Configuration.IStartingConfigurationPhase">
            <summary>
            Commences the Software Potential Agent configuration pipeline.<para/>
            Each specific application style/environment provides appropriate Extension Methods on this interface to provide an appropriate subset of customization options.<para/>
            Following the fluent configuration sequence should yield a <see cref="T:Sp.Agent.Configuration.ICompletedConfigurationPhase"/>, which the <see cref="T:Sp.Agent.Configuration.IAgentContext"/> <c>.Configure( Func&lt;IStartingConfigurationPhase, ICompletedConfigurationPhase&gt; )</c> or <c>.EnsureConfigured( Func&lt;IStartingConfigurationPhase, ICompletedConfigurationPhase&gt;)</c> extension method expects.<para/>
            NB IntelliSense will not offer any methods until you add a Reference to an appropriate environment layer such as <c>Sp.Agent.Crm.dll</c>.<para/>
            </summary>
            <example>
            <code>
            using Sp.Agent.Configuration;
            using Sp.Agent.Configuration.Internal;
            
            var context = AgentContext.For( "abc12" );
            context.Configure( x=&gt; x.Configure( x=&gt;x.CompleteWithDefaults() ) );
            </code>
            </example>
            <remarks>Using the <c>Sp.Agent.Configuration.Internal</c> namespace opens access to low-level customization Apis. Typically one should be using an appropriate environment layer such as <c>Sp.Agent.Crm.dll</c>.</remarks>
            <seealso cref="T:Sp.Agent.Configuration.ICompletedConfigurationPhase"/>
            <seealso cref="T:Sp.Agent.Configuration.IAgentContext"/>
            <seealso cref="T:Sp.Agent.Configuration.AgentContext"/>.
        </member>
        <member name="T:Sp.Agent.Configuration.Internal.StartingConfigurationPhaseInternalExtensions">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.StartingConfigurationPhaseInternalExtensions.NextPhase(Sp.Agent.Configuration.IStartingConfigurationPhase)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.StartingConfigurationPhaseInternalExtensions.CompleteWithDefaults(Sp.Agent.Configuration.IStartingConfigurationPhase)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.StartingConfigurationPhaseInternalExtensions.WithStoreTypeId(Sp.Agent.Configuration.IStartingConfigurationPhase,System.Guid)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.StartingConfigurationPhaseInternalExtensions.WithCoreParameter(Sp.Agent.Configuration.IStartingConfigurationPhase,System.String,System.Object)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Configuration.Internal.ActivationEndpointsInternalConfigurationPhaseExtensions">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.ActivationEndpointsInternalConfigurationPhaseExtensions.CompleteWithDefaults(Sp.Agent.Configuration.Internal.IActivationEndpointsInternalConfigurationPhase)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Configuration.Internal.EmbeddedLicensesInternalConfigurationPhaseExtensions">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.EmbeddedLicensesInternalConfigurationPhaseExtensions.CompleteWithDefaults(Sp.Agent.Configuration.Internal.IEmbeddedLicensesInternalConfigurationPhase)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.EmbeddedLicensesInternalConfigurationPhaseExtensions.DisableEmbeddedLicenses(Sp.Agent.Configuration.Internal.IEmbeddedLicensesInternalConfigurationPhase)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Configuration.Internal.EmbeddedLicensesInternalConfigurationPhaseExtensions.WithEmbeddedLicensesAutoDetected(Sp.Agent.Configuration.Internal.IEmbeddedLicensesInternalConfigurationPhase)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Internal.Contexts.AgentContextsInternal">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.Contexts.AgentContextsInternal.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Sp.Agent.Internal.Contexts.AgentContextsInternal.Instance">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Internal.CoreServices.ICoreExecutionServices">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreExecutionServices.ExecuteMethod(Slps.Engine.Execution.Internal.IExecutionEngineParams,System.Guid,System.Boolean,System.Tuple{System.String,System.String,System.String},System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.String,System.Reflection.Assembly)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Licensing.IQueryLicenses">
            <summary>
            Provides access to information pertaining to the <see cref="P:Sp.Agent.IProductContext.Activation">Activated</see> set of <see cref="T:Sp.Agent.Licensing.ILicense">License</see>s for a given <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">Software Potential service Product</see>.<para/>
            See <see cref="P:Sp.Agent.IProductContext.Licenses">IProductContext.Licenses</see> for examples and details of how to obtain an <see cref="T:Sp.Agent.Licensing.IQueryLicenses"/>.<para/>
            See <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">IAgentContext.ProductContextFor</see> for examples and details of how to obtain an <see cref="T:Sp.Agent.IProductContext"/>.<para/>
            See <see cref="M:Sp.Agent.Configuration.AgentContext.For(System.String)">AgentContext.For</see> for examples and details of how to obtain an <see cref="T:Sp.Agent.Configuration.IAgentContext"/>.<para/>
            </summary>
            <seealso cref="P:Sp.Agent.IProductContext.Licenses">IProductContext.Licenses</seealso>
            <seealso cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">IAgentContext.ProductContextFor</seealso>
            <seealso cref="M:Sp.Agent.Configuration.AgentContext.For(System.String)">AgentContext.For</seealso>
        </member>
        <member name="M:Sp.Agent.Licensing.IQueryLicenses.All">
            <summary>
            <para>Returns ALL activated Software Potential service Product Licenses for this <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">Product Context</see>.</para>
            <para>NB This INCLUDES POTENTIALLY INVALID licenses and hence should not be used in authorization checks. In general, the <c>.Valid()</c> sibling is the more appropriate query method to use.</para>
            </summary>
            <seealso cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">IAgentContext.ProductContextFor</seealso>
        </member>
        <member name="M:Sp.Agent.Licensing.IQueryLicenses.Valid">
            <summary>
            <para>Returns currently valid activated Software Potential service Product Licenses for this <see cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">Product Context</see>.</para>
            <para>Compared to <c>.All</c>, this filters out licenses that are not presently in-date, are in violation of License Binding or Virtual Execution Environment restrictions or have been tampered.</para>
            <para>This list is in sync with the set of licenses considered by the Execution Engine for the execution of Protected Code.</para>
            </summary>
            <seealso cref="M:Sp.Agent.Configuration.IAgentContext.ProductContextFor(System.String,System.String)">IAgentContext.ProductContextFor</seealso>
        </member>
        <member name="T:Sp.Agent.Internal.CoreServices.ICoreLicensingServices">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreLicensingServices.All(System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Tuple{System.String,System.String,System.String})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreLicensingServices.Valid(System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Tuple{System.String,System.String,System.String})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreLicensingServices.ValidFeatures(System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Tuple{System.String,System.String,System.String})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreLicensingServices.ValidFeaturesContains(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Tuple{System.String,System.String,System.String})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServices.ICoreLicensingServices.FeaturesExpiringWithin(System.TimeSpan,System.Collections.ObjectModel.ReadOnlyCollection{System.Guid},System.Tuple{System.String,System.String,System.String})">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Internal.CoreServicesNotFoundException">
            <summary>
            <para>Indicates that there has been a problem discovering a Permuted Sp.Agent Core assembly. Each <c>Sp.Agent.*.dll</c> alongside the <c>Sp.Agent.dll</c> needs to load correctly in order for the Sp.Agent to operate correctly.</para>
            <para>It is permissible to IL-Merge the <c>Sp.Agent.*.dll</c>s into the outer <c>Sp.Agent</c> assembly (and that itself can be IL-Merged too).</para>
            <para>Typically there will be underlying <c>MEF</c> (<c>System.ComponentModel.Composition</c>)-flagged condtions underlying the issue which can be critical to correctly diagnosing isues.</para>
            </summary>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServicesNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new CoreServicesNotFoundException.
            </summary>
            <param name="permutationId">The permutation id associated with the vendor's Permuted Runtime.</param>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServicesNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new CoreServicesNotFoundException.
            </summary>
            <param name="permutationId">The permutation id associated with the vendor's Permuted Runtime.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Sp.Agent.Internal.CoreServicesNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="T:Slps.Engine.Execution.Internal.ExecutionServices">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.ExecutionServices.ExecuteMethod(System.Object,System.String,System.String,System.Object[],System.Type[],System.Type[])">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.ExecutionServices.ExecuteMethod2(Slps.Engine.Execution.Internal.IExecutionEngineParams,System.Guid,System.String,System.Reflection.Assembly)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Sp.Agent.Internal.Resources.Headers.SpAgentHeader">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Sp.Agent.Internal.Resources.Headers.SpAgentHeader.CoreId">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Sp.Agent.Internal.Resources.Headers.SpAgentHeader.ProductName">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Sp.Agent.Internal.Resources.Headers.SpAgentHeader.ProductVersion">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Sp.Agent.Internal.Resources.Headers.SpAgentHeader.HasEmbeddedLicense">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
    </members>
</doc>
