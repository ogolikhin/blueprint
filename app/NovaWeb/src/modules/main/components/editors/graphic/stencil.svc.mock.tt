<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".ts" #>
<# /* prevent removal of style attribute */ #>
import {IStencilService} from "./impl/stencil.svc";
    export class StencilServiceMock implements IStencilService {
        public getStencil(diagramType: string): HTMLElement {
            let data: string;
            switch (diagramType) {
                    case "businessprocess":
                        data = "<#= this.GetStencilText("bpmn.xml")#>";
                        break;
                    case "genericdiagram":
                        data = "<#= this.GetStencilText("generic.xml")#>";
                        break;
                    case "uimockup":
                        data = "<#= this.GetStencilText("uimockup.xml")#>";
                        break;
                    case "storyboard":
                        data = "<#= this.GetStencilText("storyboard.xml")#>";
                        break;
                    case "domaindiagram":
                        data = "<#= this.GetStencilText("domain.xml")#>";
                        break;
                    case "usecasediagram":
                        data = "<#= this.GetStencilText("usecasediagram.xml")#>";
                        break;
                    default:
                        throw "Unknown diagram type: " + diagramType;
            }
            let stencil = null;
            try {
                let xml = $.parseXML(data);
                stencil = xml.documentElement;
            }
            finally {
                return stencil;
            }
        }
    }


<#+

private string GetStencilText(string stencilName)
{
    string stencil = string.Empty;
    try
    {
        //stencil = File.ReadAllText(this.GetPathToStensils() + stencilName).Replace("\r", "").Replace("\n", " ").Replace("\"", "\\\"");
        stencil = System.Text.RegularExpressions.Regex.Replace(File.ReadAllText(this.GetPathToStensils() + stencilName),@"\s+"," ").Replace("\"", "\\\"");
    }
    catch{
    }

    return stencil;
}

private string GetPathToStensils()
{
    DirectoryInfo di = new DirectoryInfo(Host.ResolvePath("."));
    var parent = di.Parent;
    while(!string.Equals(parent.Name, "app"))
    {
        parent = parent.Parent;
    }
    var fullPath = parent.FullName + "\\NovaWeb\\dist\\novaweb\\libs\\mxClient\\stencils\\";
    return fullPath;
}
#>
